
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.0
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.0",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Address_tableScalarFieldEnum = makeEnum({
  id: 'id',
  user_address: 'user_address',
  user_street: 'user_street',
  user_pincode: 'user_pincode'
});

exports.Prisma.Cart_tableScalarFieldEnum = makeEnum({
  id: 'id',
  product_id: 'product_id',
  product_name: 'product_name',
  product_price_cart: 'product_price_cart',
  product_quantity_cart: 'product_quantity_cart',
  product_image: 'product_image'
});

exports.Prisma.Credit_tableScalarFieldEnum = makeEnum({
  id: 'id',
  credit_balance: 'credit_balance'
});

exports.Prisma.Customer_agedetailsScalarFieldEnum = makeEnum({
  ID: 'ID',
  customer_id: 'customer_id',
  customer_age: 'customer_age'
});

exports.Prisma.Customer_tblScalarFieldEnum = makeEnum({
  ID: 'ID',
  customer_first_name: 'customer_first_name',
  customer_last_name: 'customer_last_name',
  Email_id: 'Email_id'
});

exports.Prisma.Deliver_statusScalarFieldEnum = makeEnum({
  deliver_id: 'deliver_id',
  customer_id: 'customer_id',
  product_status: 'product_status'
});

exports.Prisma.Orders_tblScalarFieldEnum = makeEnum({
  product_id: 'product_id',
  product_name: 'product_name',
  product_price: 'product_price',
  customer_id: 'customer_id'
});

exports.Prisma.Product_tableScalarFieldEnum = makeEnum({
  product_id: 'product_id',
  product_image: 'product_image',
  product_name: 'product_name',
  product_price: 'product_price',
  strikeout_price: 'strikeout_price'
});

exports.Prisma.Save_address_tableScalarFieldEnum = makeEnum({
  id: 'id',
  user_address: 'user_address',
  user_street: 'user_street',
  user_pincode: 'user_pincode'
});

exports.Prisma.Save_cart_totalpriceScalarFieldEnum = makeEnum({
  id: 'id',
  save_cart_totalprice: 'save_cart_totalprice'
});

exports.Prisma.Save_later_tableScalarFieldEnum = makeEnum({
  id: 'id',
  product_id: 'product_id',
  product_name: 'product_name',
  product_price_cart: 'product_price_cart',
  product_quantity_cart: 'product_quantity_cart',
  product_image: 'product_image',
  product_price: 'product_price'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StatusScalarFieldEnum = makeEnum({
  ID: 'ID',
  current_status: 'current_status'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.User_registrationScalarFieldEnum = makeEnum({
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  contact_number: 'contact_number',
  email_id: 'email_id',
  address: 'address',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status'
});


exports.Prisma.ModelName = makeEnum({
  user_registration: 'user_registration',
  customer_tbl: 'customer_tbl',
  orders_tbl: 'orders_tbl',
  deliver_status: 'deliver_status',
  customer_agedetails: 'customer_agedetails',
  status: 'status',
  cart_table: 'cart_table',
  product_table: 'product_table',
  save_later_table: 'save_later_table',
  address_table: 'address_table',
  save_address_table: 'save_address_table',
  save_cart_totalprice: 'save_cart_totalprice',
  credit_table: 'credit_table'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
