
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user_registration
 * 
 */
export type user_registration = {
  id: number
  first_name: string
  last_name: string
  contact_number: bigint
  email_id: string
  address: string
  created_at: Date
  updated_at: Date
  status: number
}

/**
 * Model customer_tbl
 * 
 */
export type customer_tbl = {
  ID: number
  customer_first_name: string
  customer_last_name: string
  Email_id: string
}

/**
 * Model orders_tbl
 * 
 */
export type orders_tbl = {
  ID: number
  product_name: string | null
  Product_price: number | null
  customer_id: number | null
}

/**
 * Model deliver_status
 * 
 */
export type deliver_status = {
  ID: number
  status: number
  customer_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more User_registrations
 * const user_registrations = await prisma.user_registration.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more User_registrations
   * const user_registrations = await prisma.user_registration.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user_registration`: Exposes CRUD operations for the **user_registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_registrations
    * const user_registrations = await prisma.user_registration.findMany()
    * ```
    */
  get user_registration(): Prisma.user_registrationDelegate<GlobalReject>;

  /**
   * `prisma.customer_tbl`: Exposes CRUD operations for the **customer_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customer_tbls
    * const customer_tbls = await prisma.customer_tbl.findMany()
    * ```
    */
  get customer_tbl(): Prisma.customer_tblDelegate<GlobalReject>;

  /**
   * `prisma.orders_tbl`: Exposes CRUD operations for the **orders_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders_tbls
    * const orders_tbls = await prisma.orders_tbl.findMany()
    * ```
    */
  get orders_tbl(): Prisma.orders_tblDelegate<GlobalReject>;

  /**
   * `prisma.deliver_status`: Exposes CRUD operations for the **deliver_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliver_statuses
    * const deliver_statuses = await prisma.deliver_status.findMany()
    * ```
    */
  get deliver_status(): Prisma.deliver_statusDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user_registration: 'user_registration',
    customer_tbl: 'customer_tbl',
    orders_tbl: 'orders_tbl',
    deliver_status: 'deliver_status'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Customer_tblCountOutputType
   */


  export type Customer_tblCountOutputType = {
    deliver_status: number
    orders_tbl: number
  }

  export type Customer_tblCountOutputTypeSelect = {
    deliver_status?: boolean
    orders_tbl?: boolean
  }

  export type Customer_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Customer_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Customer_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Customer_tblCountOutputTypeArgs
    ?'include' extends U
    ? Customer_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Customer_tblCountOutputType ? Customer_tblCountOutputType[P] : never
  } 
    : Customer_tblCountOutputType
  : Customer_tblCountOutputType




  // Custom InputTypes

  /**
   * Customer_tblCountOutputType without action
   */
  export type Customer_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Customer_tblCountOutputType
     * 
    **/
    select?: Customer_tblCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user_registration
   */


  export type AggregateUser_registration = {
    _count: User_registrationCountAggregateOutputType | null
    _avg: User_registrationAvgAggregateOutputType | null
    _sum: User_registrationSumAggregateOutputType | null
    _min: User_registrationMinAggregateOutputType | null
    _max: User_registrationMaxAggregateOutputType | null
  }

  export type User_registrationAvgAggregateOutputType = {
    id: number | null
    contact_number: number | null
    status: number | null
  }

  export type User_registrationSumAggregateOutputType = {
    id: number | null
    contact_number: bigint | null
    status: number | null
  }

  export type User_registrationMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    contact_number: bigint | null
    email_id: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
    status: number | null
  }

  export type User_registrationMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    contact_number: bigint | null
    email_id: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
    status: number | null
  }

  export type User_registrationCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    contact_number: number
    email_id: number
    address: number
    created_at: number
    updated_at: number
    status: number
    _all: number
  }


  export type User_registrationAvgAggregateInputType = {
    id?: true
    contact_number?: true
    status?: true
  }

  export type User_registrationSumAggregateInputType = {
    id?: true
    contact_number?: true
    status?: true
  }

  export type User_registrationMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
  }

  export type User_registrationMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
  }

  export type User_registrationCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
    _all?: true
  }

  export type User_registrationAggregateArgs = {
    /**
     * Filter which user_registration to aggregate.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_registrations
    **/
    _count?: true | User_registrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_registrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_registrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_registrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_registrationMaxAggregateInputType
  }

  export type GetUser_registrationAggregateType<T extends User_registrationAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_registration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_registration[P]>
      : GetScalarType<T[P], AggregateUser_registration[P]>
  }




  export type User_registrationGroupByArgs = {
    where?: user_registrationWhereInput
    orderBy?: Enumerable<user_registrationOrderByWithAggregationInput>
    by: Array<User_registrationScalarFieldEnum>
    having?: user_registrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_registrationCountAggregateInputType | true
    _avg?: User_registrationAvgAggregateInputType
    _sum?: User_registrationSumAggregateInputType
    _min?: User_registrationMinAggregateInputType
    _max?: User_registrationMaxAggregateInputType
  }


  export type User_registrationGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    contact_number: bigint
    email_id: string
    address: string
    created_at: Date
    updated_at: Date
    status: number
    _count: User_registrationCountAggregateOutputType | null
    _avg: User_registrationAvgAggregateOutputType | null
    _sum: User_registrationSumAggregateOutputType | null
    _min: User_registrationMinAggregateOutputType | null
    _max: User_registrationMaxAggregateOutputType | null
  }

  type GetUser_registrationGroupByPayload<T extends User_registrationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_registrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_registrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_registrationGroupByOutputType[P]>
            : GetScalarType<T[P], User_registrationGroupByOutputType[P]>
        }
      >
    >


  export type user_registrationSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    contact_number?: boolean
    email_id?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
  }

  export type user_registrationGetPayload<
    S extends boolean | null | undefined | user_registrationArgs,
    U = keyof S
      > = S extends true
        ? user_registration
    : S extends undefined
    ? never
    : S extends user_registrationArgs | user_registrationFindManyArgs
    ?'include' extends U
    ? user_registration 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof user_registration ? user_registration[P] : never
  } 
    : user_registration
  : user_registration


  type user_registrationCountArgs = Merge<
    Omit<user_registrationFindManyArgs, 'select' | 'include'> & {
      select?: User_registrationCountAggregateInputType | true
    }
  >

  export interface user_registrationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_registration that matches the filter.
     * @param {user_registrationFindUniqueArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_registrationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_registrationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_registration'> extends True ? CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>> : CheckSelect<T, Prisma__user_registrationClient<user_registration | null >, Prisma__user_registrationClient<user_registrationGetPayload<T> | null >>

    /**
     * Find the first User_registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindFirstArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_registrationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_registrationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_registration'> extends True ? CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>> : CheckSelect<T, Prisma__user_registrationClient<user_registration | null >, Prisma__user_registrationClient<user_registrationGetPayload<T> | null >>

    /**
     * Find zero or more User_registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_registrations
     * const user_registrations = await prisma.user_registration.findMany()
     * 
     * // Get first 10 User_registrations
     * const user_registrations = await prisma.user_registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_registrationWithIdOnly = await prisma.user_registration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_registrationFindManyArgs>(
      args?: SelectSubset<T, user_registrationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_registration>>, PrismaPromise<Array<user_registrationGetPayload<T>>>>

    /**
     * Create a User_registration.
     * @param {user_registrationCreateArgs} args - Arguments to create a User_registration.
     * @example
     * // Create one User_registration
     * const User_registration = await prisma.user_registration.create({
     *   data: {
     *     // ... data to create a User_registration
     *   }
     * })
     * 
    **/
    create<T extends user_registrationCreateArgs>(
      args: SelectSubset<T, user_registrationCreateArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Create many User_registrations.
     *     @param {user_registrationCreateManyArgs} args - Arguments to create many User_registrations.
     *     @example
     *     // Create many User_registrations
     *     const user_registration = await prisma.user_registration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_registrationCreateManyArgs>(
      args?: SelectSubset<T, user_registrationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_registration.
     * @param {user_registrationDeleteArgs} args - Arguments to delete one User_registration.
     * @example
     * // Delete one User_registration
     * const User_registration = await prisma.user_registration.delete({
     *   where: {
     *     // ... filter to delete one User_registration
     *   }
     * })
     * 
    **/
    delete<T extends user_registrationDeleteArgs>(
      args: SelectSubset<T, user_registrationDeleteArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Update one User_registration.
     * @param {user_registrationUpdateArgs} args - Arguments to update one User_registration.
     * @example
     * // Update one User_registration
     * const user_registration = await prisma.user_registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_registrationUpdateArgs>(
      args: SelectSubset<T, user_registrationUpdateArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Delete zero or more User_registrations.
     * @param {user_registrationDeleteManyArgs} args - Arguments to filter User_registrations to delete.
     * @example
     * // Delete a few User_registrations
     * const { count } = await prisma.user_registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_registrationDeleteManyArgs>(
      args?: SelectSubset<T, user_registrationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_registrations
     * const user_registration = await prisma.user_registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_registrationUpdateManyArgs>(
      args: SelectSubset<T, user_registrationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_registration.
     * @param {user_registrationUpsertArgs} args - Arguments to update or create a User_registration.
     * @example
     * // Update or create a User_registration
     * const user_registration = await prisma.user_registration.upsert({
     *   create: {
     *     // ... data to create a User_registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_registration we want to update
     *   }
     * })
    **/
    upsert<T extends user_registrationUpsertArgs>(
      args: SelectSubset<T, user_registrationUpsertArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Find one User_registration that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_registrationFindUniqueOrThrowArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_registrationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_registrationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Find the first User_registration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindFirstOrThrowArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_registrationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_registrationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Count the number of User_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationCountArgs} args - Arguments to filter User_registrations to count.
     * @example
     * // Count the number of User_registrations
     * const count = await prisma.user_registration.count({
     *   where: {
     *     // ... the filter for the User_registrations we want to count
     *   }
     * })
    **/
    count<T extends user_registrationCountArgs>(
      args?: Subset<T, user_registrationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_registrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_registrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_registrationAggregateArgs>(args: Subset<T, User_registrationAggregateArgs>): PrismaPromise<GetUser_registrationAggregateType<T>>

    /**
     * Group by User_registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_registrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_registrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_registrationGroupByArgs['orderBy'] }
        : { orderBy?: User_registrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_registrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_registrationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_registrationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_registration base type for findUnique actions
   */
  export type user_registrationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registration to fetch.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }

  /**
   * user_registration: findUnique
   */
  export interface user_registrationFindUniqueArgs extends user_registrationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_registration base type for findFirst actions
   */
  export type user_registrationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registration to fetch.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_registrations.
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_registrations.
     * 
    **/
    distinct?: Enumerable<User_registrationScalarFieldEnum>
  }

  /**
   * user_registration: findFirst
   */
  export interface user_registrationFindFirstArgs extends user_registrationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_registration findMany
   */
  export type user_registrationFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registrations to fetch.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_registrations.
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_registrationScalarFieldEnum>
  }


  /**
   * user_registration create
   */
  export type user_registrationCreateArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The data needed to create a user_registration.
     * 
    **/
    data: XOR<user_registrationCreateInput, user_registrationUncheckedCreateInput>
  }


  /**
   * user_registration createMany
   */
  export type user_registrationCreateManyArgs = {
    /**
     * The data used to create many user_registrations.
     * 
    **/
    data: Enumerable<user_registrationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_registration update
   */
  export type user_registrationUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The data needed to update a user_registration.
     * 
    **/
    data: XOR<user_registrationUpdateInput, user_registrationUncheckedUpdateInput>
    /**
     * Choose, which user_registration to update.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }


  /**
   * user_registration updateMany
   */
  export type user_registrationUpdateManyArgs = {
    /**
     * The data used to update user_registrations.
     * 
    **/
    data: XOR<user_registrationUpdateManyMutationInput, user_registrationUncheckedUpdateManyInput>
    /**
     * Filter which user_registrations to update
     * 
    **/
    where?: user_registrationWhereInput
  }


  /**
   * user_registration upsert
   */
  export type user_registrationUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The filter to search for the user_registration to update in case it exists.
     * 
    **/
    where: user_registrationWhereUniqueInput
    /**
     * In case the user_registration found by the `where` argument doesn't exist, create a new user_registration with this data.
     * 
    **/
    create: XOR<user_registrationCreateInput, user_registrationUncheckedCreateInput>
    /**
     * In case the user_registration was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_registrationUpdateInput, user_registrationUncheckedUpdateInput>
  }


  /**
   * user_registration delete
   */
  export type user_registrationDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter which user_registration to delete.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }


  /**
   * user_registration deleteMany
   */
  export type user_registrationDeleteManyArgs = {
    /**
     * Filter which user_registrations to delete
     * 
    **/
    where?: user_registrationWhereInput
  }


  /**
   * user_registration: findUniqueOrThrow
   */
  export type user_registrationFindUniqueOrThrowArgs = user_registrationFindUniqueArgsBase
      

  /**
   * user_registration: findFirstOrThrow
   */
  export type user_registrationFindFirstOrThrowArgs = user_registrationFindFirstArgsBase
      

  /**
   * user_registration without action
   */
  export type user_registrationArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
  }



  /**
   * Model customer_tbl
   */


  export type AggregateCustomer_tbl = {
    _count: Customer_tblCountAggregateOutputType | null
    _avg: Customer_tblAvgAggregateOutputType | null
    _sum: Customer_tblSumAggregateOutputType | null
    _min: Customer_tblMinAggregateOutputType | null
    _max: Customer_tblMaxAggregateOutputType | null
  }

  export type Customer_tblAvgAggregateOutputType = {
    ID: number | null
  }

  export type Customer_tblSumAggregateOutputType = {
    ID: number | null
  }

  export type Customer_tblMinAggregateOutputType = {
    ID: number | null
    customer_first_name: string | null
    customer_last_name: string | null
    Email_id: string | null
  }

  export type Customer_tblMaxAggregateOutputType = {
    ID: number | null
    customer_first_name: string | null
    customer_last_name: string | null
    Email_id: string | null
  }

  export type Customer_tblCountAggregateOutputType = {
    ID: number
    customer_first_name: number
    customer_last_name: number
    Email_id: number
    _all: number
  }


  export type Customer_tblAvgAggregateInputType = {
    ID?: true
  }

  export type Customer_tblSumAggregateInputType = {
    ID?: true
  }

  export type Customer_tblMinAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
  }

  export type Customer_tblMaxAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
  }

  export type Customer_tblCountAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
    _all?: true
  }

  export type Customer_tblAggregateArgs = {
    /**
     * Filter which customer_tbl to aggregate.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customer_tbls
    **/
    _count?: true | Customer_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Customer_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Customer_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Customer_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Customer_tblMaxAggregateInputType
  }

  export type GetCustomer_tblAggregateType<T extends Customer_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer_tbl[P]>
      : GetScalarType<T[P], AggregateCustomer_tbl[P]>
  }




  export type Customer_tblGroupByArgs = {
    where?: customer_tblWhereInput
    orderBy?: Enumerable<customer_tblOrderByWithAggregationInput>
    by: Array<Customer_tblScalarFieldEnum>
    having?: customer_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Customer_tblCountAggregateInputType | true
    _avg?: Customer_tblAvgAggregateInputType
    _sum?: Customer_tblSumAggregateInputType
    _min?: Customer_tblMinAggregateInputType
    _max?: Customer_tblMaxAggregateInputType
  }


  export type Customer_tblGroupByOutputType = {
    ID: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    _count: Customer_tblCountAggregateOutputType | null
    _avg: Customer_tblAvgAggregateOutputType | null
    _sum: Customer_tblSumAggregateOutputType | null
    _min: Customer_tblMinAggregateOutputType | null
    _max: Customer_tblMaxAggregateOutputType | null
  }

  type GetCustomer_tblGroupByPayload<T extends Customer_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Customer_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Customer_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Customer_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Customer_tblGroupByOutputType[P]>
        }
      >
    >


  export type customer_tblSelect = {
    ID?: boolean
    customer_first_name?: boolean
    customer_last_name?: boolean
    Email_id?: boolean
    deliver_status?: boolean | deliver_statusFindManyArgs
    orders_tbl?: boolean | orders_tblFindManyArgs
    _count?: boolean | Customer_tblCountOutputTypeArgs
  }

  export type customer_tblInclude = {
    deliver_status?: boolean | deliver_statusFindManyArgs
    orders_tbl?: boolean | orders_tblFindManyArgs
    _count?: boolean | Customer_tblCountOutputTypeArgs
  }

  export type customer_tblGetPayload<
    S extends boolean | null | undefined | customer_tblArgs,
    U = keyof S
      > = S extends true
        ? customer_tbl
    : S extends undefined
    ? never
    : S extends customer_tblArgs | customer_tblFindManyArgs
    ?'include' extends U
    ? customer_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'deliver_status' ? Array < deliver_statusGetPayload<S['include'][P]>>  :
        P extends 'orders_tbl' ? Array < orders_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Customer_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'deliver_status' ? Array < deliver_statusGetPayload<S['select'][P]>>  :
        P extends 'orders_tbl' ? Array < orders_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Customer_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof customer_tbl ? customer_tbl[P] : never
  } 
    : customer_tbl
  : customer_tbl


  type customer_tblCountArgs = Merge<
    Omit<customer_tblFindManyArgs, 'select' | 'include'> & {
      select?: Customer_tblCountAggregateInputType | true
    }
  >

  export interface customer_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Customer_tbl that matches the filter.
     * @param {customer_tblFindUniqueArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customer_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customer_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customer_tbl'> extends True ? CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>> : CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>

    /**
     * Find the first Customer_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindFirstArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customer_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customer_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customer_tbl'> extends True ? CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>> : CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>

    /**
     * Find zero or more Customer_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customer_tbls
     * const customer_tbls = await prisma.customer_tbl.findMany()
     * 
     * // Get first 10 Customer_tbls
     * const customer_tbls = await prisma.customer_tbl.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const customer_tblWithIDOnly = await prisma.customer_tbl.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends customer_tblFindManyArgs>(
      args?: SelectSubset<T, customer_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<customer_tbl>>, PrismaPromise<Array<customer_tblGetPayload<T>>>>

    /**
     * Create a Customer_tbl.
     * @param {customer_tblCreateArgs} args - Arguments to create a Customer_tbl.
     * @example
     * // Create one Customer_tbl
     * const Customer_tbl = await prisma.customer_tbl.create({
     *   data: {
     *     // ... data to create a Customer_tbl
     *   }
     * })
     * 
    **/
    create<T extends customer_tblCreateArgs>(
      args: SelectSubset<T, customer_tblCreateArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Create many Customer_tbls.
     *     @param {customer_tblCreateManyArgs} args - Arguments to create many Customer_tbls.
     *     @example
     *     // Create many Customer_tbls
     *     const customer_tbl = await prisma.customer_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customer_tblCreateManyArgs>(
      args?: SelectSubset<T, customer_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customer_tbl.
     * @param {customer_tblDeleteArgs} args - Arguments to delete one Customer_tbl.
     * @example
     * // Delete one Customer_tbl
     * const Customer_tbl = await prisma.customer_tbl.delete({
     *   where: {
     *     // ... filter to delete one Customer_tbl
     *   }
     * })
     * 
    **/
    delete<T extends customer_tblDeleteArgs>(
      args: SelectSubset<T, customer_tblDeleteArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Update one Customer_tbl.
     * @param {customer_tblUpdateArgs} args - Arguments to update one Customer_tbl.
     * @example
     * // Update one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customer_tblUpdateArgs>(
      args: SelectSubset<T, customer_tblUpdateArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Delete zero or more Customer_tbls.
     * @param {customer_tblDeleteManyArgs} args - Arguments to filter Customer_tbls to delete.
     * @example
     * // Delete a few Customer_tbls
     * const { count } = await prisma.customer_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customer_tblDeleteManyArgs>(
      args?: SelectSubset<T, customer_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customer_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customer_tbls
     * const customer_tbl = await prisma.customer_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customer_tblUpdateManyArgs>(
      args: SelectSubset<T, customer_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer_tbl.
     * @param {customer_tblUpsertArgs} args - Arguments to update or create a Customer_tbl.
     * @example
     * // Update or create a Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.upsert({
     *   create: {
     *     // ... data to create a Customer_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends customer_tblUpsertArgs>(
      args: SelectSubset<T, customer_tblUpsertArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Find one Customer_tbl that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {customer_tblFindUniqueOrThrowArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customer_tblFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customer_tblFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Find the first Customer_tbl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindFirstOrThrowArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customer_tblFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customer_tblFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Count the number of Customer_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblCountArgs} args - Arguments to filter Customer_tbls to count.
     * @example
     * // Count the number of Customer_tbls
     * const count = await prisma.customer_tbl.count({
     *   where: {
     *     // ... the filter for the Customer_tbls we want to count
     *   }
     * })
    **/
    count<T extends customer_tblCountArgs>(
      args?: Subset<T, customer_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Customer_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Customer_tblAggregateArgs>(args: Subset<T, Customer_tblAggregateArgs>): PrismaPromise<GetCustomer_tblAggregateType<T>>

    /**
     * Group by Customer_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Customer_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Customer_tblGroupByArgs['orderBy'] }
        : { orderBy?: Customer_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Customer_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomer_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customer_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    deliver_status<T extends deliver_statusFindManyArgs = {}>(args?: Subset<T, deliver_statusFindManyArgs>): CheckSelect<T, PrismaPromise<Array<deliver_status>>, PrismaPromise<Array<deliver_statusGetPayload<T>>>>;

    orders_tbl<T extends orders_tblFindManyArgs = {}>(args?: Subset<T, orders_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<orders_tbl>>, PrismaPromise<Array<orders_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * customer_tbl base type for findUnique actions
   */
  export type customer_tblFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbl to fetch.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }

  /**
   * customer_tbl: findUnique
   */
  export interface customer_tblFindUniqueArgs extends customer_tblFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_tbl base type for findFirst actions
   */
  export type customer_tblFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbl to fetch.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_tbls.
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_tbls.
     * 
    **/
    distinct?: Enumerable<Customer_tblScalarFieldEnum>
  }

  /**
   * customer_tbl: findFirst
   */
  export interface customer_tblFindFirstArgs extends customer_tblFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_tbl findMany
   */
  export type customer_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbls to fetch.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customer_tbls.
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Customer_tblScalarFieldEnum>
  }


  /**
   * customer_tbl create
   */
  export type customer_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The data needed to create a customer_tbl.
     * 
    **/
    data: XOR<customer_tblCreateInput, customer_tblUncheckedCreateInput>
  }


  /**
   * customer_tbl createMany
   */
  export type customer_tblCreateManyArgs = {
    /**
     * The data used to create many customer_tbls.
     * 
    **/
    data: Enumerable<customer_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customer_tbl update
   */
  export type customer_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The data needed to update a customer_tbl.
     * 
    **/
    data: XOR<customer_tblUpdateInput, customer_tblUncheckedUpdateInput>
    /**
     * Choose, which customer_tbl to update.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }


  /**
   * customer_tbl updateMany
   */
  export type customer_tblUpdateManyArgs = {
    /**
     * The data used to update customer_tbls.
     * 
    **/
    data: XOR<customer_tblUpdateManyMutationInput, customer_tblUncheckedUpdateManyInput>
    /**
     * Filter which customer_tbls to update
     * 
    **/
    where?: customer_tblWhereInput
  }


  /**
   * customer_tbl upsert
   */
  export type customer_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The filter to search for the customer_tbl to update in case it exists.
     * 
    **/
    where: customer_tblWhereUniqueInput
    /**
     * In case the customer_tbl found by the `where` argument doesn't exist, create a new customer_tbl with this data.
     * 
    **/
    create: XOR<customer_tblCreateInput, customer_tblUncheckedCreateInput>
    /**
     * In case the customer_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customer_tblUpdateInput, customer_tblUncheckedUpdateInput>
  }


  /**
   * customer_tbl delete
   */
  export type customer_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter which customer_tbl to delete.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }


  /**
   * customer_tbl deleteMany
   */
  export type customer_tblDeleteManyArgs = {
    /**
     * Filter which customer_tbls to delete
     * 
    **/
    where?: customer_tblWhereInput
  }


  /**
   * customer_tbl: findUniqueOrThrow
   */
  export type customer_tblFindUniqueOrThrowArgs = customer_tblFindUniqueArgsBase
      

  /**
   * customer_tbl: findFirstOrThrow
   */
  export type customer_tblFindFirstOrThrowArgs = customer_tblFindFirstArgsBase
      

  /**
   * customer_tbl without action
   */
  export type customer_tblArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
  }



  /**
   * Model orders_tbl
   */


  export type AggregateOrders_tbl = {
    _count: Orders_tblCountAggregateOutputType | null
    _avg: Orders_tblAvgAggregateOutputType | null
    _sum: Orders_tblSumAggregateOutputType | null
    _min: Orders_tblMinAggregateOutputType | null
    _max: Orders_tblMaxAggregateOutputType | null
  }

  export type Orders_tblAvgAggregateOutputType = {
    ID: number | null
    Product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblSumAggregateOutputType = {
    ID: number | null
    Product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblMinAggregateOutputType = {
    ID: number | null
    product_name: string | null
    Product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblMaxAggregateOutputType = {
    ID: number | null
    product_name: string | null
    Product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblCountAggregateOutputType = {
    ID: number
    product_name: number
    Product_price: number
    customer_id: number
    _all: number
  }


  export type Orders_tblAvgAggregateInputType = {
    ID?: true
    Product_price?: true
    customer_id?: true
  }

  export type Orders_tblSumAggregateInputType = {
    ID?: true
    Product_price?: true
    customer_id?: true
  }

  export type Orders_tblMinAggregateInputType = {
    ID?: true
    product_name?: true
    Product_price?: true
    customer_id?: true
  }

  export type Orders_tblMaxAggregateInputType = {
    ID?: true
    product_name?: true
    Product_price?: true
    customer_id?: true
  }

  export type Orders_tblCountAggregateInputType = {
    ID?: true
    product_name?: true
    Product_price?: true
    customer_id?: true
    _all?: true
  }

  export type Orders_tblAggregateArgs = {
    /**
     * Filter which orders_tbl to aggregate.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders_tbls
    **/
    _count?: true | Orders_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Orders_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Orders_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Orders_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Orders_tblMaxAggregateInputType
  }

  export type GetOrders_tblAggregateType<T extends Orders_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders_tbl[P]>
      : GetScalarType<T[P], AggregateOrders_tbl[P]>
  }




  export type Orders_tblGroupByArgs = {
    where?: orders_tblWhereInput
    orderBy?: Enumerable<orders_tblOrderByWithAggregationInput>
    by: Array<Orders_tblScalarFieldEnum>
    having?: orders_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Orders_tblCountAggregateInputType | true
    _avg?: Orders_tblAvgAggregateInputType
    _sum?: Orders_tblSumAggregateInputType
    _min?: Orders_tblMinAggregateInputType
    _max?: Orders_tblMaxAggregateInputType
  }


  export type Orders_tblGroupByOutputType = {
    ID: number
    product_name: string | null
    Product_price: number | null
    customer_id: number | null
    _count: Orders_tblCountAggregateOutputType | null
    _avg: Orders_tblAvgAggregateOutputType | null
    _sum: Orders_tblSumAggregateOutputType | null
    _min: Orders_tblMinAggregateOutputType | null
    _max: Orders_tblMaxAggregateOutputType | null
  }

  type GetOrders_tblGroupByPayload<T extends Orders_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Orders_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Orders_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Orders_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Orders_tblGroupByOutputType[P]>
        }
      >
    >


  export type orders_tblSelect = {
    ID?: boolean
    product_name?: boolean
    Product_price?: boolean
    customer_id?: boolean
    customer_tbl?: boolean | customer_tblArgs
  }

  export type orders_tblInclude = {
    customer_tbl?: boolean | customer_tblArgs
  }

  export type orders_tblGetPayload<
    S extends boolean | null | undefined | orders_tblArgs,
    U = keyof S
      > = S extends true
        ? orders_tbl
    : S extends undefined
    ? never
    : S extends orders_tblArgs | orders_tblFindManyArgs
    ?'include' extends U
    ? orders_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['select'][P]> | null :  P extends keyof orders_tbl ? orders_tbl[P] : never
  } 
    : orders_tbl
  : orders_tbl


  type orders_tblCountArgs = Merge<
    Omit<orders_tblFindManyArgs, 'select' | 'include'> & {
      select?: Orders_tblCountAggregateInputType | true
    }
  >

  export interface orders_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Orders_tbl that matches the filter.
     * @param {orders_tblFindUniqueArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orders_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, orders_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders_tbl'> extends True ? CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>> : CheckSelect<T, Prisma__orders_tblClient<orders_tbl | null >, Prisma__orders_tblClient<orders_tblGetPayload<T> | null >>

    /**
     * Find the first Orders_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindFirstArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orders_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, orders_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders_tbl'> extends True ? CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>> : CheckSelect<T, Prisma__orders_tblClient<orders_tbl | null >, Prisma__orders_tblClient<orders_tblGetPayload<T> | null >>

    /**
     * Find zero or more Orders_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders_tbls
     * const orders_tbls = await prisma.orders_tbl.findMany()
     * 
     * // Get first 10 Orders_tbls
     * const orders_tbls = await prisma.orders_tbl.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const orders_tblWithIDOnly = await prisma.orders_tbl.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends orders_tblFindManyArgs>(
      args?: SelectSubset<T, orders_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<orders_tbl>>, PrismaPromise<Array<orders_tblGetPayload<T>>>>

    /**
     * Create a Orders_tbl.
     * @param {orders_tblCreateArgs} args - Arguments to create a Orders_tbl.
     * @example
     * // Create one Orders_tbl
     * const Orders_tbl = await prisma.orders_tbl.create({
     *   data: {
     *     // ... data to create a Orders_tbl
     *   }
     * })
     * 
    **/
    create<T extends orders_tblCreateArgs>(
      args: SelectSubset<T, orders_tblCreateArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Create many Orders_tbls.
     *     @param {orders_tblCreateManyArgs} args - Arguments to create many Orders_tbls.
     *     @example
     *     // Create many Orders_tbls
     *     const orders_tbl = await prisma.orders_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orders_tblCreateManyArgs>(
      args?: SelectSubset<T, orders_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Orders_tbl.
     * @param {orders_tblDeleteArgs} args - Arguments to delete one Orders_tbl.
     * @example
     * // Delete one Orders_tbl
     * const Orders_tbl = await prisma.orders_tbl.delete({
     *   where: {
     *     // ... filter to delete one Orders_tbl
     *   }
     * })
     * 
    **/
    delete<T extends orders_tblDeleteArgs>(
      args: SelectSubset<T, orders_tblDeleteArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Update one Orders_tbl.
     * @param {orders_tblUpdateArgs} args - Arguments to update one Orders_tbl.
     * @example
     * // Update one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orders_tblUpdateArgs>(
      args: SelectSubset<T, orders_tblUpdateArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Delete zero or more Orders_tbls.
     * @param {orders_tblDeleteManyArgs} args - Arguments to filter Orders_tbls to delete.
     * @example
     * // Delete a few Orders_tbls
     * const { count } = await prisma.orders_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orders_tblDeleteManyArgs>(
      args?: SelectSubset<T, orders_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders_tbls
     * const orders_tbl = await prisma.orders_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orders_tblUpdateManyArgs>(
      args: SelectSubset<T, orders_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders_tbl.
     * @param {orders_tblUpsertArgs} args - Arguments to update or create a Orders_tbl.
     * @example
     * // Update or create a Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.upsert({
     *   create: {
     *     // ... data to create a Orders_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends orders_tblUpsertArgs>(
      args: SelectSubset<T, orders_tblUpsertArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Find one Orders_tbl that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {orders_tblFindUniqueOrThrowArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orders_tblFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, orders_tblFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Find the first Orders_tbl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindFirstOrThrowArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orders_tblFindFirstOrThrowArgs>(
      args?: SelectSubset<T, orders_tblFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Count the number of Orders_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblCountArgs} args - Arguments to filter Orders_tbls to count.
     * @example
     * // Count the number of Orders_tbls
     * const count = await prisma.orders_tbl.count({
     *   where: {
     *     // ... the filter for the Orders_tbls we want to count
     *   }
     * })
    **/
    count<T extends orders_tblCountArgs>(
      args?: Subset<T, orders_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Orders_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Orders_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Orders_tblAggregateArgs>(args: Subset<T, Orders_tblAggregateArgs>): PrismaPromise<GetOrders_tblAggregateType<T>>

    /**
     * Group by Orders_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Orders_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Orders_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Orders_tblGroupByArgs['orderBy'] }
        : { orderBy?: Orders_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Orders_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrders_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__orders_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_tbl<T extends customer_tblArgs = {}>(args?: Subset<T, customer_tblArgs>): CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * orders_tbl base type for findUnique actions
   */
  export type orders_tblFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbl to fetch.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }

  /**
   * orders_tbl: findUnique
   */
  export interface orders_tblFindUniqueArgs extends orders_tblFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders_tbl base type for findFirst actions
   */
  export type orders_tblFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbl to fetch.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders_tbls.
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders_tbls.
     * 
    **/
    distinct?: Enumerable<Orders_tblScalarFieldEnum>
  }

  /**
   * orders_tbl: findFirst
   */
  export interface orders_tblFindFirstArgs extends orders_tblFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders_tbl findMany
   */
  export type orders_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbls to fetch.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders_tbls.
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Orders_tblScalarFieldEnum>
  }


  /**
   * orders_tbl create
   */
  export type orders_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The data needed to create a orders_tbl.
     * 
    **/
    data: XOR<orders_tblCreateInput, orders_tblUncheckedCreateInput>
  }


  /**
   * orders_tbl createMany
   */
  export type orders_tblCreateManyArgs = {
    /**
     * The data used to create many orders_tbls.
     * 
    **/
    data: Enumerable<orders_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders_tbl update
   */
  export type orders_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The data needed to update a orders_tbl.
     * 
    **/
    data: XOR<orders_tblUpdateInput, orders_tblUncheckedUpdateInput>
    /**
     * Choose, which orders_tbl to update.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }


  /**
   * orders_tbl updateMany
   */
  export type orders_tblUpdateManyArgs = {
    /**
     * The data used to update orders_tbls.
     * 
    **/
    data: XOR<orders_tblUpdateManyMutationInput, orders_tblUncheckedUpdateManyInput>
    /**
     * Filter which orders_tbls to update
     * 
    **/
    where?: orders_tblWhereInput
  }


  /**
   * orders_tbl upsert
   */
  export type orders_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The filter to search for the orders_tbl to update in case it exists.
     * 
    **/
    where: orders_tblWhereUniqueInput
    /**
     * In case the orders_tbl found by the `where` argument doesn't exist, create a new orders_tbl with this data.
     * 
    **/
    create: XOR<orders_tblCreateInput, orders_tblUncheckedCreateInput>
    /**
     * In case the orders_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<orders_tblUpdateInput, orders_tblUncheckedUpdateInput>
  }


  /**
   * orders_tbl delete
   */
  export type orders_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter which orders_tbl to delete.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }


  /**
   * orders_tbl deleteMany
   */
  export type orders_tblDeleteManyArgs = {
    /**
     * Filter which orders_tbls to delete
     * 
    **/
    where?: orders_tblWhereInput
  }


  /**
   * orders_tbl: findUniqueOrThrow
   */
  export type orders_tblFindUniqueOrThrowArgs = orders_tblFindUniqueArgsBase
      

  /**
   * orders_tbl: findFirstOrThrow
   */
  export type orders_tblFindFirstOrThrowArgs = orders_tblFindFirstArgsBase
      

  /**
   * orders_tbl without action
   */
  export type orders_tblArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
  }



  /**
   * Model deliver_status
   */


  export type AggregateDeliver_status = {
    _count: Deliver_statusCountAggregateOutputType | null
    _avg: Deliver_statusAvgAggregateOutputType | null
    _sum: Deliver_statusSumAggregateOutputType | null
    _min: Deliver_statusMinAggregateOutputType | null
    _max: Deliver_statusMaxAggregateOutputType | null
  }

  export type Deliver_statusAvgAggregateOutputType = {
    ID: number | null
    status: number | null
    customer_id: number | null
  }

  export type Deliver_statusSumAggregateOutputType = {
    ID: number | null
    status: number | null
    customer_id: number | null
  }

  export type Deliver_statusMinAggregateOutputType = {
    ID: number | null
    status: number | null
    customer_id: number | null
  }

  export type Deliver_statusMaxAggregateOutputType = {
    ID: number | null
    status: number | null
    customer_id: number | null
  }

  export type Deliver_statusCountAggregateOutputType = {
    ID: number
    status: number
    customer_id: number
    _all: number
  }


  export type Deliver_statusAvgAggregateInputType = {
    ID?: true
    status?: true
    customer_id?: true
  }

  export type Deliver_statusSumAggregateInputType = {
    ID?: true
    status?: true
    customer_id?: true
  }

  export type Deliver_statusMinAggregateInputType = {
    ID?: true
    status?: true
    customer_id?: true
  }

  export type Deliver_statusMaxAggregateInputType = {
    ID?: true
    status?: true
    customer_id?: true
  }

  export type Deliver_statusCountAggregateInputType = {
    ID?: true
    status?: true
    customer_id?: true
    _all?: true
  }

  export type Deliver_statusAggregateArgs = {
    /**
     * Filter which deliver_status to aggregate.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliver_statuses
    **/
    _count?: true | Deliver_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Deliver_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Deliver_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Deliver_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Deliver_statusMaxAggregateInputType
  }

  export type GetDeliver_statusAggregateType<T extends Deliver_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliver_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliver_status[P]>
      : GetScalarType<T[P], AggregateDeliver_status[P]>
  }




  export type Deliver_statusGroupByArgs = {
    where?: deliver_statusWhereInput
    orderBy?: Enumerable<deliver_statusOrderByWithAggregationInput>
    by: Array<Deliver_statusScalarFieldEnum>
    having?: deliver_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Deliver_statusCountAggregateInputType | true
    _avg?: Deliver_statusAvgAggregateInputType
    _sum?: Deliver_statusSumAggregateInputType
    _min?: Deliver_statusMinAggregateInputType
    _max?: Deliver_statusMaxAggregateInputType
  }


  export type Deliver_statusGroupByOutputType = {
    ID: number
    status: number
    customer_id: number
    _count: Deliver_statusCountAggregateOutputType | null
    _avg: Deliver_statusAvgAggregateOutputType | null
    _sum: Deliver_statusSumAggregateOutputType | null
    _min: Deliver_statusMinAggregateOutputType | null
    _max: Deliver_statusMaxAggregateOutputType | null
  }

  type GetDeliver_statusGroupByPayload<T extends Deliver_statusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Deliver_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Deliver_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Deliver_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Deliver_statusGroupByOutputType[P]>
        }
      >
    >


  export type deliver_statusSelect = {
    ID?: boolean
    status?: boolean
    customer_id?: boolean
    customer_tbl?: boolean | customer_tblArgs
  }

  export type deliver_statusInclude = {
    customer_tbl?: boolean | customer_tblArgs
  }

  export type deliver_statusGetPayload<
    S extends boolean | null | undefined | deliver_statusArgs,
    U = keyof S
      > = S extends true
        ? deliver_status
    : S extends undefined
    ? never
    : S extends deliver_statusArgs | deliver_statusFindManyArgs
    ?'include' extends U
    ? deliver_status  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['select'][P]> :  P extends keyof deliver_status ? deliver_status[P] : never
  } 
    : deliver_status
  : deliver_status


  type deliver_statusCountArgs = Merge<
    Omit<deliver_statusFindManyArgs, 'select' | 'include'> & {
      select?: Deliver_statusCountAggregateInputType | true
    }
  >

  export interface deliver_statusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Deliver_status that matches the filter.
     * @param {deliver_statusFindUniqueArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deliver_statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, deliver_statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'deliver_status'> extends True ? CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>> : CheckSelect<T, Prisma__deliver_statusClient<deliver_status | null >, Prisma__deliver_statusClient<deliver_statusGetPayload<T> | null >>

    /**
     * Find the first Deliver_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindFirstArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deliver_statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, deliver_statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'deliver_status'> extends True ? CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>> : CheckSelect<T, Prisma__deliver_statusClient<deliver_status | null >, Prisma__deliver_statusClient<deliver_statusGetPayload<T> | null >>

    /**
     * Find zero or more Deliver_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliver_statuses
     * const deliver_statuses = await prisma.deliver_status.findMany()
     * 
     * // Get first 10 Deliver_statuses
     * const deliver_statuses = await prisma.deliver_status.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const deliver_statusWithIDOnly = await prisma.deliver_status.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends deliver_statusFindManyArgs>(
      args?: SelectSubset<T, deliver_statusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<deliver_status>>, PrismaPromise<Array<deliver_statusGetPayload<T>>>>

    /**
     * Create a Deliver_status.
     * @param {deliver_statusCreateArgs} args - Arguments to create a Deliver_status.
     * @example
     * // Create one Deliver_status
     * const Deliver_status = await prisma.deliver_status.create({
     *   data: {
     *     // ... data to create a Deliver_status
     *   }
     * })
     * 
    **/
    create<T extends deliver_statusCreateArgs>(
      args: SelectSubset<T, deliver_statusCreateArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Create many Deliver_statuses.
     *     @param {deliver_statusCreateManyArgs} args - Arguments to create many Deliver_statuses.
     *     @example
     *     // Create many Deliver_statuses
     *     const deliver_status = await prisma.deliver_status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deliver_statusCreateManyArgs>(
      args?: SelectSubset<T, deliver_statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Deliver_status.
     * @param {deliver_statusDeleteArgs} args - Arguments to delete one Deliver_status.
     * @example
     * // Delete one Deliver_status
     * const Deliver_status = await prisma.deliver_status.delete({
     *   where: {
     *     // ... filter to delete one Deliver_status
     *   }
     * })
     * 
    **/
    delete<T extends deliver_statusDeleteArgs>(
      args: SelectSubset<T, deliver_statusDeleteArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Update one Deliver_status.
     * @param {deliver_statusUpdateArgs} args - Arguments to update one Deliver_status.
     * @example
     * // Update one Deliver_status
     * const deliver_status = await prisma.deliver_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deliver_statusUpdateArgs>(
      args: SelectSubset<T, deliver_statusUpdateArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Delete zero or more Deliver_statuses.
     * @param {deliver_statusDeleteManyArgs} args - Arguments to filter Deliver_statuses to delete.
     * @example
     * // Delete a few Deliver_statuses
     * const { count } = await prisma.deliver_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deliver_statusDeleteManyArgs>(
      args?: SelectSubset<T, deliver_statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliver_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliver_statuses
     * const deliver_status = await prisma.deliver_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deliver_statusUpdateManyArgs>(
      args: SelectSubset<T, deliver_statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Deliver_status.
     * @param {deliver_statusUpsertArgs} args - Arguments to update or create a Deliver_status.
     * @example
     * // Update or create a Deliver_status
     * const deliver_status = await prisma.deliver_status.upsert({
     *   create: {
     *     // ... data to create a Deliver_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliver_status we want to update
     *   }
     * })
    **/
    upsert<T extends deliver_statusUpsertArgs>(
      args: SelectSubset<T, deliver_statusUpsertArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Find one Deliver_status that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {deliver_statusFindUniqueOrThrowArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends deliver_statusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, deliver_statusFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Find the first Deliver_status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindFirstOrThrowArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends deliver_statusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, deliver_statusFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Count the number of Deliver_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusCountArgs} args - Arguments to filter Deliver_statuses to count.
     * @example
     * // Count the number of Deliver_statuses
     * const count = await prisma.deliver_status.count({
     *   where: {
     *     // ... the filter for the Deliver_statuses we want to count
     *   }
     * })
    **/
    count<T extends deliver_statusCountArgs>(
      args?: Subset<T, deliver_statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Deliver_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliver_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Deliver_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Deliver_statusAggregateArgs>(args: Subset<T, Deliver_statusAggregateArgs>): PrismaPromise<GetDeliver_statusAggregateType<T>>

    /**
     * Group by Deliver_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Deliver_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Deliver_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Deliver_statusGroupByArgs['orderBy'] }
        : { orderBy?: Deliver_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Deliver_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliver_statusGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for deliver_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__deliver_statusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_tbl<T extends customer_tblArgs = {}>(args?: Subset<T, customer_tblArgs>): CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * deliver_status base type for findUnique actions
   */
  export type deliver_statusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_status to fetch.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }

  /**
   * deliver_status: findUnique
   */
  export interface deliver_statusFindUniqueArgs extends deliver_statusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliver_status base type for findFirst actions
   */
  export type deliver_statusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_status to fetch.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliver_statuses.
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliver_statuses.
     * 
    **/
    distinct?: Enumerable<Deliver_statusScalarFieldEnum>
  }

  /**
   * deliver_status: findFirst
   */
  export interface deliver_statusFindFirstArgs extends deliver_statusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliver_status findMany
   */
  export type deliver_statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_statuses to fetch.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliver_statuses.
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Deliver_statusScalarFieldEnum>
  }


  /**
   * deliver_status create
   */
  export type deliver_statusCreateArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The data needed to create a deliver_status.
     * 
    **/
    data: XOR<deliver_statusCreateInput, deliver_statusUncheckedCreateInput>
  }


  /**
   * deliver_status createMany
   */
  export type deliver_statusCreateManyArgs = {
    /**
     * The data used to create many deliver_statuses.
     * 
    **/
    data: Enumerable<deliver_statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * deliver_status update
   */
  export type deliver_statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The data needed to update a deliver_status.
     * 
    **/
    data: XOR<deliver_statusUpdateInput, deliver_statusUncheckedUpdateInput>
    /**
     * Choose, which deliver_status to update.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }


  /**
   * deliver_status updateMany
   */
  export type deliver_statusUpdateManyArgs = {
    /**
     * The data used to update deliver_statuses.
     * 
    **/
    data: XOR<deliver_statusUpdateManyMutationInput, deliver_statusUncheckedUpdateManyInput>
    /**
     * Filter which deliver_statuses to update
     * 
    **/
    where?: deliver_statusWhereInput
  }


  /**
   * deliver_status upsert
   */
  export type deliver_statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The filter to search for the deliver_status to update in case it exists.
     * 
    **/
    where: deliver_statusWhereUniqueInput
    /**
     * In case the deliver_status found by the `where` argument doesn't exist, create a new deliver_status with this data.
     * 
    **/
    create: XOR<deliver_statusCreateInput, deliver_statusUncheckedCreateInput>
    /**
     * In case the deliver_status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<deliver_statusUpdateInput, deliver_statusUncheckedUpdateInput>
  }


  /**
   * deliver_status delete
   */
  export type deliver_statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter which deliver_status to delete.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }


  /**
   * deliver_status deleteMany
   */
  export type deliver_statusDeleteManyArgs = {
    /**
     * Filter which deliver_statuses to delete
     * 
    **/
    where?: deliver_statusWhereInput
  }


  /**
   * deliver_status: findUniqueOrThrow
   */
  export type deliver_statusFindUniqueOrThrowArgs = deliver_statusFindUniqueArgsBase
      

  /**
   * deliver_status: findFirstOrThrow
   */
  export type deliver_statusFindFirstOrThrowArgs = deliver_statusFindFirstArgsBase
      

  /**
   * deliver_status without action
   */
  export type deliver_statusArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Customer_tblScalarFieldEnum: {
    ID: 'ID',
    customer_first_name: 'customer_first_name',
    customer_last_name: 'customer_last_name',
    Email_id: 'Email_id'
  };

  export type Customer_tblScalarFieldEnum = (typeof Customer_tblScalarFieldEnum)[keyof typeof Customer_tblScalarFieldEnum]


  export const Deliver_statusScalarFieldEnum: {
    ID: 'ID',
    status: 'status',
    customer_id: 'customer_id'
  };

  export type Deliver_statusScalarFieldEnum = (typeof Deliver_statusScalarFieldEnum)[keyof typeof Deliver_statusScalarFieldEnum]


  export const Orders_tblScalarFieldEnum: {
    ID: 'ID',
    product_name: 'product_name',
    Product_price: 'Product_price',
    customer_id: 'customer_id'
  };

  export type Orders_tblScalarFieldEnum = (typeof Orders_tblScalarFieldEnum)[keyof typeof Orders_tblScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_registrationScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    contact_number: 'contact_number',
    email_id: 'email_id',
    address: 'address',
    created_at: 'created_at',
    updated_at: 'updated_at',
    status: 'status'
  };

  export type User_registrationScalarFieldEnum = (typeof User_registrationScalarFieldEnum)[keyof typeof User_registrationScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type user_registrationWhereInput = {
    AND?: Enumerable<user_registrationWhereInput>
    OR?: Enumerable<user_registrationWhereInput>
    NOT?: Enumerable<user_registrationWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    contact_number?: BigIntFilter | bigint | number
    email_id?: StringFilter | string
    address?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    status?: IntFilter | number
  }

  export type user_registrationOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationWhereUniqueInput = {
    id?: number
    contact_number?: bigint | number
    email_id?: string
  }

  export type user_registrationOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    _count?: user_registrationCountOrderByAggregateInput
    _avg?: user_registrationAvgOrderByAggregateInput
    _max?: user_registrationMaxOrderByAggregateInput
    _min?: user_registrationMinOrderByAggregateInput
    _sum?: user_registrationSumOrderByAggregateInput
  }

  export type user_registrationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    contact_number?: BigIntWithAggregatesFilter | bigint | number
    email_id?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    status?: IntWithAggregatesFilter | number
  }

  export type customer_tblWhereInput = {
    AND?: Enumerable<customer_tblWhereInput>
    OR?: Enumerable<customer_tblWhereInput>
    NOT?: Enumerable<customer_tblWhereInput>
    ID?: IntFilter | number
    customer_first_name?: StringFilter | string
    customer_last_name?: StringFilter | string
    Email_id?: StringFilter | string
    deliver_status?: Deliver_statusListRelationFilter
    orders_tbl?: Orders_tblListRelationFilter
  }

  export type customer_tblOrderByWithRelationInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
    deliver_status?: deliver_statusOrderByRelationAggregateInput
    orders_tbl?: orders_tblOrderByRelationAggregateInput
  }

  export type customer_tblWhereUniqueInput = {
    ID?: number
  }

  export type customer_tblOrderByWithAggregationInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
    _count?: customer_tblCountOrderByAggregateInput
    _avg?: customer_tblAvgOrderByAggregateInput
    _max?: customer_tblMaxOrderByAggregateInput
    _min?: customer_tblMinOrderByAggregateInput
    _sum?: customer_tblSumOrderByAggregateInput
  }

  export type customer_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    customer_first_name?: StringWithAggregatesFilter | string
    customer_last_name?: StringWithAggregatesFilter | string
    Email_id?: StringWithAggregatesFilter | string
  }

  export type orders_tblWhereInput = {
    AND?: Enumerable<orders_tblWhereInput>
    OR?: Enumerable<orders_tblWhereInput>
    NOT?: Enumerable<orders_tblWhereInput>
    ID?: IntFilter | number
    product_name?: StringNullableFilter | string | null
    Product_price?: IntNullableFilter | number | null
    customer_id?: IntNullableFilter | number | null
    customer_tbl?: XOR<Customer_tblRelationFilter, customer_tblWhereInput> | null
  }

  export type orders_tblOrderByWithRelationInput = {
    ID?: SortOrder
    product_name?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
    customer_tbl?: customer_tblOrderByWithRelationInput
  }

  export type orders_tblWhereUniqueInput = {
    ID?: number
  }

  export type orders_tblOrderByWithAggregationInput = {
    ID?: SortOrder
    product_name?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
    _count?: orders_tblCountOrderByAggregateInput
    _avg?: orders_tblAvgOrderByAggregateInput
    _max?: orders_tblMaxOrderByAggregateInput
    _min?: orders_tblMinOrderByAggregateInput
    _sum?: orders_tblSumOrderByAggregateInput
  }

  export type orders_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    product_name?: StringNullableWithAggregatesFilter | string | null
    Product_price?: IntNullableWithAggregatesFilter | number | null
    customer_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type deliver_statusWhereInput = {
    AND?: Enumerable<deliver_statusWhereInput>
    OR?: Enumerable<deliver_statusWhereInput>
    NOT?: Enumerable<deliver_statusWhereInput>
    ID?: IntFilter | number
    status?: IntFilter | number
    customer_id?: IntFilter | number
    customer_tbl?: XOR<Customer_tblRelationFilter, customer_tblWhereInput>
  }

  export type deliver_statusOrderByWithRelationInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
    customer_tbl?: customer_tblOrderByWithRelationInput
  }

  export type deliver_statusWhereUniqueInput = {
    ID?: number
  }

  export type deliver_statusOrderByWithAggregationInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
    _count?: deliver_statusCountOrderByAggregateInput
    _avg?: deliver_statusAvgOrderByAggregateInput
    _max?: deliver_statusMaxOrderByAggregateInput
    _min?: deliver_statusMinOrderByAggregateInput
    _sum?: deliver_statusSumOrderByAggregateInput
  }

  export type deliver_statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    status?: IntWithAggregatesFilter | number
    customer_id?: IntWithAggregatesFilter | number
  }

  export type user_registrationCreateInput = {
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: number
  }

  export type user_registrationUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: number
  }

  export type user_registrationUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type user_registrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type user_registrationCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: number
  }

  export type user_registrationUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type user_registrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type customer_tblCreateInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUpdateInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblCreateManyInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
  }

  export type customer_tblUpdateManyMutationInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
  }

  export type customer_tblUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
  }

  export type orders_tblCreateInput = {
    product_name?: string | null
    Product_price?: number | null
    customer_tbl?: customer_tblCreateNestedOneWithoutOrders_tblInput
  }

  export type orders_tblUncheckedCreateInput = {
    ID?: number
    product_name?: string | null
    Product_price?: number | null
    customer_id?: number | null
  }

  export type orders_tblUpdateInput = {
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_tbl?: customer_tblUpdateOneWithoutOrders_tblNestedInput
  }

  export type orders_tblUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblCreateManyInput = {
    ID?: number
    product_name?: string | null
    Product_price?: number | null
    customer_id?: number | null
  }

  export type orders_tblUpdateManyMutationInput = {
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type deliver_statusCreateInput = {
    status: number
    customer_tbl: customer_tblCreateNestedOneWithoutDeliver_statusInput
  }

  export type deliver_statusUncheckedCreateInput = {
    ID?: number
    status: number
    customer_id: number
  }

  export type deliver_statusUpdateInput = {
    status?: IntFieldUpdateOperationsInput | number
    customer_tbl?: customer_tblUpdateOneRequiredWithoutDeliver_statusNestedInput
  }

  export type deliver_statusUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusCreateManyInput = {
    ID?: number
    status: number
    customer_id: number
  }

  export type deliver_statusUpdateManyMutationInput = {
    status?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type user_registrationCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationAvgOrderByAggregateInput = {
    id?: SortOrder
    contact_number?: SortOrder
    status?: SortOrder
  }

  export type user_registrationMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationSumOrderByAggregateInput = {
    id?: SortOrder
    contact_number?: SortOrder
    status?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Deliver_statusListRelationFilter = {
    every?: deliver_statusWhereInput
    some?: deliver_statusWhereInput
    none?: deliver_statusWhereInput
  }

  export type Orders_tblListRelationFilter = {
    every?: orders_tblWhereInput
    some?: orders_tblWhereInput
    none?: orders_tblWhereInput
  }

  export type deliver_statusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orders_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customer_tblCountOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type customer_tblMaxOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblMinOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Customer_tblRelationFilter = {
    is?: customer_tblWhereInput | null
    isNot?: customer_tblWhereInput | null
  }

  export type orders_tblCountOrderByAggregateInput = {
    ID?: SortOrder
    product_name?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblAvgOrderByAggregateInput = {
    ID?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblMaxOrderByAggregateInput = {
    ID?: SortOrder
    product_name?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblMinOrderByAggregateInput = {
    ID?: SortOrder
    product_name?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblSumOrderByAggregateInput = {
    ID?: SortOrder
    Product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type deliver_statusCountOrderByAggregateInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
  }

  export type deliver_statusAvgOrderByAggregateInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
  }

  export type deliver_statusMaxOrderByAggregateInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
  }

  export type deliver_statusMinOrderByAggregateInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
  }

  export type deliver_statusSumOrderByAggregateInput = {
    ID?: SortOrder
    status?: SortOrder
    customer_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type deliver_statusCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<deliver_statusWhereUniqueInput>
  }

  export type orders_tblCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<orders_tblWhereUniqueInput>
  }

  export type deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<deliver_statusWhereUniqueInput>
  }

  export type orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<orders_tblWhereUniqueInput>
  }

  export type deliver_statusUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<deliver_statusWhereUniqueInput>
    disconnect?: Enumerable<deliver_statusWhereUniqueInput>
    delete?: Enumerable<deliver_statusWhereUniqueInput>
    connect?: Enumerable<deliver_statusWhereUniqueInput>
    update?: Enumerable<deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<deliver_statusScalarWhereInput>
  }

  export type orders_tblUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<orders_tblWhereUniqueInput>
    disconnect?: Enumerable<orders_tblWhereUniqueInput>
    delete?: Enumerable<orders_tblWhereUniqueInput>
    connect?: Enumerable<orders_tblWhereUniqueInput>
    update?: Enumerable<orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<orders_tblUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<orders_tblScalarWhereInput>
  }

  export type deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<deliver_statusWhereUniqueInput>
    disconnect?: Enumerable<deliver_statusWhereUniqueInput>
    delete?: Enumerable<deliver_statusWhereUniqueInput>
    connect?: Enumerable<deliver_statusWhereUniqueInput>
    update?: Enumerable<deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<deliver_statusScalarWhereInput>
  }

  export type orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<orders_tblWhereUniqueInput>
    disconnect?: Enumerable<orders_tblWhereUniqueInput>
    delete?: Enumerable<orders_tblWhereUniqueInput>
    connect?: Enumerable<orders_tblWhereUniqueInput>
    update?: Enumerable<orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<orders_tblUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<orders_tblScalarWhereInput>
  }

  export type customer_tblCreateNestedOneWithoutOrders_tblInput = {
    create?: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutOrders_tblInput
    connect?: customer_tblWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type customer_tblUpdateOneWithoutOrders_tblNestedInput = {
    create?: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutOrders_tblInput
    upsert?: customer_tblUpsertWithoutOrders_tblInput
    disconnect?: boolean
    delete?: boolean
    connect?: customer_tblWhereUniqueInput
    update?: XOR<customer_tblUpdateWithoutOrders_tblInput, customer_tblUncheckedUpdateWithoutOrders_tblInput>
  }

  export type customer_tblCreateNestedOneWithoutDeliver_statusInput = {
    create?: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutDeliver_statusInput
    connect?: customer_tblWhereUniqueInput
  }

  export type customer_tblUpdateOneRequiredWithoutDeliver_statusNestedInput = {
    create?: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutDeliver_statusInput
    upsert?: customer_tblUpsertWithoutDeliver_statusInput
    connect?: customer_tblWhereUniqueInput
    update?: XOR<customer_tblUpdateWithoutDeliver_statusInput, customer_tblUncheckedUpdateWithoutDeliver_statusInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type deliver_statusCreateWithoutCustomer_tblInput = {
    status: number
  }

  export type deliver_statusUncheckedCreateWithoutCustomer_tblInput = {
    ID?: number
    status: number
  }

  export type deliver_statusCreateOrConnectWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    create: XOR<deliver_statusCreateWithoutCustomer_tblInput, deliver_statusUncheckedCreateWithoutCustomer_tblInput>
  }

  export type deliver_statusCreateManyCustomer_tblInputEnvelope = {
    data: Enumerable<deliver_statusCreateManyCustomer_tblInput>
    skipDuplicates?: boolean
  }

  export type orders_tblCreateWithoutCustomer_tblInput = {
    product_name?: string | null
    Product_price?: number | null
  }

  export type orders_tblUncheckedCreateWithoutCustomer_tblInput = {
    ID?: number
    product_name?: string | null
    Product_price?: number | null
  }

  export type orders_tblCreateOrConnectWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    create: XOR<orders_tblCreateWithoutCustomer_tblInput, orders_tblUncheckedCreateWithoutCustomer_tblInput>
  }

  export type orders_tblCreateManyCustomer_tblInputEnvelope = {
    data: Enumerable<orders_tblCreateManyCustomer_tblInput>
    skipDuplicates?: boolean
  }

  export type deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    update: XOR<deliver_statusUpdateWithoutCustomer_tblInput, deliver_statusUncheckedUpdateWithoutCustomer_tblInput>
    create: XOR<deliver_statusCreateWithoutCustomer_tblInput, deliver_statusUncheckedCreateWithoutCustomer_tblInput>
  }

  export type deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    data: XOR<deliver_statusUpdateWithoutCustomer_tblInput, deliver_statusUncheckedUpdateWithoutCustomer_tblInput>
  }

  export type deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput = {
    where: deliver_statusScalarWhereInput
    data: XOR<deliver_statusUpdateManyMutationInput, deliver_statusUncheckedUpdateManyWithoutDeliver_statusInput>
  }

  export type deliver_statusScalarWhereInput = {
    AND?: Enumerable<deliver_statusScalarWhereInput>
    OR?: Enumerable<deliver_statusScalarWhereInput>
    NOT?: Enumerable<deliver_statusScalarWhereInput>
    ID?: IntFilter | number
    status?: IntFilter | number
    customer_id?: IntFilter | number
  }

  export type orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    update: XOR<orders_tblUpdateWithoutCustomer_tblInput, orders_tblUncheckedUpdateWithoutCustomer_tblInput>
    create: XOR<orders_tblCreateWithoutCustomer_tblInput, orders_tblUncheckedCreateWithoutCustomer_tblInput>
  }

  export type orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    data: XOR<orders_tblUpdateWithoutCustomer_tblInput, orders_tblUncheckedUpdateWithoutCustomer_tblInput>
  }

  export type orders_tblUpdateManyWithWhereWithoutCustomer_tblInput = {
    where: orders_tblScalarWhereInput
    data: XOR<orders_tblUpdateManyMutationInput, orders_tblUncheckedUpdateManyWithoutOrders_tblInput>
  }

  export type orders_tblScalarWhereInput = {
    AND?: Enumerable<orders_tblScalarWhereInput>
    OR?: Enumerable<orders_tblScalarWhereInput>
    NOT?: Enumerable<orders_tblScalarWhereInput>
    ID?: IntFilter | number
    product_name?: StringNullableFilter | string | null
    Product_price?: IntNullableFilter | number | null
    customer_id?: IntNullableFilter | number | null
  }

  export type customer_tblCreateWithoutOrders_tblInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateWithoutOrders_tblInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblCreateOrConnectWithoutOrders_tblInput = {
    where: customer_tblWhereUniqueInput
    create: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
  }

  export type customer_tblUpsertWithoutOrders_tblInput = {
    update: XOR<customer_tblUpdateWithoutOrders_tblInput, customer_tblUncheckedUpdateWithoutOrders_tblInput>
    create: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
  }

  export type customer_tblUpdateWithoutOrders_tblInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateWithoutOrders_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblCreateWithoutDeliver_statusInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    orders_tbl?: orders_tblCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateWithoutDeliver_statusInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    orders_tbl?: orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblCreateOrConnectWithoutDeliver_statusInput = {
    where: customer_tblWhereUniqueInput
    create: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
  }

  export type customer_tblUpsertWithoutDeliver_statusInput = {
    update: XOR<customer_tblUpdateWithoutDeliver_statusInput, customer_tblUncheckedUpdateWithoutDeliver_statusInput>
    create: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
  }

  export type customer_tblUpdateWithoutDeliver_statusInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    orders_tbl?: orders_tblUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateWithoutDeliver_statusInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    orders_tbl?: orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type deliver_statusCreateManyCustomer_tblInput = {
    ID?: number
    status: number
  }

  export type orders_tblCreateManyCustomer_tblInput = {
    ID?: number
    product_name?: string | null
    Product_price?: number | null
  }

  export type deliver_statusUpdateWithoutCustomer_tblInput = {
    status?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusUncheckedUpdateWithoutCustomer_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusUncheckedUpdateManyWithoutDeliver_statusInput = {
    ID?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type orders_tblUpdateWithoutCustomer_tblInput = {
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateWithoutCustomer_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateManyWithoutOrders_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    product_name?: NullableStringFieldUpdateOperationsInput | string | null
    Product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}