
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user_registration
 * 
 */
export type user_registration = {
  id: number
  first_name: string
  last_name: string
  contact_number: bigint
  email_id: string
  address: string
  created_at: Date
  updated_at: Date
  status: string
}

/**
 * Model customer_tbl
 * 
 */
export type customer_tbl = {
  ID: number
  customer_first_name: string
  customer_last_name: string
  Email_id: string
}

/**
 * Model orders_tbl
 * 
 */
export type orders_tbl = {
  product_id: number
  product_name: string
  product_price: number | null
  customer_id: number
}

/**
 * Model deliver_status
 * 
 */
export type deliver_status = {
  deliver_id: number
  customer_id: number
  product_status: string
}

/**
 * Model customer_agedetails
 * 
 */
export type customer_agedetails = {
  ID: number
  customer_id: number
  customer_age: number
}

/**
 * Model status
 * 
 */
export type status = {
  ID: number
  current_status: string
}

/**
 * Model cart_table
 * 
 */
export type cart_table = {
  id: number
  product_id: number
  product_name: string
  product_price_cart: number
  product_quantity_cart: number | null
  product_image: string
}

/**
 * Model product_table
 * 
 */
export type product_table = {
  product_id: number
  product_image: string
  product_name: string
  product_price: number
  strikeout_price: number | null
}

/**
 * Model save_later_table
 * 
 */
export type save_later_table = {
  id: number
  product_id: number
  product_name: string
  product_price_cart: number
  product_quantity_cart: number
  product_image: string
  product_price: number
}

/**
 * Model address_table
 * 
 */
export type address_table = {
  id: number
  user_address: string
  user_street: string | null
  user_pincode: bigint | null
}

/**
 * Model save_address_table
 * 
 */
export type save_address_table = {
  id: number
  user_address: string
  user_street: string | null
  user_pincode: bigint | null
}

/**
 * Model save_cart_totalprice
 * 
 */
export type save_cart_totalprice = {
  id: number
  save_cart_totalprice: number
}

/**
 * Model credit_table
 * 
 */
export type credit_table = {
  id: number
  credit_balance: number
}

/**
 * Model teachers_list
 * 
 */
export type teachers_list = {
  ID: number
  teachers_name: string
}

/**
 * Model questions_and_teachers_list
 * 
 */
export type questions_and_teachers_list = {
  id: number
  teachers_name: string
  feedback_questions: string
}

/**
 * Model selected_teachers
 * 
 */
export type selected_teachers = {
  selected_id: number
  teachers_name: string
}

/**
 * Model feedback_question_1
 * 
 */
export type feedback_question_1 = {
  ID: number
  question_1: string
  answer_1: string
  answer_2: string | null
}

/**
 * Model feedback_question_2
 * 
 */
export type feedback_question_2 = {
  ID: number
  question_2: string
  answer_1: string
  answer_2: string | null
}

/**
 * Model feedback_question_3
 * 
 */
export type feedback_question_3 = {
  ID: number
  question_3: string
  answer_1: string
  answer_2: string | null
}

/**
 * Model feedback_question_4
 * 
 */
export type feedback_question_4 = {
  ID: number
  question_4: string
  answer_1: string
  answer_2: string | null
}

/**
 * Model selected1_question
 * 
 */
export type selected1_question = {
  ID: number
  question_1: string
  answer: string
  selected_id: number
}

/**
 * Model selected2_question
 * 
 */
export type selected2_question = {
  ID: number
  question_2: string
  answer: string
  selected_id: number
}

/**
 * Model selected3_question
 * 
 */
export type selected3_question = {
  ID: number
  question_3: string
  answer: string
  selected_id: number
}

/**
 * Model selected4_question
 * 
 */
export type selected4_question = {
  ID: number
  question_4: string
  answer: string
  selected_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more User_registrations
 * const user_registrations = await prisma.user_registration.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more User_registrations
   * const user_registrations = await prisma.user_registration.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user_registration`: Exposes CRUD operations for the **user_registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_registrations
    * const user_registrations = await prisma.user_registration.findMany()
    * ```
    */
  get user_registration(): Prisma.user_registrationDelegate<GlobalReject>;

  /**
   * `prisma.customer_tbl`: Exposes CRUD operations for the **customer_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customer_tbls
    * const customer_tbls = await prisma.customer_tbl.findMany()
    * ```
    */
  get customer_tbl(): Prisma.customer_tblDelegate<GlobalReject>;

  /**
   * `prisma.orders_tbl`: Exposes CRUD operations for the **orders_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders_tbls
    * const orders_tbls = await prisma.orders_tbl.findMany()
    * ```
    */
  get orders_tbl(): Prisma.orders_tblDelegate<GlobalReject>;

  /**
   * `prisma.deliver_status`: Exposes CRUD operations for the **deliver_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliver_statuses
    * const deliver_statuses = await prisma.deliver_status.findMany()
    * ```
    */
  get deliver_status(): Prisma.deliver_statusDelegate<GlobalReject>;

  /**
   * `prisma.customer_agedetails`: Exposes CRUD operations for the **customer_agedetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customer_agedetails
    * const customer_agedetails = await prisma.customer_agedetails.findMany()
    * ```
    */
  get customer_agedetails(): Prisma.customer_agedetailsDelegate<GlobalReject>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.statusDelegate<GlobalReject>;

  /**
   * `prisma.cart_table`: Exposes CRUD operations for the **cart_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cart_tables
    * const cart_tables = await prisma.cart_table.findMany()
    * ```
    */
  get cart_table(): Prisma.cart_tableDelegate<GlobalReject>;

  /**
   * `prisma.product_table`: Exposes CRUD operations for the **product_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_tables
    * const product_tables = await prisma.product_table.findMany()
    * ```
    */
  get product_table(): Prisma.product_tableDelegate<GlobalReject>;

  /**
   * `prisma.save_later_table`: Exposes CRUD operations for the **save_later_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Save_later_tables
    * const save_later_tables = await prisma.save_later_table.findMany()
    * ```
    */
  get save_later_table(): Prisma.save_later_tableDelegate<GlobalReject>;

  /**
   * `prisma.address_table`: Exposes CRUD operations for the **address_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Address_tables
    * const address_tables = await prisma.address_table.findMany()
    * ```
    */
  get address_table(): Prisma.address_tableDelegate<GlobalReject>;

  /**
   * `prisma.save_address_table`: Exposes CRUD operations for the **save_address_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Save_address_tables
    * const save_address_tables = await prisma.save_address_table.findMany()
    * ```
    */
  get save_address_table(): Prisma.save_address_tableDelegate<GlobalReject>;

  /**
   * `prisma.save_cart_totalprice`: Exposes CRUD operations for the **save_cart_totalprice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Save_cart_totalprices
    * const save_cart_totalprices = await prisma.save_cart_totalprice.findMany()
    * ```
    */
  get save_cart_totalprice(): Prisma.save_cart_totalpriceDelegate<GlobalReject>;

  /**
   * `prisma.credit_table`: Exposes CRUD operations for the **credit_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credit_tables
    * const credit_tables = await prisma.credit_table.findMany()
    * ```
    */
  get credit_table(): Prisma.credit_tableDelegate<GlobalReject>;

  /**
   * `prisma.teachers_list`: Exposes CRUD operations for the **teachers_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers_lists
    * const teachers_lists = await prisma.teachers_list.findMany()
    * ```
    */
  get teachers_list(): Prisma.teachers_listDelegate<GlobalReject>;

  /**
   * `prisma.questions_and_teachers_list`: Exposes CRUD operations for the **questions_and_teachers_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions_and_teachers_lists
    * const questions_and_teachers_lists = await prisma.questions_and_teachers_list.findMany()
    * ```
    */
  get questions_and_teachers_list(): Prisma.questions_and_teachers_listDelegate<GlobalReject>;

  /**
   * `prisma.selected_teachers`: Exposes CRUD operations for the **selected_teachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Selected_teachers
    * const selected_teachers = await prisma.selected_teachers.findMany()
    * ```
    */
  get selected_teachers(): Prisma.selected_teachersDelegate<GlobalReject>;

  /**
   * `prisma.feedback_question_1`: Exposes CRUD operations for the **feedback_question_1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedback_question_1s
    * const feedback_question_1s = await prisma.feedback_question_1.findMany()
    * ```
    */
  get feedback_question_1(): Prisma.feedback_question_1Delegate<GlobalReject>;

  /**
   * `prisma.feedback_question_2`: Exposes CRUD operations for the **feedback_question_2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedback_question_2s
    * const feedback_question_2s = await prisma.feedback_question_2.findMany()
    * ```
    */
  get feedback_question_2(): Prisma.feedback_question_2Delegate<GlobalReject>;

  /**
   * `prisma.feedback_question_3`: Exposes CRUD operations for the **feedback_question_3** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedback_question_3s
    * const feedback_question_3s = await prisma.feedback_question_3.findMany()
    * ```
    */
  get feedback_question_3(): Prisma.feedback_question_3Delegate<GlobalReject>;

  /**
   * `prisma.feedback_question_4`: Exposes CRUD operations for the **feedback_question_4** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedback_question_4s
    * const feedback_question_4s = await prisma.feedback_question_4.findMany()
    * ```
    */
  get feedback_question_4(): Prisma.feedback_question_4Delegate<GlobalReject>;

  /**
   * `prisma.selected1_question`: Exposes CRUD operations for the **selected1_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Selected1_questions
    * const selected1_questions = await prisma.selected1_question.findMany()
    * ```
    */
  get selected1_question(): Prisma.selected1_questionDelegate<GlobalReject>;

  /**
   * `prisma.selected2_question`: Exposes CRUD operations for the **selected2_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Selected2_questions
    * const selected2_questions = await prisma.selected2_question.findMany()
    * ```
    */
  get selected2_question(): Prisma.selected2_questionDelegate<GlobalReject>;

  /**
   * `prisma.selected3_question`: Exposes CRUD operations for the **selected3_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Selected3_questions
    * const selected3_questions = await prisma.selected3_question.findMany()
    * ```
    */
  get selected3_question(): Prisma.selected3_questionDelegate<GlobalReject>;

  /**
   * `prisma.selected4_question`: Exposes CRUD operations for the **selected4_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Selected4_questions
    * const selected4_questions = await prisma.selected4_question.findMany()
    * ```
    */
  get selected4_question(): Prisma.selected4_questionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.0
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user_registration: 'user_registration',
    customer_tbl: 'customer_tbl',
    orders_tbl: 'orders_tbl',
    deliver_status: 'deliver_status',
    customer_agedetails: 'customer_agedetails',
    status: 'status',
    cart_table: 'cart_table',
    product_table: 'product_table',
    save_later_table: 'save_later_table',
    address_table: 'address_table',
    save_address_table: 'save_address_table',
    save_cart_totalprice: 'save_cart_totalprice',
    credit_table: 'credit_table',
    teachers_list: 'teachers_list',
    questions_and_teachers_list: 'questions_and_teachers_list',
    selected_teachers: 'selected_teachers',
    feedback_question_1: 'feedback_question_1',
    feedback_question_2: 'feedback_question_2',
    feedback_question_3: 'feedback_question_3',
    feedback_question_4: 'feedback_question_4',
    selected1_question: 'selected1_question',
    selected2_question: 'selected2_question',
    selected3_question: 'selected3_question',
    selected4_question: 'selected4_question'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Customer_tblCountOutputType
   */


  export type Customer_tblCountOutputType = {
    customer_agedetails: number
    deliver_status: number
    orders_tbl: number
  }

  export type Customer_tblCountOutputTypeSelect = {
    customer_agedetails?: boolean
    deliver_status?: boolean
    orders_tbl?: boolean
  }

  export type Customer_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Customer_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Customer_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Customer_tblCountOutputTypeArgs
    ?'include' extends U
    ? Customer_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Customer_tblCountOutputType ? Customer_tblCountOutputType[P] : never
  } 
    : Customer_tblCountOutputType
  : Customer_tblCountOutputType




  // Custom InputTypes

  /**
   * Customer_tblCountOutputType without action
   */
  export type Customer_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Customer_tblCountOutputType
     * 
    **/
    select?: Customer_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Selected_teachersCountOutputType
   */


  export type Selected_teachersCountOutputType = {
    selected1_question: number
    selected2_question: number
    selected3_question: number
    selected4_question: number
  }

  export type Selected_teachersCountOutputTypeSelect = {
    selected1_question?: boolean
    selected2_question?: boolean
    selected3_question?: boolean
    selected4_question?: boolean
  }

  export type Selected_teachersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Selected_teachersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Selected_teachersCountOutputType
    : S extends undefined
    ? never
    : S extends Selected_teachersCountOutputTypeArgs
    ?'include' extends U
    ? Selected_teachersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Selected_teachersCountOutputType ? Selected_teachersCountOutputType[P] : never
  } 
    : Selected_teachersCountOutputType
  : Selected_teachersCountOutputType




  // Custom InputTypes

  /**
   * Selected_teachersCountOutputType without action
   */
  export type Selected_teachersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Selected_teachersCountOutputType
     * 
    **/
    select?: Selected_teachersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user_registration
   */


  export type AggregateUser_registration = {
    _count: User_registrationCountAggregateOutputType | null
    _avg: User_registrationAvgAggregateOutputType | null
    _sum: User_registrationSumAggregateOutputType | null
    _min: User_registrationMinAggregateOutputType | null
    _max: User_registrationMaxAggregateOutputType | null
  }

  export type User_registrationAvgAggregateOutputType = {
    id: number | null
    contact_number: number | null
  }

  export type User_registrationSumAggregateOutputType = {
    id: number | null
    contact_number: bigint | null
  }

  export type User_registrationMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    contact_number: bigint | null
    email_id: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
    status: string | null
  }

  export type User_registrationMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    contact_number: bigint | null
    email_id: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
    status: string | null
  }

  export type User_registrationCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    contact_number: number
    email_id: number
    address: number
    created_at: number
    updated_at: number
    status: number
    _all: number
  }


  export type User_registrationAvgAggregateInputType = {
    id?: true
    contact_number?: true
  }

  export type User_registrationSumAggregateInputType = {
    id?: true
    contact_number?: true
  }

  export type User_registrationMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
  }

  export type User_registrationMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
  }

  export type User_registrationCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    contact_number?: true
    email_id?: true
    address?: true
    created_at?: true
    updated_at?: true
    status?: true
    _all?: true
  }

  export type User_registrationAggregateArgs = {
    /**
     * Filter which user_registration to aggregate.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_registrations
    **/
    _count?: true | User_registrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_registrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_registrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_registrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_registrationMaxAggregateInputType
  }

  export type GetUser_registrationAggregateType<T extends User_registrationAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_registration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_registration[P]>
      : GetScalarType<T[P], AggregateUser_registration[P]>
  }




  export type User_registrationGroupByArgs = {
    where?: user_registrationWhereInput
    orderBy?: Enumerable<user_registrationOrderByWithAggregationInput>
    by: Array<User_registrationScalarFieldEnum>
    having?: user_registrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_registrationCountAggregateInputType | true
    _avg?: User_registrationAvgAggregateInputType
    _sum?: User_registrationSumAggregateInputType
    _min?: User_registrationMinAggregateInputType
    _max?: User_registrationMaxAggregateInputType
  }


  export type User_registrationGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    contact_number: bigint
    email_id: string
    address: string
    created_at: Date
    updated_at: Date
    status: string
    _count: User_registrationCountAggregateOutputType | null
    _avg: User_registrationAvgAggregateOutputType | null
    _sum: User_registrationSumAggregateOutputType | null
    _min: User_registrationMinAggregateOutputType | null
    _max: User_registrationMaxAggregateOutputType | null
  }

  type GetUser_registrationGroupByPayload<T extends User_registrationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_registrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_registrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_registrationGroupByOutputType[P]>
            : GetScalarType<T[P], User_registrationGroupByOutputType[P]>
        }
      >
    >


  export type user_registrationSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    contact_number?: boolean
    email_id?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
    status?: boolean
  }

  export type user_registrationGetPayload<
    S extends boolean | null | undefined | user_registrationArgs,
    U = keyof S
      > = S extends true
        ? user_registration
    : S extends undefined
    ? never
    : S extends user_registrationArgs | user_registrationFindManyArgs
    ?'include' extends U
    ? user_registration 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof user_registration ? user_registration[P] : never
  } 
    : user_registration
  : user_registration


  type user_registrationCountArgs = Merge<
    Omit<user_registrationFindManyArgs, 'select' | 'include'> & {
      select?: User_registrationCountAggregateInputType | true
    }
  >

  export interface user_registrationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_registration that matches the filter.
     * @param {user_registrationFindUniqueArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_registrationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_registrationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_registration'> extends True ? CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>> : CheckSelect<T, Prisma__user_registrationClient<user_registration | null >, Prisma__user_registrationClient<user_registrationGetPayload<T> | null >>

    /**
     * Find the first User_registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindFirstArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_registrationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_registrationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_registration'> extends True ? CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>> : CheckSelect<T, Prisma__user_registrationClient<user_registration | null >, Prisma__user_registrationClient<user_registrationGetPayload<T> | null >>

    /**
     * Find zero or more User_registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_registrations
     * const user_registrations = await prisma.user_registration.findMany()
     * 
     * // Get first 10 User_registrations
     * const user_registrations = await prisma.user_registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_registrationWithIdOnly = await prisma.user_registration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_registrationFindManyArgs>(
      args?: SelectSubset<T, user_registrationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_registration>>, PrismaPromise<Array<user_registrationGetPayload<T>>>>

    /**
     * Create a User_registration.
     * @param {user_registrationCreateArgs} args - Arguments to create a User_registration.
     * @example
     * // Create one User_registration
     * const User_registration = await prisma.user_registration.create({
     *   data: {
     *     // ... data to create a User_registration
     *   }
     * })
     * 
    **/
    create<T extends user_registrationCreateArgs>(
      args: SelectSubset<T, user_registrationCreateArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Create many User_registrations.
     *     @param {user_registrationCreateManyArgs} args - Arguments to create many User_registrations.
     *     @example
     *     // Create many User_registrations
     *     const user_registration = await prisma.user_registration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_registrationCreateManyArgs>(
      args?: SelectSubset<T, user_registrationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_registration.
     * @param {user_registrationDeleteArgs} args - Arguments to delete one User_registration.
     * @example
     * // Delete one User_registration
     * const User_registration = await prisma.user_registration.delete({
     *   where: {
     *     // ... filter to delete one User_registration
     *   }
     * })
     * 
    **/
    delete<T extends user_registrationDeleteArgs>(
      args: SelectSubset<T, user_registrationDeleteArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Update one User_registration.
     * @param {user_registrationUpdateArgs} args - Arguments to update one User_registration.
     * @example
     * // Update one User_registration
     * const user_registration = await prisma.user_registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_registrationUpdateArgs>(
      args: SelectSubset<T, user_registrationUpdateArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Delete zero or more User_registrations.
     * @param {user_registrationDeleteManyArgs} args - Arguments to filter User_registrations to delete.
     * @example
     * // Delete a few User_registrations
     * const { count } = await prisma.user_registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_registrationDeleteManyArgs>(
      args?: SelectSubset<T, user_registrationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_registrations
     * const user_registration = await prisma.user_registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_registrationUpdateManyArgs>(
      args: SelectSubset<T, user_registrationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_registration.
     * @param {user_registrationUpsertArgs} args - Arguments to update or create a User_registration.
     * @example
     * // Update or create a User_registration
     * const user_registration = await prisma.user_registration.upsert({
     *   create: {
     *     // ... data to create a User_registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_registration we want to update
     *   }
     * })
    **/
    upsert<T extends user_registrationUpsertArgs>(
      args: SelectSubset<T, user_registrationUpsertArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Find one User_registration that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_registrationFindUniqueOrThrowArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_registrationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_registrationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Find the first User_registration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationFindFirstOrThrowArgs} args - Arguments to find a User_registration
     * @example
     * // Get one User_registration
     * const user_registration = await prisma.user_registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_registrationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_registrationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_registrationClient<user_registration>, Prisma__user_registrationClient<user_registrationGetPayload<T>>>

    /**
     * Count the number of User_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_registrationCountArgs} args - Arguments to filter User_registrations to count.
     * @example
     * // Count the number of User_registrations
     * const count = await prisma.user_registration.count({
     *   where: {
     *     // ... the filter for the User_registrations we want to count
     *   }
     * })
    **/
    count<T extends user_registrationCountArgs>(
      args?: Subset<T, user_registrationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_registrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_registrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_registrationAggregateArgs>(args: Subset<T, User_registrationAggregateArgs>): PrismaPromise<GetUser_registrationAggregateType<T>>

    /**
     * Group by User_registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_registrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_registrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_registrationGroupByArgs['orderBy'] }
        : { orderBy?: User_registrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_registrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_registrationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_registrationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_registration base type for findUnique actions
   */
  export type user_registrationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registration to fetch.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }

  /**
   * user_registration: findUnique
   */
  export interface user_registrationFindUniqueArgs extends user_registrationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_registration base type for findFirst actions
   */
  export type user_registrationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registration to fetch.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_registrations.
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_registrations.
     * 
    **/
    distinct?: Enumerable<User_registrationScalarFieldEnum>
  }

  /**
   * user_registration: findFirst
   */
  export interface user_registrationFindFirstArgs extends user_registrationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_registration findMany
   */
  export type user_registrationFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter, which user_registrations to fetch.
     * 
    **/
    where?: user_registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_registrations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_registrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_registrations.
     * 
    **/
    cursor?: user_registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_registrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_registrations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_registrationScalarFieldEnum>
  }


  /**
   * user_registration create
   */
  export type user_registrationCreateArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The data needed to create a user_registration.
     * 
    **/
    data: XOR<user_registrationCreateInput, user_registrationUncheckedCreateInput>
  }


  /**
   * user_registration createMany
   */
  export type user_registrationCreateManyArgs = {
    /**
     * The data used to create many user_registrations.
     * 
    **/
    data: Enumerable<user_registrationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_registration update
   */
  export type user_registrationUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The data needed to update a user_registration.
     * 
    **/
    data: XOR<user_registrationUpdateInput, user_registrationUncheckedUpdateInput>
    /**
     * Choose, which user_registration to update.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }


  /**
   * user_registration updateMany
   */
  export type user_registrationUpdateManyArgs = {
    /**
     * The data used to update user_registrations.
     * 
    **/
    data: XOR<user_registrationUpdateManyMutationInput, user_registrationUncheckedUpdateManyInput>
    /**
     * Filter which user_registrations to update
     * 
    **/
    where?: user_registrationWhereInput
  }


  /**
   * user_registration upsert
   */
  export type user_registrationUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * The filter to search for the user_registration to update in case it exists.
     * 
    **/
    where: user_registrationWhereUniqueInput
    /**
     * In case the user_registration found by the `where` argument doesn't exist, create a new user_registration with this data.
     * 
    **/
    create: XOR<user_registrationCreateInput, user_registrationUncheckedCreateInput>
    /**
     * In case the user_registration was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_registrationUpdateInput, user_registrationUncheckedUpdateInput>
  }


  /**
   * user_registration delete
   */
  export type user_registrationDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
    /**
     * Filter which user_registration to delete.
     * 
    **/
    where: user_registrationWhereUniqueInput
  }


  /**
   * user_registration deleteMany
   */
  export type user_registrationDeleteManyArgs = {
    /**
     * Filter which user_registrations to delete
     * 
    **/
    where?: user_registrationWhereInput
  }


  /**
   * user_registration: findUniqueOrThrow
   */
  export type user_registrationFindUniqueOrThrowArgs = user_registrationFindUniqueArgsBase
      

  /**
   * user_registration: findFirstOrThrow
   */
  export type user_registrationFindFirstOrThrowArgs = user_registrationFindFirstArgsBase
      

  /**
   * user_registration without action
   */
  export type user_registrationArgs = {
    /**
     * Select specific fields to fetch from the user_registration
     * 
    **/
    select?: user_registrationSelect | null
  }



  /**
   * Model customer_tbl
   */


  export type AggregateCustomer_tbl = {
    _count: Customer_tblCountAggregateOutputType | null
    _avg: Customer_tblAvgAggregateOutputType | null
    _sum: Customer_tblSumAggregateOutputType | null
    _min: Customer_tblMinAggregateOutputType | null
    _max: Customer_tblMaxAggregateOutputType | null
  }

  export type Customer_tblAvgAggregateOutputType = {
    ID: number | null
  }

  export type Customer_tblSumAggregateOutputType = {
    ID: number | null
  }

  export type Customer_tblMinAggregateOutputType = {
    ID: number | null
    customer_first_name: string | null
    customer_last_name: string | null
    Email_id: string | null
  }

  export type Customer_tblMaxAggregateOutputType = {
    ID: number | null
    customer_first_name: string | null
    customer_last_name: string | null
    Email_id: string | null
  }

  export type Customer_tblCountAggregateOutputType = {
    ID: number
    customer_first_name: number
    customer_last_name: number
    Email_id: number
    _all: number
  }


  export type Customer_tblAvgAggregateInputType = {
    ID?: true
  }

  export type Customer_tblSumAggregateInputType = {
    ID?: true
  }

  export type Customer_tblMinAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
  }

  export type Customer_tblMaxAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
  }

  export type Customer_tblCountAggregateInputType = {
    ID?: true
    customer_first_name?: true
    customer_last_name?: true
    Email_id?: true
    _all?: true
  }

  export type Customer_tblAggregateArgs = {
    /**
     * Filter which customer_tbl to aggregate.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customer_tbls
    **/
    _count?: true | Customer_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Customer_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Customer_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Customer_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Customer_tblMaxAggregateInputType
  }

  export type GetCustomer_tblAggregateType<T extends Customer_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer_tbl[P]>
      : GetScalarType<T[P], AggregateCustomer_tbl[P]>
  }




  export type Customer_tblGroupByArgs = {
    where?: customer_tblWhereInput
    orderBy?: Enumerable<customer_tblOrderByWithAggregationInput>
    by: Array<Customer_tblScalarFieldEnum>
    having?: customer_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Customer_tblCountAggregateInputType | true
    _avg?: Customer_tblAvgAggregateInputType
    _sum?: Customer_tblSumAggregateInputType
    _min?: Customer_tblMinAggregateInputType
    _max?: Customer_tblMaxAggregateInputType
  }


  export type Customer_tblGroupByOutputType = {
    ID: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    _count: Customer_tblCountAggregateOutputType | null
    _avg: Customer_tblAvgAggregateOutputType | null
    _sum: Customer_tblSumAggregateOutputType | null
    _min: Customer_tblMinAggregateOutputType | null
    _max: Customer_tblMaxAggregateOutputType | null
  }

  type GetCustomer_tblGroupByPayload<T extends Customer_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Customer_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Customer_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Customer_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Customer_tblGroupByOutputType[P]>
        }
      >
    >


  export type customer_tblSelect = {
    ID?: boolean
    customer_first_name?: boolean
    customer_last_name?: boolean
    Email_id?: boolean
    customer_agedetails?: boolean | customer_agedetailsFindManyArgs
    deliver_status?: boolean | deliver_statusFindManyArgs
    orders_tbl?: boolean | orders_tblFindManyArgs
    _count?: boolean | Customer_tblCountOutputTypeArgs
  }

  export type customer_tblInclude = {
    customer_agedetails?: boolean | customer_agedetailsFindManyArgs
    deliver_status?: boolean | deliver_statusFindManyArgs
    orders_tbl?: boolean | orders_tblFindManyArgs
    _count?: boolean | Customer_tblCountOutputTypeArgs
  }

  export type customer_tblGetPayload<
    S extends boolean | null | undefined | customer_tblArgs,
    U = keyof S
      > = S extends true
        ? customer_tbl
    : S extends undefined
    ? never
    : S extends customer_tblArgs | customer_tblFindManyArgs
    ?'include' extends U
    ? customer_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_agedetails' ? Array < customer_agedetailsGetPayload<S['include'][P]>>  :
        P extends 'deliver_status' ? Array < deliver_statusGetPayload<S['include'][P]>>  :
        P extends 'orders_tbl' ? Array < orders_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Customer_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_agedetails' ? Array < customer_agedetailsGetPayload<S['select'][P]>>  :
        P extends 'deliver_status' ? Array < deliver_statusGetPayload<S['select'][P]>>  :
        P extends 'orders_tbl' ? Array < orders_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Customer_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof customer_tbl ? customer_tbl[P] : never
  } 
    : customer_tbl
  : customer_tbl


  type customer_tblCountArgs = Merge<
    Omit<customer_tblFindManyArgs, 'select' | 'include'> & {
      select?: Customer_tblCountAggregateInputType | true
    }
  >

  export interface customer_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Customer_tbl that matches the filter.
     * @param {customer_tblFindUniqueArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customer_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customer_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customer_tbl'> extends True ? CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>> : CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>

    /**
     * Find the first Customer_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindFirstArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customer_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customer_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customer_tbl'> extends True ? CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>> : CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>

    /**
     * Find zero or more Customer_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customer_tbls
     * const customer_tbls = await prisma.customer_tbl.findMany()
     * 
     * // Get first 10 Customer_tbls
     * const customer_tbls = await prisma.customer_tbl.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const customer_tblWithIDOnly = await prisma.customer_tbl.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends customer_tblFindManyArgs>(
      args?: SelectSubset<T, customer_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<customer_tbl>>, PrismaPromise<Array<customer_tblGetPayload<T>>>>

    /**
     * Create a Customer_tbl.
     * @param {customer_tblCreateArgs} args - Arguments to create a Customer_tbl.
     * @example
     * // Create one Customer_tbl
     * const Customer_tbl = await prisma.customer_tbl.create({
     *   data: {
     *     // ... data to create a Customer_tbl
     *   }
     * })
     * 
    **/
    create<T extends customer_tblCreateArgs>(
      args: SelectSubset<T, customer_tblCreateArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Create many Customer_tbls.
     *     @param {customer_tblCreateManyArgs} args - Arguments to create many Customer_tbls.
     *     @example
     *     // Create many Customer_tbls
     *     const customer_tbl = await prisma.customer_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customer_tblCreateManyArgs>(
      args?: SelectSubset<T, customer_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customer_tbl.
     * @param {customer_tblDeleteArgs} args - Arguments to delete one Customer_tbl.
     * @example
     * // Delete one Customer_tbl
     * const Customer_tbl = await prisma.customer_tbl.delete({
     *   where: {
     *     // ... filter to delete one Customer_tbl
     *   }
     * })
     * 
    **/
    delete<T extends customer_tblDeleteArgs>(
      args: SelectSubset<T, customer_tblDeleteArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Update one Customer_tbl.
     * @param {customer_tblUpdateArgs} args - Arguments to update one Customer_tbl.
     * @example
     * // Update one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customer_tblUpdateArgs>(
      args: SelectSubset<T, customer_tblUpdateArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Delete zero or more Customer_tbls.
     * @param {customer_tblDeleteManyArgs} args - Arguments to filter Customer_tbls to delete.
     * @example
     * // Delete a few Customer_tbls
     * const { count } = await prisma.customer_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customer_tblDeleteManyArgs>(
      args?: SelectSubset<T, customer_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customer_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customer_tbls
     * const customer_tbl = await prisma.customer_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customer_tblUpdateManyArgs>(
      args: SelectSubset<T, customer_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer_tbl.
     * @param {customer_tblUpsertArgs} args - Arguments to update or create a Customer_tbl.
     * @example
     * // Update or create a Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.upsert({
     *   create: {
     *     // ... data to create a Customer_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends customer_tblUpsertArgs>(
      args: SelectSubset<T, customer_tblUpsertArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Find one Customer_tbl that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {customer_tblFindUniqueOrThrowArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customer_tblFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customer_tblFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Find the first Customer_tbl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblFindFirstOrThrowArgs} args - Arguments to find a Customer_tbl
     * @example
     * // Get one Customer_tbl
     * const customer_tbl = await prisma.customer_tbl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customer_tblFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customer_tblFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_tblClient<customer_tbl>, Prisma__customer_tblClient<customer_tblGetPayload<T>>>

    /**
     * Count the number of Customer_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_tblCountArgs} args - Arguments to filter Customer_tbls to count.
     * @example
     * // Count the number of Customer_tbls
     * const count = await prisma.customer_tbl.count({
     *   where: {
     *     // ... the filter for the Customer_tbls we want to count
     *   }
     * })
    **/
    count<T extends customer_tblCountArgs>(
      args?: Subset<T, customer_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Customer_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Customer_tblAggregateArgs>(args: Subset<T, Customer_tblAggregateArgs>): PrismaPromise<GetCustomer_tblAggregateType<T>>

    /**
     * Group by Customer_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Customer_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Customer_tblGroupByArgs['orderBy'] }
        : { orderBy?: Customer_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Customer_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomer_tblGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customer_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customer_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_agedetails<T extends customer_agedetailsFindManyArgs = {}>(args?: Subset<T, customer_agedetailsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<customer_agedetails>>, PrismaPromise<Array<customer_agedetailsGetPayload<T>>>>;

    deliver_status<T extends deliver_statusFindManyArgs = {}>(args?: Subset<T, deliver_statusFindManyArgs>): CheckSelect<T, PrismaPromise<Array<deliver_status>>, PrismaPromise<Array<deliver_statusGetPayload<T>>>>;

    orders_tbl<T extends orders_tblFindManyArgs = {}>(args?: Subset<T, orders_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<orders_tbl>>, PrismaPromise<Array<orders_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customer_tbl base type for findUnique actions
   */
  export type customer_tblFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbl to fetch.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }

  /**
   * customer_tbl: findUnique
   */
  export interface customer_tblFindUniqueArgs extends customer_tblFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_tbl base type for findFirst actions
   */
  export type customer_tblFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbl to fetch.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_tbls.
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_tbls.
     * 
    **/
    distinct?: Enumerable<Customer_tblScalarFieldEnum>
  }

  /**
   * customer_tbl: findFirst
   */
  export interface customer_tblFindFirstArgs extends customer_tblFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_tbl findMany
   */
  export type customer_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter, which customer_tbls to fetch.
     * 
    **/
    where?: customer_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customer_tbls.
     * 
    **/
    cursor?: customer_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Customer_tblScalarFieldEnum>
  }


  /**
   * customer_tbl create
   */
  export type customer_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The data needed to create a customer_tbl.
     * 
    **/
    data: XOR<customer_tblCreateInput, customer_tblUncheckedCreateInput>
  }


  /**
   * customer_tbl createMany
   */
  export type customer_tblCreateManyArgs = {
    /**
     * The data used to create many customer_tbls.
     * 
    **/
    data: Enumerable<customer_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customer_tbl update
   */
  export type customer_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The data needed to update a customer_tbl.
     * 
    **/
    data: XOR<customer_tblUpdateInput, customer_tblUncheckedUpdateInput>
    /**
     * Choose, which customer_tbl to update.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }


  /**
   * customer_tbl updateMany
   */
  export type customer_tblUpdateManyArgs = {
    /**
     * The data used to update customer_tbls.
     * 
    **/
    data: XOR<customer_tblUpdateManyMutationInput, customer_tblUncheckedUpdateManyInput>
    /**
     * Filter which customer_tbls to update
     * 
    **/
    where?: customer_tblWhereInput
  }


  /**
   * customer_tbl upsert
   */
  export type customer_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * The filter to search for the customer_tbl to update in case it exists.
     * 
    **/
    where: customer_tblWhereUniqueInput
    /**
     * In case the customer_tbl found by the `where` argument doesn't exist, create a new customer_tbl with this data.
     * 
    **/
    create: XOR<customer_tblCreateInput, customer_tblUncheckedCreateInput>
    /**
     * In case the customer_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customer_tblUpdateInput, customer_tblUncheckedUpdateInput>
  }


  /**
   * customer_tbl delete
   */
  export type customer_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
    /**
     * Filter which customer_tbl to delete.
     * 
    **/
    where: customer_tblWhereUniqueInput
  }


  /**
   * customer_tbl deleteMany
   */
  export type customer_tblDeleteManyArgs = {
    /**
     * Filter which customer_tbls to delete
     * 
    **/
    where?: customer_tblWhereInput
  }


  /**
   * customer_tbl: findUniqueOrThrow
   */
  export type customer_tblFindUniqueOrThrowArgs = customer_tblFindUniqueArgsBase
      

  /**
   * customer_tbl: findFirstOrThrow
   */
  export type customer_tblFindFirstOrThrowArgs = customer_tblFindFirstArgsBase
      

  /**
   * customer_tbl without action
   */
  export type customer_tblArgs = {
    /**
     * Select specific fields to fetch from the customer_tbl
     * 
    **/
    select?: customer_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_tblInclude | null
  }



  /**
   * Model orders_tbl
   */


  export type AggregateOrders_tbl = {
    _count: Orders_tblCountAggregateOutputType | null
    _avg: Orders_tblAvgAggregateOutputType | null
    _sum: Orders_tblSumAggregateOutputType | null
    _min: Orders_tblMinAggregateOutputType | null
    _max: Orders_tblMaxAggregateOutputType | null
  }

  export type Orders_tblAvgAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblSumAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblMinAggregateOutputType = {
    product_id: number | null
    product_name: string | null
    product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblMaxAggregateOutputType = {
    product_id: number | null
    product_name: string | null
    product_price: number | null
    customer_id: number | null
  }

  export type Orders_tblCountAggregateOutputType = {
    product_id: number
    product_name: number
    product_price: number
    customer_id: number
    _all: number
  }


  export type Orders_tblAvgAggregateInputType = {
    product_id?: true
    product_price?: true
    customer_id?: true
  }

  export type Orders_tblSumAggregateInputType = {
    product_id?: true
    product_price?: true
    customer_id?: true
  }

  export type Orders_tblMinAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    customer_id?: true
  }

  export type Orders_tblMaxAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    customer_id?: true
  }

  export type Orders_tblCountAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    customer_id?: true
    _all?: true
  }

  export type Orders_tblAggregateArgs = {
    /**
     * Filter which orders_tbl to aggregate.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders_tbls
    **/
    _count?: true | Orders_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Orders_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Orders_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Orders_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Orders_tblMaxAggregateInputType
  }

  export type GetOrders_tblAggregateType<T extends Orders_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders_tbl[P]>
      : GetScalarType<T[P], AggregateOrders_tbl[P]>
  }




  export type Orders_tblGroupByArgs = {
    where?: orders_tblWhereInput
    orderBy?: Enumerable<orders_tblOrderByWithAggregationInput>
    by: Array<Orders_tblScalarFieldEnum>
    having?: orders_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Orders_tblCountAggregateInputType | true
    _avg?: Orders_tblAvgAggregateInputType
    _sum?: Orders_tblSumAggregateInputType
    _min?: Orders_tblMinAggregateInputType
    _max?: Orders_tblMaxAggregateInputType
  }


  export type Orders_tblGroupByOutputType = {
    product_id: number
    product_name: string
    product_price: number | null
    customer_id: number
    _count: Orders_tblCountAggregateOutputType | null
    _avg: Orders_tblAvgAggregateOutputType | null
    _sum: Orders_tblSumAggregateOutputType | null
    _min: Orders_tblMinAggregateOutputType | null
    _max: Orders_tblMaxAggregateOutputType | null
  }

  type GetOrders_tblGroupByPayload<T extends Orders_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Orders_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Orders_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Orders_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Orders_tblGroupByOutputType[P]>
        }
      >
    >


  export type orders_tblSelect = {
    product_id?: boolean
    product_name?: boolean
    product_price?: boolean
    customer_id?: boolean
    customer_tbl?: boolean | customer_tblArgs
  }

  export type orders_tblInclude = {
    customer_tbl?: boolean | customer_tblArgs
  }

  export type orders_tblGetPayload<
    S extends boolean | null | undefined | orders_tblArgs,
    U = keyof S
      > = S extends true
        ? orders_tbl
    : S extends undefined
    ? never
    : S extends orders_tblArgs | orders_tblFindManyArgs
    ?'include' extends U
    ? orders_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['select'][P]> :  P extends keyof orders_tbl ? orders_tbl[P] : never
  } 
    : orders_tbl
  : orders_tbl


  type orders_tblCountArgs = Merge<
    Omit<orders_tblFindManyArgs, 'select' | 'include'> & {
      select?: Orders_tblCountAggregateInputType | true
    }
  >

  export interface orders_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Orders_tbl that matches the filter.
     * @param {orders_tblFindUniqueArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orders_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, orders_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders_tbl'> extends True ? CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>> : CheckSelect<T, Prisma__orders_tblClient<orders_tbl | null >, Prisma__orders_tblClient<orders_tblGetPayload<T> | null >>

    /**
     * Find the first Orders_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindFirstArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orders_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, orders_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders_tbl'> extends True ? CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>> : CheckSelect<T, Prisma__orders_tblClient<orders_tbl | null >, Prisma__orders_tblClient<orders_tblGetPayload<T> | null >>

    /**
     * Find zero or more Orders_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders_tbls
     * const orders_tbls = await prisma.orders_tbl.findMany()
     * 
     * // Get first 10 Orders_tbls
     * const orders_tbls = await prisma.orders_tbl.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const orders_tblWithProduct_idOnly = await prisma.orders_tbl.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends orders_tblFindManyArgs>(
      args?: SelectSubset<T, orders_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<orders_tbl>>, PrismaPromise<Array<orders_tblGetPayload<T>>>>

    /**
     * Create a Orders_tbl.
     * @param {orders_tblCreateArgs} args - Arguments to create a Orders_tbl.
     * @example
     * // Create one Orders_tbl
     * const Orders_tbl = await prisma.orders_tbl.create({
     *   data: {
     *     // ... data to create a Orders_tbl
     *   }
     * })
     * 
    **/
    create<T extends orders_tblCreateArgs>(
      args: SelectSubset<T, orders_tblCreateArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Create many Orders_tbls.
     *     @param {orders_tblCreateManyArgs} args - Arguments to create many Orders_tbls.
     *     @example
     *     // Create many Orders_tbls
     *     const orders_tbl = await prisma.orders_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orders_tblCreateManyArgs>(
      args?: SelectSubset<T, orders_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Orders_tbl.
     * @param {orders_tblDeleteArgs} args - Arguments to delete one Orders_tbl.
     * @example
     * // Delete one Orders_tbl
     * const Orders_tbl = await prisma.orders_tbl.delete({
     *   where: {
     *     // ... filter to delete one Orders_tbl
     *   }
     * })
     * 
    **/
    delete<T extends orders_tblDeleteArgs>(
      args: SelectSubset<T, orders_tblDeleteArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Update one Orders_tbl.
     * @param {orders_tblUpdateArgs} args - Arguments to update one Orders_tbl.
     * @example
     * // Update one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orders_tblUpdateArgs>(
      args: SelectSubset<T, orders_tblUpdateArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Delete zero or more Orders_tbls.
     * @param {orders_tblDeleteManyArgs} args - Arguments to filter Orders_tbls to delete.
     * @example
     * // Delete a few Orders_tbls
     * const { count } = await prisma.orders_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orders_tblDeleteManyArgs>(
      args?: SelectSubset<T, orders_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders_tbls
     * const orders_tbl = await prisma.orders_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orders_tblUpdateManyArgs>(
      args: SelectSubset<T, orders_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders_tbl.
     * @param {orders_tblUpsertArgs} args - Arguments to update or create a Orders_tbl.
     * @example
     * // Update or create a Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.upsert({
     *   create: {
     *     // ... data to create a Orders_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends orders_tblUpsertArgs>(
      args: SelectSubset<T, orders_tblUpsertArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Find one Orders_tbl that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {orders_tblFindUniqueOrThrowArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orders_tblFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, orders_tblFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Find the first Orders_tbl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblFindFirstOrThrowArgs} args - Arguments to find a Orders_tbl
     * @example
     * // Get one Orders_tbl
     * const orders_tbl = await prisma.orders_tbl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orders_tblFindFirstOrThrowArgs>(
      args?: SelectSubset<T, orders_tblFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__orders_tblClient<orders_tbl>, Prisma__orders_tblClient<orders_tblGetPayload<T>>>

    /**
     * Count the number of Orders_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orders_tblCountArgs} args - Arguments to filter Orders_tbls to count.
     * @example
     * // Count the number of Orders_tbls
     * const count = await prisma.orders_tbl.count({
     *   where: {
     *     // ... the filter for the Orders_tbls we want to count
     *   }
     * })
    **/
    count<T extends orders_tblCountArgs>(
      args?: Subset<T, orders_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Orders_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Orders_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Orders_tblAggregateArgs>(args: Subset<T, Orders_tblAggregateArgs>): PrismaPromise<GetOrders_tblAggregateType<T>>

    /**
     * Group by Orders_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Orders_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Orders_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Orders_tblGroupByArgs['orderBy'] }
        : { orderBy?: Orders_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Orders_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrders_tblGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orders_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__orders_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_tbl<T extends customer_tblArgs = {}>(args?: Subset<T, customer_tblArgs>): CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orders_tbl base type for findUnique actions
   */
  export type orders_tblFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbl to fetch.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }

  /**
   * orders_tbl: findUnique
   */
  export interface orders_tblFindUniqueArgs extends orders_tblFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders_tbl base type for findFirst actions
   */
  export type orders_tblFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbl to fetch.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders_tbls.
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders_tbls.
     * 
    **/
    distinct?: Enumerable<Orders_tblScalarFieldEnum>
  }

  /**
   * orders_tbl: findFirst
   */
  export interface orders_tblFindFirstArgs extends orders_tblFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders_tbl findMany
   */
  export type orders_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter, which orders_tbls to fetch.
     * 
    **/
    where?: orders_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<orders_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders_tbls.
     * 
    **/
    cursor?: orders_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Orders_tblScalarFieldEnum>
  }


  /**
   * orders_tbl create
   */
  export type orders_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The data needed to create a orders_tbl.
     * 
    **/
    data: XOR<orders_tblCreateInput, orders_tblUncheckedCreateInput>
  }


  /**
   * orders_tbl createMany
   */
  export type orders_tblCreateManyArgs = {
    /**
     * The data used to create many orders_tbls.
     * 
    **/
    data: Enumerable<orders_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders_tbl update
   */
  export type orders_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The data needed to update a orders_tbl.
     * 
    **/
    data: XOR<orders_tblUpdateInput, orders_tblUncheckedUpdateInput>
    /**
     * Choose, which orders_tbl to update.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }


  /**
   * orders_tbl updateMany
   */
  export type orders_tblUpdateManyArgs = {
    /**
     * The data used to update orders_tbls.
     * 
    **/
    data: XOR<orders_tblUpdateManyMutationInput, orders_tblUncheckedUpdateManyInput>
    /**
     * Filter which orders_tbls to update
     * 
    **/
    where?: orders_tblWhereInput
  }


  /**
   * orders_tbl upsert
   */
  export type orders_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * The filter to search for the orders_tbl to update in case it exists.
     * 
    **/
    where: orders_tblWhereUniqueInput
    /**
     * In case the orders_tbl found by the `where` argument doesn't exist, create a new orders_tbl with this data.
     * 
    **/
    create: XOR<orders_tblCreateInput, orders_tblUncheckedCreateInput>
    /**
     * In case the orders_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<orders_tblUpdateInput, orders_tblUncheckedUpdateInput>
  }


  /**
   * orders_tbl delete
   */
  export type orders_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
    /**
     * Filter which orders_tbl to delete.
     * 
    **/
    where: orders_tblWhereUniqueInput
  }


  /**
   * orders_tbl deleteMany
   */
  export type orders_tblDeleteManyArgs = {
    /**
     * Filter which orders_tbls to delete
     * 
    **/
    where?: orders_tblWhereInput
  }


  /**
   * orders_tbl: findUniqueOrThrow
   */
  export type orders_tblFindUniqueOrThrowArgs = orders_tblFindUniqueArgsBase
      

  /**
   * orders_tbl: findFirstOrThrow
   */
  export type orders_tblFindFirstOrThrowArgs = orders_tblFindFirstArgsBase
      

  /**
   * orders_tbl without action
   */
  export type orders_tblArgs = {
    /**
     * Select specific fields to fetch from the orders_tbl
     * 
    **/
    select?: orders_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: orders_tblInclude | null
  }



  /**
   * Model deliver_status
   */


  export type AggregateDeliver_status = {
    _count: Deliver_statusCountAggregateOutputType | null
    _avg: Deliver_statusAvgAggregateOutputType | null
    _sum: Deliver_statusSumAggregateOutputType | null
    _min: Deliver_statusMinAggregateOutputType | null
    _max: Deliver_statusMaxAggregateOutputType | null
  }

  export type Deliver_statusAvgAggregateOutputType = {
    deliver_id: number | null
    customer_id: number | null
  }

  export type Deliver_statusSumAggregateOutputType = {
    deliver_id: number | null
    customer_id: number | null
  }

  export type Deliver_statusMinAggregateOutputType = {
    deliver_id: number | null
    customer_id: number | null
    product_status: string | null
  }

  export type Deliver_statusMaxAggregateOutputType = {
    deliver_id: number | null
    customer_id: number | null
    product_status: string | null
  }

  export type Deliver_statusCountAggregateOutputType = {
    deliver_id: number
    customer_id: number
    product_status: number
    _all: number
  }


  export type Deliver_statusAvgAggregateInputType = {
    deliver_id?: true
    customer_id?: true
  }

  export type Deliver_statusSumAggregateInputType = {
    deliver_id?: true
    customer_id?: true
  }

  export type Deliver_statusMinAggregateInputType = {
    deliver_id?: true
    customer_id?: true
    product_status?: true
  }

  export type Deliver_statusMaxAggregateInputType = {
    deliver_id?: true
    customer_id?: true
    product_status?: true
  }

  export type Deliver_statusCountAggregateInputType = {
    deliver_id?: true
    customer_id?: true
    product_status?: true
    _all?: true
  }

  export type Deliver_statusAggregateArgs = {
    /**
     * Filter which deliver_status to aggregate.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliver_statuses
    **/
    _count?: true | Deliver_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Deliver_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Deliver_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Deliver_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Deliver_statusMaxAggregateInputType
  }

  export type GetDeliver_statusAggregateType<T extends Deliver_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliver_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliver_status[P]>
      : GetScalarType<T[P], AggregateDeliver_status[P]>
  }




  export type Deliver_statusGroupByArgs = {
    where?: deliver_statusWhereInput
    orderBy?: Enumerable<deliver_statusOrderByWithAggregationInput>
    by: Array<Deliver_statusScalarFieldEnum>
    having?: deliver_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Deliver_statusCountAggregateInputType | true
    _avg?: Deliver_statusAvgAggregateInputType
    _sum?: Deliver_statusSumAggregateInputType
    _min?: Deliver_statusMinAggregateInputType
    _max?: Deliver_statusMaxAggregateInputType
  }


  export type Deliver_statusGroupByOutputType = {
    deliver_id: number
    customer_id: number
    product_status: string
    _count: Deliver_statusCountAggregateOutputType | null
    _avg: Deliver_statusAvgAggregateOutputType | null
    _sum: Deliver_statusSumAggregateOutputType | null
    _min: Deliver_statusMinAggregateOutputType | null
    _max: Deliver_statusMaxAggregateOutputType | null
  }

  type GetDeliver_statusGroupByPayload<T extends Deliver_statusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Deliver_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Deliver_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Deliver_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Deliver_statusGroupByOutputType[P]>
        }
      >
    >


  export type deliver_statusSelect = {
    deliver_id?: boolean
    customer_id?: boolean
    product_status?: boolean
    customer_tbl?: boolean | customer_tblArgs
  }

  export type deliver_statusInclude = {
    customer_tbl?: boolean | customer_tblArgs
  }

  export type deliver_statusGetPayload<
    S extends boolean | null | undefined | deliver_statusArgs,
    U = keyof S
      > = S extends true
        ? deliver_status
    : S extends undefined
    ? never
    : S extends deliver_statusArgs | deliver_statusFindManyArgs
    ?'include' extends U
    ? deliver_status  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['select'][P]> :  P extends keyof deliver_status ? deliver_status[P] : never
  } 
    : deliver_status
  : deliver_status


  type deliver_statusCountArgs = Merge<
    Omit<deliver_statusFindManyArgs, 'select' | 'include'> & {
      select?: Deliver_statusCountAggregateInputType | true
    }
  >

  export interface deliver_statusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Deliver_status that matches the filter.
     * @param {deliver_statusFindUniqueArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deliver_statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, deliver_statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'deliver_status'> extends True ? CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>> : CheckSelect<T, Prisma__deliver_statusClient<deliver_status | null >, Prisma__deliver_statusClient<deliver_statusGetPayload<T> | null >>

    /**
     * Find the first Deliver_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindFirstArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deliver_statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, deliver_statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'deliver_status'> extends True ? CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>> : CheckSelect<T, Prisma__deliver_statusClient<deliver_status | null >, Prisma__deliver_statusClient<deliver_statusGetPayload<T> | null >>

    /**
     * Find zero or more Deliver_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliver_statuses
     * const deliver_statuses = await prisma.deliver_status.findMany()
     * 
     * // Get first 10 Deliver_statuses
     * const deliver_statuses = await prisma.deliver_status.findMany({ take: 10 })
     * 
     * // Only select the `deliver_id`
     * const deliver_statusWithDeliver_idOnly = await prisma.deliver_status.findMany({ select: { deliver_id: true } })
     * 
    **/
    findMany<T extends deliver_statusFindManyArgs>(
      args?: SelectSubset<T, deliver_statusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<deliver_status>>, PrismaPromise<Array<deliver_statusGetPayload<T>>>>

    /**
     * Create a Deliver_status.
     * @param {deliver_statusCreateArgs} args - Arguments to create a Deliver_status.
     * @example
     * // Create one Deliver_status
     * const Deliver_status = await prisma.deliver_status.create({
     *   data: {
     *     // ... data to create a Deliver_status
     *   }
     * })
     * 
    **/
    create<T extends deliver_statusCreateArgs>(
      args: SelectSubset<T, deliver_statusCreateArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Create many Deliver_statuses.
     *     @param {deliver_statusCreateManyArgs} args - Arguments to create many Deliver_statuses.
     *     @example
     *     // Create many Deliver_statuses
     *     const deliver_status = await prisma.deliver_status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deliver_statusCreateManyArgs>(
      args?: SelectSubset<T, deliver_statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Deliver_status.
     * @param {deliver_statusDeleteArgs} args - Arguments to delete one Deliver_status.
     * @example
     * // Delete one Deliver_status
     * const Deliver_status = await prisma.deliver_status.delete({
     *   where: {
     *     // ... filter to delete one Deliver_status
     *   }
     * })
     * 
    **/
    delete<T extends deliver_statusDeleteArgs>(
      args: SelectSubset<T, deliver_statusDeleteArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Update one Deliver_status.
     * @param {deliver_statusUpdateArgs} args - Arguments to update one Deliver_status.
     * @example
     * // Update one Deliver_status
     * const deliver_status = await prisma.deliver_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deliver_statusUpdateArgs>(
      args: SelectSubset<T, deliver_statusUpdateArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Delete zero or more Deliver_statuses.
     * @param {deliver_statusDeleteManyArgs} args - Arguments to filter Deliver_statuses to delete.
     * @example
     * // Delete a few Deliver_statuses
     * const { count } = await prisma.deliver_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deliver_statusDeleteManyArgs>(
      args?: SelectSubset<T, deliver_statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliver_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliver_statuses
     * const deliver_status = await prisma.deliver_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deliver_statusUpdateManyArgs>(
      args: SelectSubset<T, deliver_statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Deliver_status.
     * @param {deliver_statusUpsertArgs} args - Arguments to update or create a Deliver_status.
     * @example
     * // Update or create a Deliver_status
     * const deliver_status = await prisma.deliver_status.upsert({
     *   create: {
     *     // ... data to create a Deliver_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliver_status we want to update
     *   }
     * })
    **/
    upsert<T extends deliver_statusUpsertArgs>(
      args: SelectSubset<T, deliver_statusUpsertArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Find one Deliver_status that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {deliver_statusFindUniqueOrThrowArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends deliver_statusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, deliver_statusFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Find the first Deliver_status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusFindFirstOrThrowArgs} args - Arguments to find a Deliver_status
     * @example
     * // Get one Deliver_status
     * const deliver_status = await prisma.deliver_status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends deliver_statusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, deliver_statusFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__deliver_statusClient<deliver_status>, Prisma__deliver_statusClient<deliver_statusGetPayload<T>>>

    /**
     * Count the number of Deliver_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliver_statusCountArgs} args - Arguments to filter Deliver_statuses to count.
     * @example
     * // Count the number of Deliver_statuses
     * const count = await prisma.deliver_status.count({
     *   where: {
     *     // ... the filter for the Deliver_statuses we want to count
     *   }
     * })
    **/
    count<T extends deliver_statusCountArgs>(
      args?: Subset<T, deliver_statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Deliver_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliver_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Deliver_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Deliver_statusAggregateArgs>(args: Subset<T, Deliver_statusAggregateArgs>): PrismaPromise<GetDeliver_statusAggregateType<T>>

    /**
     * Group by Deliver_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Deliver_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Deliver_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Deliver_statusGroupByArgs['orderBy'] }
        : { orderBy?: Deliver_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Deliver_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliver_statusGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for deliver_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__deliver_statusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_tbl<T extends customer_tblArgs = {}>(args?: Subset<T, customer_tblArgs>): CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * deliver_status base type for findUnique actions
   */
  export type deliver_statusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_status to fetch.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }

  /**
   * deliver_status: findUnique
   */
  export interface deliver_statusFindUniqueArgs extends deliver_statusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliver_status base type for findFirst actions
   */
  export type deliver_statusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_status to fetch.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliver_statuses.
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliver_statuses.
     * 
    **/
    distinct?: Enumerable<Deliver_statusScalarFieldEnum>
  }

  /**
   * deliver_status: findFirst
   */
  export interface deliver_statusFindFirstArgs extends deliver_statusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliver_status findMany
   */
  export type deliver_statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter, which deliver_statuses to fetch.
     * 
    **/
    where?: deliver_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliver_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<deliver_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliver_statuses.
     * 
    **/
    cursor?: deliver_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliver_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliver_statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Deliver_statusScalarFieldEnum>
  }


  /**
   * deliver_status create
   */
  export type deliver_statusCreateArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The data needed to create a deliver_status.
     * 
    **/
    data: XOR<deliver_statusCreateInput, deliver_statusUncheckedCreateInput>
  }


  /**
   * deliver_status createMany
   */
  export type deliver_statusCreateManyArgs = {
    /**
     * The data used to create many deliver_statuses.
     * 
    **/
    data: Enumerable<deliver_statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * deliver_status update
   */
  export type deliver_statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The data needed to update a deliver_status.
     * 
    **/
    data: XOR<deliver_statusUpdateInput, deliver_statusUncheckedUpdateInput>
    /**
     * Choose, which deliver_status to update.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }


  /**
   * deliver_status updateMany
   */
  export type deliver_statusUpdateManyArgs = {
    /**
     * The data used to update deliver_statuses.
     * 
    **/
    data: XOR<deliver_statusUpdateManyMutationInput, deliver_statusUncheckedUpdateManyInput>
    /**
     * Filter which deliver_statuses to update
     * 
    **/
    where?: deliver_statusWhereInput
  }


  /**
   * deliver_status upsert
   */
  export type deliver_statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * The filter to search for the deliver_status to update in case it exists.
     * 
    **/
    where: deliver_statusWhereUniqueInput
    /**
     * In case the deliver_status found by the `where` argument doesn't exist, create a new deliver_status with this data.
     * 
    **/
    create: XOR<deliver_statusCreateInput, deliver_statusUncheckedCreateInput>
    /**
     * In case the deliver_status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<deliver_statusUpdateInput, deliver_statusUncheckedUpdateInput>
  }


  /**
   * deliver_status delete
   */
  export type deliver_statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
    /**
     * Filter which deliver_status to delete.
     * 
    **/
    where: deliver_statusWhereUniqueInput
  }


  /**
   * deliver_status deleteMany
   */
  export type deliver_statusDeleteManyArgs = {
    /**
     * Filter which deliver_statuses to delete
     * 
    **/
    where?: deliver_statusWhereInput
  }


  /**
   * deliver_status: findUniqueOrThrow
   */
  export type deliver_statusFindUniqueOrThrowArgs = deliver_statusFindUniqueArgsBase
      

  /**
   * deliver_status: findFirstOrThrow
   */
  export type deliver_statusFindFirstOrThrowArgs = deliver_statusFindFirstArgsBase
      

  /**
   * deliver_status without action
   */
  export type deliver_statusArgs = {
    /**
     * Select specific fields to fetch from the deliver_status
     * 
    **/
    select?: deliver_statusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deliver_statusInclude | null
  }



  /**
   * Model customer_agedetails
   */


  export type AggregateCustomer_agedetails = {
    _count: Customer_agedetailsCountAggregateOutputType | null
    _avg: Customer_agedetailsAvgAggregateOutputType | null
    _sum: Customer_agedetailsSumAggregateOutputType | null
    _min: Customer_agedetailsMinAggregateOutputType | null
    _max: Customer_agedetailsMaxAggregateOutputType | null
  }

  export type Customer_agedetailsAvgAggregateOutputType = {
    ID: number | null
    customer_id: number | null
    customer_age: number | null
  }

  export type Customer_agedetailsSumAggregateOutputType = {
    ID: number | null
    customer_id: number | null
    customer_age: number | null
  }

  export type Customer_agedetailsMinAggregateOutputType = {
    ID: number | null
    customer_id: number | null
    customer_age: number | null
  }

  export type Customer_agedetailsMaxAggregateOutputType = {
    ID: number | null
    customer_id: number | null
    customer_age: number | null
  }

  export type Customer_agedetailsCountAggregateOutputType = {
    ID: number
    customer_id: number
    customer_age: number
    _all: number
  }


  export type Customer_agedetailsAvgAggregateInputType = {
    ID?: true
    customer_id?: true
    customer_age?: true
  }

  export type Customer_agedetailsSumAggregateInputType = {
    ID?: true
    customer_id?: true
    customer_age?: true
  }

  export type Customer_agedetailsMinAggregateInputType = {
    ID?: true
    customer_id?: true
    customer_age?: true
  }

  export type Customer_agedetailsMaxAggregateInputType = {
    ID?: true
    customer_id?: true
    customer_age?: true
  }

  export type Customer_agedetailsCountAggregateInputType = {
    ID?: true
    customer_id?: true
    customer_age?: true
    _all?: true
  }

  export type Customer_agedetailsAggregateArgs = {
    /**
     * Filter which customer_agedetails to aggregate.
     * 
    **/
    where?: customer_agedetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_agedetails to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_agedetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: customer_agedetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_agedetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_agedetails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customer_agedetails
    **/
    _count?: true | Customer_agedetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Customer_agedetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Customer_agedetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Customer_agedetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Customer_agedetailsMaxAggregateInputType
  }

  export type GetCustomer_agedetailsAggregateType<T extends Customer_agedetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer_agedetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer_agedetails[P]>
      : GetScalarType<T[P], AggregateCustomer_agedetails[P]>
  }




  export type Customer_agedetailsGroupByArgs = {
    where?: customer_agedetailsWhereInput
    orderBy?: Enumerable<customer_agedetailsOrderByWithAggregationInput>
    by: Array<Customer_agedetailsScalarFieldEnum>
    having?: customer_agedetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Customer_agedetailsCountAggregateInputType | true
    _avg?: Customer_agedetailsAvgAggregateInputType
    _sum?: Customer_agedetailsSumAggregateInputType
    _min?: Customer_agedetailsMinAggregateInputType
    _max?: Customer_agedetailsMaxAggregateInputType
  }


  export type Customer_agedetailsGroupByOutputType = {
    ID: number
    customer_id: number
    customer_age: number
    _count: Customer_agedetailsCountAggregateOutputType | null
    _avg: Customer_agedetailsAvgAggregateOutputType | null
    _sum: Customer_agedetailsSumAggregateOutputType | null
    _min: Customer_agedetailsMinAggregateOutputType | null
    _max: Customer_agedetailsMaxAggregateOutputType | null
  }

  type GetCustomer_agedetailsGroupByPayload<T extends Customer_agedetailsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Customer_agedetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Customer_agedetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Customer_agedetailsGroupByOutputType[P]>
            : GetScalarType<T[P], Customer_agedetailsGroupByOutputType[P]>
        }
      >
    >


  export type customer_agedetailsSelect = {
    ID?: boolean
    customer_id?: boolean
    customer_age?: boolean
    customer_tbl?: boolean | customer_tblArgs
  }

  export type customer_agedetailsInclude = {
    customer_tbl?: boolean | customer_tblArgs
  }

  export type customer_agedetailsGetPayload<
    S extends boolean | null | undefined | customer_agedetailsArgs,
    U = keyof S
      > = S extends true
        ? customer_agedetails
    : S extends undefined
    ? never
    : S extends customer_agedetailsArgs | customer_agedetailsFindManyArgs
    ?'include' extends U
    ? customer_agedetails  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customer_tbl' ? customer_tblGetPayload<S['select'][P]> :  P extends keyof customer_agedetails ? customer_agedetails[P] : never
  } 
    : customer_agedetails
  : customer_agedetails


  type customer_agedetailsCountArgs = Merge<
    Omit<customer_agedetailsFindManyArgs, 'select' | 'include'> & {
      select?: Customer_agedetailsCountAggregateInputType | true
    }
  >

  export interface customer_agedetailsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Customer_agedetails that matches the filter.
     * @param {customer_agedetailsFindUniqueArgs} args - Arguments to find a Customer_agedetails
     * @example
     * // Get one Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends customer_agedetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, customer_agedetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'customer_agedetails'> extends True ? CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>> : CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails | null >, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T> | null >>

    /**
     * Find the first Customer_agedetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_agedetailsFindFirstArgs} args - Arguments to find a Customer_agedetails
     * @example
     * // Get one Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends customer_agedetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, customer_agedetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'customer_agedetails'> extends True ? CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>> : CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails | null >, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T> | null >>

    /**
     * Find zero or more Customer_agedetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_agedetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findMany()
     * 
     * // Get first 10 Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const customer_agedetailsWithIDOnly = await prisma.customer_agedetails.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends customer_agedetailsFindManyArgs>(
      args?: SelectSubset<T, customer_agedetailsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<customer_agedetails>>, PrismaPromise<Array<customer_agedetailsGetPayload<T>>>>

    /**
     * Create a Customer_agedetails.
     * @param {customer_agedetailsCreateArgs} args - Arguments to create a Customer_agedetails.
     * @example
     * // Create one Customer_agedetails
     * const Customer_agedetails = await prisma.customer_agedetails.create({
     *   data: {
     *     // ... data to create a Customer_agedetails
     *   }
     * })
     * 
    **/
    create<T extends customer_agedetailsCreateArgs>(
      args: SelectSubset<T, customer_agedetailsCreateArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Create many Customer_agedetails.
     *     @param {customer_agedetailsCreateManyArgs} args - Arguments to create many Customer_agedetails.
     *     @example
     *     // Create many Customer_agedetails
     *     const customer_agedetails = await prisma.customer_agedetails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends customer_agedetailsCreateManyArgs>(
      args?: SelectSubset<T, customer_agedetailsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Customer_agedetails.
     * @param {customer_agedetailsDeleteArgs} args - Arguments to delete one Customer_agedetails.
     * @example
     * // Delete one Customer_agedetails
     * const Customer_agedetails = await prisma.customer_agedetails.delete({
     *   where: {
     *     // ... filter to delete one Customer_agedetails
     *   }
     * })
     * 
    **/
    delete<T extends customer_agedetailsDeleteArgs>(
      args: SelectSubset<T, customer_agedetailsDeleteArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Update one Customer_agedetails.
     * @param {customer_agedetailsUpdateArgs} args - Arguments to update one Customer_agedetails.
     * @example
     * // Update one Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends customer_agedetailsUpdateArgs>(
      args: SelectSubset<T, customer_agedetailsUpdateArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Delete zero or more Customer_agedetails.
     * @param {customer_agedetailsDeleteManyArgs} args - Arguments to filter Customer_agedetails to delete.
     * @example
     * // Delete a few Customer_agedetails
     * const { count } = await prisma.customer_agedetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends customer_agedetailsDeleteManyArgs>(
      args?: SelectSubset<T, customer_agedetailsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customer_agedetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_agedetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends customer_agedetailsUpdateManyArgs>(
      args: SelectSubset<T, customer_agedetailsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer_agedetails.
     * @param {customer_agedetailsUpsertArgs} args - Arguments to update or create a Customer_agedetails.
     * @example
     * // Update or create a Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.upsert({
     *   create: {
     *     // ... data to create a Customer_agedetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer_agedetails we want to update
     *   }
     * })
    **/
    upsert<T extends customer_agedetailsUpsertArgs>(
      args: SelectSubset<T, customer_agedetailsUpsertArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Find one Customer_agedetails that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {customer_agedetailsFindUniqueOrThrowArgs} args - Arguments to find a Customer_agedetails
     * @example
     * // Get one Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends customer_agedetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, customer_agedetailsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Find the first Customer_agedetails that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_agedetailsFindFirstOrThrowArgs} args - Arguments to find a Customer_agedetails
     * @example
     * // Get one Customer_agedetails
     * const customer_agedetails = await prisma.customer_agedetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends customer_agedetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, customer_agedetailsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__customer_agedetailsClient<customer_agedetails>, Prisma__customer_agedetailsClient<customer_agedetailsGetPayload<T>>>

    /**
     * Count the number of Customer_agedetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customer_agedetailsCountArgs} args - Arguments to filter Customer_agedetails to count.
     * @example
     * // Count the number of Customer_agedetails
     * const count = await prisma.customer_agedetails.count({
     *   where: {
     *     // ... the filter for the Customer_agedetails we want to count
     *   }
     * })
    **/
    count<T extends customer_agedetailsCountArgs>(
      args?: Subset<T, customer_agedetailsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Customer_agedetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer_agedetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_agedetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Customer_agedetailsAggregateArgs>(args: Subset<T, Customer_agedetailsAggregateArgs>): PrismaPromise<GetCustomer_agedetailsAggregateType<T>>

    /**
     * Group by Customer_agedetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Customer_agedetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Customer_agedetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Customer_agedetailsGroupByArgs['orderBy'] }
        : { orderBy?: Customer_agedetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Customer_agedetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomer_agedetailsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for customer_agedetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__customer_agedetailsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customer_tbl<T extends customer_tblArgs = {}>(args?: Subset<T, customer_tblArgs>): CheckSelect<T, Prisma__customer_tblClient<customer_tbl | null >, Prisma__customer_tblClient<customer_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * customer_agedetails base type for findUnique actions
   */
  export type customer_agedetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * Filter, which customer_agedetails to fetch.
     * 
    **/
    where: customer_agedetailsWhereUniqueInput
  }

  /**
   * customer_agedetails: findUnique
   */
  export interface customer_agedetailsFindUniqueArgs extends customer_agedetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_agedetails base type for findFirst actions
   */
  export type customer_agedetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * Filter, which customer_agedetails to fetch.
     * 
    **/
    where?: customer_agedetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_agedetails to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_agedetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customer_agedetails.
     * 
    **/
    cursor?: customer_agedetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_agedetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_agedetails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customer_agedetails.
     * 
    **/
    distinct?: Enumerable<Customer_agedetailsScalarFieldEnum>
  }

  /**
   * customer_agedetails: findFirst
   */
  export interface customer_agedetailsFindFirstArgs extends customer_agedetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * customer_agedetails findMany
   */
  export type customer_agedetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * Filter, which customer_agedetails to fetch.
     * 
    **/
    where?: customer_agedetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customer_agedetails to fetch.
     * 
    **/
    orderBy?: Enumerable<customer_agedetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customer_agedetails.
     * 
    **/
    cursor?: customer_agedetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customer_agedetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customer_agedetails.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Customer_agedetailsScalarFieldEnum>
  }


  /**
   * customer_agedetails create
   */
  export type customer_agedetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * The data needed to create a customer_agedetails.
     * 
    **/
    data: XOR<customer_agedetailsCreateInput, customer_agedetailsUncheckedCreateInput>
  }


  /**
   * customer_agedetails createMany
   */
  export type customer_agedetailsCreateManyArgs = {
    /**
     * The data used to create many customer_agedetails.
     * 
    **/
    data: Enumerable<customer_agedetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * customer_agedetails update
   */
  export type customer_agedetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * The data needed to update a customer_agedetails.
     * 
    **/
    data: XOR<customer_agedetailsUpdateInput, customer_agedetailsUncheckedUpdateInput>
    /**
     * Choose, which customer_agedetails to update.
     * 
    **/
    where: customer_agedetailsWhereUniqueInput
  }


  /**
   * customer_agedetails updateMany
   */
  export type customer_agedetailsUpdateManyArgs = {
    /**
     * The data used to update customer_agedetails.
     * 
    **/
    data: XOR<customer_agedetailsUpdateManyMutationInput, customer_agedetailsUncheckedUpdateManyInput>
    /**
     * Filter which customer_agedetails to update
     * 
    **/
    where?: customer_agedetailsWhereInput
  }


  /**
   * customer_agedetails upsert
   */
  export type customer_agedetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * The filter to search for the customer_agedetails to update in case it exists.
     * 
    **/
    where: customer_agedetailsWhereUniqueInput
    /**
     * In case the customer_agedetails found by the `where` argument doesn't exist, create a new customer_agedetails with this data.
     * 
    **/
    create: XOR<customer_agedetailsCreateInput, customer_agedetailsUncheckedCreateInput>
    /**
     * In case the customer_agedetails was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<customer_agedetailsUpdateInput, customer_agedetailsUncheckedUpdateInput>
  }


  /**
   * customer_agedetails delete
   */
  export type customer_agedetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
    /**
     * Filter which customer_agedetails to delete.
     * 
    **/
    where: customer_agedetailsWhereUniqueInput
  }


  /**
   * customer_agedetails deleteMany
   */
  export type customer_agedetailsDeleteManyArgs = {
    /**
     * Filter which customer_agedetails to delete
     * 
    **/
    where?: customer_agedetailsWhereInput
  }


  /**
   * customer_agedetails: findUniqueOrThrow
   */
  export type customer_agedetailsFindUniqueOrThrowArgs = customer_agedetailsFindUniqueArgsBase
      

  /**
   * customer_agedetails: findFirstOrThrow
   */
  export type customer_agedetailsFindFirstOrThrowArgs = customer_agedetailsFindFirstArgsBase
      

  /**
   * customer_agedetails without action
   */
  export type customer_agedetailsArgs = {
    /**
     * Select specific fields to fetch from the customer_agedetails
     * 
    **/
    select?: customer_agedetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: customer_agedetailsInclude | null
  }



  /**
   * Model status
   */


  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    ID: number | null
  }

  export type StatusSumAggregateOutputType = {
    ID: number | null
  }

  export type StatusMinAggregateOutputType = {
    ID: number | null
    current_status: string | null
  }

  export type StatusMaxAggregateOutputType = {
    ID: number | null
    current_status: string | null
  }

  export type StatusCountAggregateOutputType = {
    ID: number
    current_status: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    ID?: true
  }

  export type StatusSumAggregateInputType = {
    ID?: true
  }

  export type StatusMinAggregateInputType = {
    ID?: true
    current_status?: true
  }

  export type StatusMaxAggregateInputType = {
    ID?: true
    current_status?: true
  }

  export type StatusCountAggregateInputType = {
    ID?: true
    current_status?: true
    _all?: true
  }

  export type StatusAggregateArgs = {
    /**
     * Filter which status to aggregate.
     * 
    **/
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs = {
    where?: statusWhereInput
    orderBy?: Enumerable<statusOrderByWithAggregationInput>
    by: Array<StatusScalarFieldEnum>
    having?: statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }


  export type StatusGroupByOutputType = {
    ID: number
    current_status: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type statusSelect = {
    ID?: boolean
    current_status?: boolean
  }

  export type statusGetPayload<
    S extends boolean | null | undefined | statusArgs,
    U = keyof S
      > = S extends true
        ? status
    : S extends undefined
    ? never
    : S extends statusArgs | statusFindManyArgs
    ?'include' extends U
    ? status 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof status ? status[P] : never
  } 
    : status
  : status


  type statusCountArgs = Merge<
    Omit<statusFindManyArgs, 'select' | 'include'> & {
      select?: StatusCountAggregateInputType | true
    }
  >

  export interface statusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Status that matches the filter.
     * @param {statusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'status'> extends True ? CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>> : CheckSelect<T, Prisma__statusClient<status | null >, Prisma__statusClient<statusGetPayload<T> | null >>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'status'> extends True ? CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>> : CheckSelect<T, Prisma__statusClient<status | null >, Prisma__statusClient<statusGetPayload<T> | null >>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const statusWithIDOnly = await prisma.status.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends statusFindManyArgs>(
      args?: SelectSubset<T, statusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<status>>, PrismaPromise<Array<statusGetPayload<T>>>>

    /**
     * Create a Status.
     * @param {statusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends statusCreateArgs>(
      args: SelectSubset<T, statusCreateArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Create many Statuses.
     *     @param {statusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends statusCreateManyArgs>(
      args?: SelectSubset<T, statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {statusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends statusDeleteArgs>(
      args: SelectSubset<T, statusDeleteArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Update one Status.
     * @param {statusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends statusUpdateArgs>(
      args: SelectSubset<T, statusUpdateArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Delete zero or more Statuses.
     * @param {statusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends statusDeleteManyArgs>(
      args?: SelectSubset<T, statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends statusUpdateManyArgs>(
      args: SelectSubset<T, statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {statusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends statusUpsertArgs>(
      args: SelectSubset<T, statusUpsertArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Find one Status that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {statusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends statusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, statusFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Find the first Status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends statusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, statusFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__statusClient<status>, Prisma__statusClient<statusGetPayload<T>>>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends statusCountArgs>(
      args?: Subset<T, statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__statusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * status base type for findUnique actions
   */
  export type statusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * Filter, which status to fetch.
     * 
    **/
    where: statusWhereUniqueInput
  }

  /**
   * status: findUnique
   */
  export interface statusFindUniqueArgs extends statusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * status base type for findFirst actions
   */
  export type statusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * Filter, which status to fetch.
     * 
    **/
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     * 
    **/
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     * 
    **/
    distinct?: Enumerable<StatusScalarFieldEnum>
  }

  /**
   * status: findFirst
   */
  export interface statusFindFirstArgs extends statusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * status findMany
   */
  export type statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * Filter, which statuses to fetch.
     * 
    **/
    where?: statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statuses.
     * 
    **/
    cursor?: statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * status create
   */
  export type statusCreateArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * The data needed to create a status.
     * 
    **/
    data: XOR<statusCreateInput, statusUncheckedCreateInput>
  }


  /**
   * status createMany
   */
  export type statusCreateManyArgs = {
    /**
     * The data used to create many statuses.
     * 
    **/
    data: Enumerable<statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * status update
   */
  export type statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * The data needed to update a status.
     * 
    **/
    data: XOR<statusUpdateInput, statusUncheckedUpdateInput>
    /**
     * Choose, which status to update.
     * 
    **/
    where: statusWhereUniqueInput
  }


  /**
   * status updateMany
   */
  export type statusUpdateManyArgs = {
    /**
     * The data used to update statuses.
     * 
    **/
    data: XOR<statusUpdateManyMutationInput, statusUncheckedUpdateManyInput>
    /**
     * Filter which statuses to update
     * 
    **/
    where?: statusWhereInput
  }


  /**
   * status upsert
   */
  export type statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * The filter to search for the status to update in case it exists.
     * 
    **/
    where: statusWhereUniqueInput
    /**
     * In case the status found by the `where` argument doesn't exist, create a new status with this data.
     * 
    **/
    create: XOR<statusCreateInput, statusUncheckedCreateInput>
    /**
     * In case the status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<statusUpdateInput, statusUncheckedUpdateInput>
  }


  /**
   * status delete
   */
  export type statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
    /**
     * Filter which status to delete.
     * 
    **/
    where: statusWhereUniqueInput
  }


  /**
   * status deleteMany
   */
  export type statusDeleteManyArgs = {
    /**
     * Filter which statuses to delete
     * 
    **/
    where?: statusWhereInput
  }


  /**
   * status: findUniqueOrThrow
   */
  export type statusFindUniqueOrThrowArgs = statusFindUniqueArgsBase
      

  /**
   * status: findFirstOrThrow
   */
  export type statusFindFirstOrThrowArgs = statusFindFirstArgsBase
      

  /**
   * status without action
   */
  export type statusArgs = {
    /**
     * Select specific fields to fetch from the status
     * 
    **/
    select?: statusSelect | null
  }



  /**
   * Model cart_table
   */


  export type AggregateCart_table = {
    _count: Cart_tableCountAggregateOutputType | null
    _avg: Cart_tableAvgAggregateOutputType | null
    _sum: Cart_tableSumAggregateOutputType | null
    _min: Cart_tableMinAggregateOutputType | null
    _max: Cart_tableMaxAggregateOutputType | null
  }

  export type Cart_tableAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_price_cart: number | null
    product_quantity_cart: number | null
  }

  export type Cart_tableSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_price_cart: number | null
    product_quantity_cart: number | null
  }

  export type Cart_tableMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_name: string | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_image: string | null
  }

  export type Cart_tableMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_name: string | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_image: string | null
  }

  export type Cart_tableCountAggregateOutputType = {
    id: number
    product_id: number
    product_name: number
    product_price_cart: number
    product_quantity_cart: number
    product_image: number
    _all: number
  }


  export type Cart_tableAvgAggregateInputType = {
    id?: true
    product_id?: true
    product_price_cart?: true
    product_quantity_cart?: true
  }

  export type Cart_tableSumAggregateInputType = {
    id?: true
    product_id?: true
    product_price_cart?: true
    product_quantity_cart?: true
  }

  export type Cart_tableMinAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
  }

  export type Cart_tableMaxAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
  }

  export type Cart_tableCountAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
    _all?: true
  }

  export type Cart_tableAggregateArgs = {
    /**
     * Filter which cart_table to aggregate.
     * 
    **/
    where?: cart_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<cart_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: cart_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cart_tables
    **/
    _count?: true | Cart_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cart_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cart_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cart_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cart_tableMaxAggregateInputType
  }

  export type GetCart_tableAggregateType<T extends Cart_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateCart_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart_table[P]>
      : GetScalarType<T[P], AggregateCart_table[P]>
  }




  export type Cart_tableGroupByArgs = {
    where?: cart_tableWhereInput
    orderBy?: Enumerable<cart_tableOrderByWithAggregationInput>
    by: Array<Cart_tableScalarFieldEnum>
    having?: cart_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cart_tableCountAggregateInputType | true
    _avg?: Cart_tableAvgAggregateInputType
    _sum?: Cart_tableSumAggregateInputType
    _min?: Cart_tableMinAggregateInputType
    _max?: Cart_tableMaxAggregateInputType
  }


  export type Cart_tableGroupByOutputType = {
    id: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart: number | null
    product_image: string
    _count: Cart_tableCountAggregateOutputType | null
    _avg: Cart_tableAvgAggregateOutputType | null
    _sum: Cart_tableSumAggregateOutputType | null
    _min: Cart_tableMinAggregateOutputType | null
    _max: Cart_tableMaxAggregateOutputType | null
  }

  type GetCart_tableGroupByPayload<T extends Cart_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Cart_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cart_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cart_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Cart_tableGroupByOutputType[P]>
        }
      >
    >


  export type cart_tableSelect = {
    id?: boolean
    product_id?: boolean
    product_name?: boolean
    product_price_cart?: boolean
    product_quantity_cart?: boolean
    product_image?: boolean
    product_table?: boolean | product_tableArgs
  }

  export type cart_tableInclude = {
    product_table?: boolean | product_tableArgs
  }

  export type cart_tableGetPayload<
    S extends boolean | null | undefined | cart_tableArgs,
    U = keyof S
      > = S extends true
        ? cart_table
    : S extends undefined
    ? never
    : S extends cart_tableArgs | cart_tableFindManyArgs
    ?'include' extends U
    ? cart_table  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product_table' ? product_tableGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product_table' ? product_tableGetPayload<S['select'][P]> :  P extends keyof cart_table ? cart_table[P] : never
  } 
    : cart_table
  : cart_table


  type cart_tableCountArgs = Merge<
    Omit<cart_tableFindManyArgs, 'select' | 'include'> & {
      select?: Cart_tableCountAggregateInputType | true
    }
  >

  export interface cart_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Cart_table that matches the filter.
     * @param {cart_tableFindUniqueArgs} args - Arguments to find a Cart_table
     * @example
     * // Get one Cart_table
     * const cart_table = await prisma.cart_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cart_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cart_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cart_table'> extends True ? CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>> : CheckSelect<T, Prisma__cart_tableClient<cart_table | null >, Prisma__cart_tableClient<cart_tableGetPayload<T> | null >>

    /**
     * Find the first Cart_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_tableFindFirstArgs} args - Arguments to find a Cart_table
     * @example
     * // Get one Cart_table
     * const cart_table = await prisma.cart_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cart_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cart_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cart_table'> extends True ? CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>> : CheckSelect<T, Prisma__cart_tableClient<cart_table | null >, Prisma__cart_tableClient<cart_tableGetPayload<T> | null >>

    /**
     * Find zero or more Cart_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cart_tables
     * const cart_tables = await prisma.cart_table.findMany()
     * 
     * // Get first 10 Cart_tables
     * const cart_tables = await prisma.cart_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cart_tableWithIdOnly = await prisma.cart_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cart_tableFindManyArgs>(
      args?: SelectSubset<T, cart_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<cart_table>>, PrismaPromise<Array<cart_tableGetPayload<T>>>>

    /**
     * Create a Cart_table.
     * @param {cart_tableCreateArgs} args - Arguments to create a Cart_table.
     * @example
     * // Create one Cart_table
     * const Cart_table = await prisma.cart_table.create({
     *   data: {
     *     // ... data to create a Cart_table
     *   }
     * })
     * 
    **/
    create<T extends cart_tableCreateArgs>(
      args: SelectSubset<T, cart_tableCreateArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Create many Cart_tables.
     *     @param {cart_tableCreateManyArgs} args - Arguments to create many Cart_tables.
     *     @example
     *     // Create many Cart_tables
     *     const cart_table = await prisma.cart_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cart_tableCreateManyArgs>(
      args?: SelectSubset<T, cart_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cart_table.
     * @param {cart_tableDeleteArgs} args - Arguments to delete one Cart_table.
     * @example
     * // Delete one Cart_table
     * const Cart_table = await prisma.cart_table.delete({
     *   where: {
     *     // ... filter to delete one Cart_table
     *   }
     * })
     * 
    **/
    delete<T extends cart_tableDeleteArgs>(
      args: SelectSubset<T, cart_tableDeleteArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Update one Cart_table.
     * @param {cart_tableUpdateArgs} args - Arguments to update one Cart_table.
     * @example
     * // Update one Cart_table
     * const cart_table = await prisma.cart_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cart_tableUpdateArgs>(
      args: SelectSubset<T, cart_tableUpdateArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Delete zero or more Cart_tables.
     * @param {cart_tableDeleteManyArgs} args - Arguments to filter Cart_tables to delete.
     * @example
     * // Delete a few Cart_tables
     * const { count } = await prisma.cart_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cart_tableDeleteManyArgs>(
      args?: SelectSubset<T, cart_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cart_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cart_tables
     * const cart_table = await prisma.cart_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cart_tableUpdateManyArgs>(
      args: SelectSubset<T, cart_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart_table.
     * @param {cart_tableUpsertArgs} args - Arguments to update or create a Cart_table.
     * @example
     * // Update or create a Cart_table
     * const cart_table = await prisma.cart_table.upsert({
     *   create: {
     *     // ... data to create a Cart_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart_table we want to update
     *   }
     * })
    **/
    upsert<T extends cart_tableUpsertArgs>(
      args: SelectSubset<T, cart_tableUpsertArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Find one Cart_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {cart_tableFindUniqueOrThrowArgs} args - Arguments to find a Cart_table
     * @example
     * // Get one Cart_table
     * const cart_table = await prisma.cart_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cart_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, cart_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Find the first Cart_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_tableFindFirstOrThrowArgs} args - Arguments to find a Cart_table
     * @example
     * // Get one Cart_table
     * const cart_table = await prisma.cart_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cart_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, cart_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__cart_tableClient<cart_table>, Prisma__cart_tableClient<cart_tableGetPayload<T>>>

    /**
     * Count the number of Cart_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cart_tableCountArgs} args - Arguments to filter Cart_tables to count.
     * @example
     * // Count the number of Cart_tables
     * const count = await prisma.cart_table.count({
     *   where: {
     *     // ... the filter for the Cart_tables we want to count
     *   }
     * })
    **/
    count<T extends cart_tableCountArgs>(
      args?: Subset<T, cart_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cart_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cart_tableAggregateArgs>(args: Subset<T, Cart_tableAggregateArgs>): PrismaPromise<GetCart_tableAggregateType<T>>

    /**
     * Group by Cart_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cart_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Cart_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Cart_tableGroupByArgs['orderBy'] }
        : { orderBy?: Cart_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Cart_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCart_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cart_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cart_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product_table<T extends product_tableArgs = {}>(args?: Subset<T, product_tableArgs>): CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cart_table base type for findUnique actions
   */
  export type cart_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * Filter, which cart_table to fetch.
     * 
    **/
    where: cart_tableWhereUniqueInput
  }

  /**
   * cart_table: findUnique
   */
  export interface cart_tableFindUniqueArgs extends cart_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart_table base type for findFirst actions
   */
  export type cart_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * Filter, which cart_table to fetch.
     * 
    **/
    where?: cart_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<cart_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cart_tables.
     * 
    **/
    cursor?: cart_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cart_tables.
     * 
    **/
    distinct?: Enumerable<Cart_tableScalarFieldEnum>
  }

  /**
   * cart_table: findFirst
   */
  export interface cart_tableFindFirstArgs extends cart_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart_table findMany
   */
  export type cart_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * Filter, which cart_tables to fetch.
     * 
    **/
    where?: cart_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cart_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<cart_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cart_tables.
     * 
    **/
    cursor?: cart_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cart_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cart_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Cart_tableScalarFieldEnum>
  }


  /**
   * cart_table create
   */
  export type cart_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * The data needed to create a cart_table.
     * 
    **/
    data: XOR<cart_tableCreateInput, cart_tableUncheckedCreateInput>
  }


  /**
   * cart_table createMany
   */
  export type cart_tableCreateManyArgs = {
    /**
     * The data used to create many cart_tables.
     * 
    **/
    data: Enumerable<cart_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cart_table update
   */
  export type cart_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * The data needed to update a cart_table.
     * 
    **/
    data: XOR<cart_tableUpdateInput, cart_tableUncheckedUpdateInput>
    /**
     * Choose, which cart_table to update.
     * 
    **/
    where: cart_tableWhereUniqueInput
  }


  /**
   * cart_table updateMany
   */
  export type cart_tableUpdateManyArgs = {
    /**
     * The data used to update cart_tables.
     * 
    **/
    data: XOR<cart_tableUpdateManyMutationInput, cart_tableUncheckedUpdateManyInput>
    /**
     * Filter which cart_tables to update
     * 
    **/
    where?: cart_tableWhereInput
  }


  /**
   * cart_table upsert
   */
  export type cart_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * The filter to search for the cart_table to update in case it exists.
     * 
    **/
    where: cart_tableWhereUniqueInput
    /**
     * In case the cart_table found by the `where` argument doesn't exist, create a new cart_table with this data.
     * 
    **/
    create: XOR<cart_tableCreateInput, cart_tableUncheckedCreateInput>
    /**
     * In case the cart_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<cart_tableUpdateInput, cart_tableUncheckedUpdateInput>
  }


  /**
   * cart_table delete
   */
  export type cart_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
    /**
     * Filter which cart_table to delete.
     * 
    **/
    where: cart_tableWhereUniqueInput
  }


  /**
   * cart_table deleteMany
   */
  export type cart_tableDeleteManyArgs = {
    /**
     * Filter which cart_tables to delete
     * 
    **/
    where?: cart_tableWhereInput
  }


  /**
   * cart_table: findUniqueOrThrow
   */
  export type cart_tableFindUniqueOrThrowArgs = cart_tableFindUniqueArgsBase
      

  /**
   * cart_table: findFirstOrThrow
   */
  export type cart_tableFindFirstOrThrowArgs = cart_tableFindFirstArgsBase
      

  /**
   * cart_table without action
   */
  export type cart_tableArgs = {
    /**
     * Select specific fields to fetch from the cart_table
     * 
    **/
    select?: cart_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: cart_tableInclude | null
  }



  /**
   * Model product_table
   */


  export type AggregateProduct_table = {
    _count: Product_tableCountAggregateOutputType | null
    _avg: Product_tableAvgAggregateOutputType | null
    _sum: Product_tableSumAggregateOutputType | null
    _min: Product_tableMinAggregateOutputType | null
    _max: Product_tableMaxAggregateOutputType | null
  }

  export type Product_tableAvgAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    strikeout_price: number | null
  }

  export type Product_tableSumAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    strikeout_price: number | null
  }

  export type Product_tableMinAggregateOutputType = {
    product_id: number | null
    product_image: string | null
    product_name: string | null
    product_price: number | null
    strikeout_price: number | null
  }

  export type Product_tableMaxAggregateOutputType = {
    product_id: number | null
    product_image: string | null
    product_name: string | null
    product_price: number | null
    strikeout_price: number | null
  }

  export type Product_tableCountAggregateOutputType = {
    product_id: number
    product_image: number
    product_name: number
    product_price: number
    strikeout_price: number
    _all: number
  }


  export type Product_tableAvgAggregateInputType = {
    product_id?: true
    product_price?: true
    strikeout_price?: true
  }

  export type Product_tableSumAggregateInputType = {
    product_id?: true
    product_price?: true
    strikeout_price?: true
  }

  export type Product_tableMinAggregateInputType = {
    product_id?: true
    product_image?: true
    product_name?: true
    product_price?: true
    strikeout_price?: true
  }

  export type Product_tableMaxAggregateInputType = {
    product_id?: true
    product_image?: true
    product_name?: true
    product_price?: true
    strikeout_price?: true
  }

  export type Product_tableCountAggregateInputType = {
    product_id?: true
    product_image?: true
    product_name?: true
    product_price?: true
    strikeout_price?: true
    _all?: true
  }

  export type Product_tableAggregateArgs = {
    /**
     * Filter which product_table to aggregate.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_tables
    **/
    _count?: true | Product_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_tableMaxAggregateInputType
  }

  export type GetProduct_tableAggregateType<T extends Product_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_table[P]>
      : GetScalarType<T[P], AggregateProduct_table[P]>
  }




  export type Product_tableGroupByArgs = {
    where?: product_tableWhereInput
    orderBy?: Enumerable<product_tableOrderByWithAggregationInput>
    by: Array<Product_tableScalarFieldEnum>
    having?: product_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_tableCountAggregateInputType | true
    _avg?: Product_tableAvgAggregateInputType
    _sum?: Product_tableSumAggregateInputType
    _min?: Product_tableMinAggregateInputType
    _max?: Product_tableMaxAggregateInputType
  }


  export type Product_tableGroupByOutputType = {
    product_id: number
    product_image: string
    product_name: string
    product_price: number
    strikeout_price: number | null
    _count: Product_tableCountAggregateOutputType | null
    _avg: Product_tableAvgAggregateOutputType | null
    _sum: Product_tableSumAggregateOutputType | null
    _min: Product_tableMinAggregateOutputType | null
    _max: Product_tableMaxAggregateOutputType | null
  }

  type GetProduct_tableGroupByPayload<T extends Product_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Product_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Product_tableGroupByOutputType[P]>
        }
      >
    >


  export type product_tableSelect = {
    product_id?: boolean
    product_image?: boolean
    product_name?: boolean
    product_price?: boolean
    strikeout_price?: boolean
    cart_table?: boolean | cart_tableArgs
  }

  export type product_tableInclude = {
    cart_table?: boolean | cart_tableArgs
  }

  export type product_tableGetPayload<
    S extends boolean | null | undefined | product_tableArgs,
    U = keyof S
      > = S extends true
        ? product_table
    : S extends undefined
    ? never
    : S extends product_tableArgs | product_tableFindManyArgs
    ?'include' extends U
    ? product_table  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cart_table' ? cart_tableGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cart_table' ? cart_tableGetPayload<S['select'][P]> | null :  P extends keyof product_table ? product_table[P] : never
  } 
    : product_table
  : product_table


  type product_tableCountArgs = Merge<
    Omit<product_tableFindManyArgs, 'select' | 'include'> & {
      select?: Product_tableCountAggregateInputType | true
    }
  >

  export interface product_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product_table that matches the filter.
     * @param {product_tableFindUniqueArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, product_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product_table'> extends True ? CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>> : CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>

    /**
     * Find the first Product_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableFindFirstArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, product_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product_table'> extends True ? CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>> : CheckSelect<T, Prisma__product_tableClient<product_table | null >, Prisma__product_tableClient<product_tableGetPayload<T> | null >>

    /**
     * Find zero or more Product_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_tables
     * const product_tables = await prisma.product_table.findMany()
     * 
     * // Get first 10 Product_tables
     * const product_tables = await prisma.product_table.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const product_tableWithProduct_idOnly = await prisma.product_table.findMany({ select: { product_id: true } })
     * 
    **/
    findMany<T extends product_tableFindManyArgs>(
      args?: SelectSubset<T, product_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<product_table>>, PrismaPromise<Array<product_tableGetPayload<T>>>>

    /**
     * Create a Product_table.
     * @param {product_tableCreateArgs} args - Arguments to create a Product_table.
     * @example
     * // Create one Product_table
     * const Product_table = await prisma.product_table.create({
     *   data: {
     *     // ... data to create a Product_table
     *   }
     * })
     * 
    **/
    create<T extends product_tableCreateArgs>(
      args: SelectSubset<T, product_tableCreateArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Create many Product_tables.
     *     @param {product_tableCreateManyArgs} args - Arguments to create many Product_tables.
     *     @example
     *     // Create many Product_tables
     *     const product_table = await prisma.product_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends product_tableCreateManyArgs>(
      args?: SelectSubset<T, product_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product_table.
     * @param {product_tableDeleteArgs} args - Arguments to delete one Product_table.
     * @example
     * // Delete one Product_table
     * const Product_table = await prisma.product_table.delete({
     *   where: {
     *     // ... filter to delete one Product_table
     *   }
     * })
     * 
    **/
    delete<T extends product_tableDeleteArgs>(
      args: SelectSubset<T, product_tableDeleteArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Update one Product_table.
     * @param {product_tableUpdateArgs} args - Arguments to update one Product_table.
     * @example
     * // Update one Product_table
     * const product_table = await prisma.product_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_tableUpdateArgs>(
      args: SelectSubset<T, product_tableUpdateArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Delete zero or more Product_tables.
     * @param {product_tableDeleteManyArgs} args - Arguments to filter Product_tables to delete.
     * @example
     * // Delete a few Product_tables
     * const { count } = await prisma.product_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_tableDeleteManyArgs>(
      args?: SelectSubset<T, product_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_tables
     * const product_table = await prisma.product_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_tableUpdateManyArgs>(
      args: SelectSubset<T, product_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_table.
     * @param {product_tableUpsertArgs} args - Arguments to update or create a Product_table.
     * @example
     * // Update or create a Product_table
     * const product_table = await prisma.product_table.upsert({
     *   create: {
     *     // ... data to create a Product_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_table we want to update
     *   }
     * })
    **/
    upsert<T extends product_tableUpsertArgs>(
      args: SelectSubset<T, product_tableUpsertArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Find one Product_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {product_tableFindUniqueOrThrowArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, product_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Find the first Product_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableFindFirstOrThrowArgs} args - Arguments to find a Product_table
     * @example
     * // Get one Product_table
     * const product_table = await prisma.product_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, product_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__product_tableClient<product_table>, Prisma__product_tableClient<product_tableGetPayload<T>>>

    /**
     * Count the number of Product_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_tableCountArgs} args - Arguments to filter Product_tables to count.
     * @example
     * // Count the number of Product_tables
     * const count = await prisma.product_table.count({
     *   where: {
     *     // ... the filter for the Product_tables we want to count
     *   }
     * })
    **/
    count<T extends product_tableCountArgs>(
      args?: Subset<T, product_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_tableAggregateArgs>(args: Subset<T, Product_tableAggregateArgs>): PrismaPromise<GetProduct_tableAggregateType<T>>

    /**
     * Group by Product_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_tableGroupByArgs['orderBy'] }
        : { orderBy?: Product_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__product_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cart_table<T extends cart_tableArgs = {}>(args?: Subset<T, cart_tableArgs>): CheckSelect<T, Prisma__cart_tableClient<cart_table | null >, Prisma__cart_tableClient<cart_tableGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product_table base type for findUnique actions
   */
  export type product_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter, which product_table to fetch.
     * 
    **/
    where: product_tableWhereUniqueInput
  }

  /**
   * product_table: findUnique
   */
  export interface product_tableFindUniqueArgs extends product_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_table base type for findFirst actions
   */
  export type product_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter, which product_table to fetch.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_tables.
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_tables.
     * 
    **/
    distinct?: Enumerable<Product_tableScalarFieldEnum>
  }

  /**
   * product_table: findFirst
   */
  export interface product_tableFindFirstArgs extends product_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product_table findMany
   */
  export type product_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter, which product_tables to fetch.
     * 
    **/
    where?: product_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<product_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_tables.
     * 
    **/
    cursor?: product_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Product_tableScalarFieldEnum>
  }


  /**
   * product_table create
   */
  export type product_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The data needed to create a product_table.
     * 
    **/
    data: XOR<product_tableCreateInput, product_tableUncheckedCreateInput>
  }


  /**
   * product_table createMany
   */
  export type product_tableCreateManyArgs = {
    /**
     * The data used to create many product_tables.
     * 
    **/
    data: Enumerable<product_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product_table update
   */
  export type product_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The data needed to update a product_table.
     * 
    **/
    data: XOR<product_tableUpdateInput, product_tableUncheckedUpdateInput>
    /**
     * Choose, which product_table to update.
     * 
    **/
    where: product_tableWhereUniqueInput
  }


  /**
   * product_table updateMany
   */
  export type product_tableUpdateManyArgs = {
    /**
     * The data used to update product_tables.
     * 
    **/
    data: XOR<product_tableUpdateManyMutationInput, product_tableUncheckedUpdateManyInput>
    /**
     * Filter which product_tables to update
     * 
    **/
    where?: product_tableWhereInput
  }


  /**
   * product_table upsert
   */
  export type product_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * The filter to search for the product_table to update in case it exists.
     * 
    **/
    where: product_tableWhereUniqueInput
    /**
     * In case the product_table found by the `where` argument doesn't exist, create a new product_table with this data.
     * 
    **/
    create: XOR<product_tableCreateInput, product_tableUncheckedCreateInput>
    /**
     * In case the product_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<product_tableUpdateInput, product_tableUncheckedUpdateInput>
  }


  /**
   * product_table delete
   */
  export type product_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
    /**
     * Filter which product_table to delete.
     * 
    **/
    where: product_tableWhereUniqueInput
  }


  /**
   * product_table deleteMany
   */
  export type product_tableDeleteManyArgs = {
    /**
     * Filter which product_tables to delete
     * 
    **/
    where?: product_tableWhereInput
  }


  /**
   * product_table: findUniqueOrThrow
   */
  export type product_tableFindUniqueOrThrowArgs = product_tableFindUniqueArgsBase
      

  /**
   * product_table: findFirstOrThrow
   */
  export type product_tableFindFirstOrThrowArgs = product_tableFindFirstArgsBase
      

  /**
   * product_table without action
   */
  export type product_tableArgs = {
    /**
     * Select specific fields to fetch from the product_table
     * 
    **/
    select?: product_tableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: product_tableInclude | null
  }



  /**
   * Model save_later_table
   */


  export type AggregateSave_later_table = {
    _count: Save_later_tableCountAggregateOutputType | null
    _avg: Save_later_tableAvgAggregateOutputType | null
    _sum: Save_later_tableSumAggregateOutputType | null
    _min: Save_later_tableMinAggregateOutputType | null
    _max: Save_later_tableMaxAggregateOutputType | null
  }

  export type Save_later_tableAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_price: number | null
  }

  export type Save_later_tableSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_price: number | null
  }

  export type Save_later_tableMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_name: string | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_image: string | null
    product_price: number | null
  }

  export type Save_later_tableMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    product_name: string | null
    product_price_cart: number | null
    product_quantity_cart: number | null
    product_image: string | null
    product_price: number | null
  }

  export type Save_later_tableCountAggregateOutputType = {
    id: number
    product_id: number
    product_name: number
    product_price_cart: number
    product_quantity_cart: number
    product_image: number
    product_price: number
    _all: number
  }


  export type Save_later_tableAvgAggregateInputType = {
    id?: true
    product_id?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_price?: true
  }

  export type Save_later_tableSumAggregateInputType = {
    id?: true
    product_id?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_price?: true
  }

  export type Save_later_tableMinAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
    product_price?: true
  }

  export type Save_later_tableMaxAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
    product_price?: true
  }

  export type Save_later_tableCountAggregateInputType = {
    id?: true
    product_id?: true
    product_name?: true
    product_price_cart?: true
    product_quantity_cart?: true
    product_image?: true
    product_price?: true
    _all?: true
  }

  export type Save_later_tableAggregateArgs = {
    /**
     * Filter which save_later_table to aggregate.
     * 
    **/
    where?: save_later_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_later_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_later_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: save_later_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_later_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_later_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned save_later_tables
    **/
    _count?: true | Save_later_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Save_later_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Save_later_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Save_later_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Save_later_tableMaxAggregateInputType
  }

  export type GetSave_later_tableAggregateType<T extends Save_later_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateSave_later_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSave_later_table[P]>
      : GetScalarType<T[P], AggregateSave_later_table[P]>
  }




  export type Save_later_tableGroupByArgs = {
    where?: save_later_tableWhereInput
    orderBy?: Enumerable<save_later_tableOrderByWithAggregationInput>
    by: Array<Save_later_tableScalarFieldEnum>
    having?: save_later_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Save_later_tableCountAggregateInputType | true
    _avg?: Save_later_tableAvgAggregateInputType
    _sum?: Save_later_tableSumAggregateInputType
    _min?: Save_later_tableMinAggregateInputType
    _max?: Save_later_tableMaxAggregateInputType
  }


  export type Save_later_tableGroupByOutputType = {
    id: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart: number
    product_image: string
    product_price: number
    _count: Save_later_tableCountAggregateOutputType | null
    _avg: Save_later_tableAvgAggregateOutputType | null
    _sum: Save_later_tableSumAggregateOutputType | null
    _min: Save_later_tableMinAggregateOutputType | null
    _max: Save_later_tableMaxAggregateOutputType | null
  }

  type GetSave_later_tableGroupByPayload<T extends Save_later_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Save_later_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Save_later_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Save_later_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Save_later_tableGroupByOutputType[P]>
        }
      >
    >


  export type save_later_tableSelect = {
    id?: boolean
    product_id?: boolean
    product_name?: boolean
    product_price_cart?: boolean
    product_quantity_cart?: boolean
    product_image?: boolean
    product_price?: boolean
  }

  export type save_later_tableGetPayload<
    S extends boolean | null | undefined | save_later_tableArgs,
    U = keyof S
      > = S extends true
        ? save_later_table
    : S extends undefined
    ? never
    : S extends save_later_tableArgs | save_later_tableFindManyArgs
    ?'include' extends U
    ? save_later_table 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof save_later_table ? save_later_table[P] : never
  } 
    : save_later_table
  : save_later_table


  type save_later_tableCountArgs = Merge<
    Omit<save_later_tableFindManyArgs, 'select' | 'include'> & {
      select?: Save_later_tableCountAggregateInputType | true
    }
  >

  export interface save_later_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Save_later_table that matches the filter.
     * @param {save_later_tableFindUniqueArgs} args - Arguments to find a Save_later_table
     * @example
     * // Get one Save_later_table
     * const save_later_table = await prisma.save_later_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends save_later_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, save_later_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'save_later_table'> extends True ? CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>> : CheckSelect<T, Prisma__save_later_tableClient<save_later_table | null >, Prisma__save_later_tableClient<save_later_tableGetPayload<T> | null >>

    /**
     * Find the first Save_later_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_later_tableFindFirstArgs} args - Arguments to find a Save_later_table
     * @example
     * // Get one Save_later_table
     * const save_later_table = await prisma.save_later_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends save_later_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, save_later_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'save_later_table'> extends True ? CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>> : CheckSelect<T, Prisma__save_later_tableClient<save_later_table | null >, Prisma__save_later_tableClient<save_later_tableGetPayload<T> | null >>

    /**
     * Find zero or more Save_later_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_later_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Save_later_tables
     * const save_later_tables = await prisma.save_later_table.findMany()
     * 
     * // Get first 10 Save_later_tables
     * const save_later_tables = await prisma.save_later_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const save_later_tableWithIdOnly = await prisma.save_later_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends save_later_tableFindManyArgs>(
      args?: SelectSubset<T, save_later_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<save_later_table>>, PrismaPromise<Array<save_later_tableGetPayload<T>>>>

    /**
     * Create a Save_later_table.
     * @param {save_later_tableCreateArgs} args - Arguments to create a Save_later_table.
     * @example
     * // Create one Save_later_table
     * const Save_later_table = await prisma.save_later_table.create({
     *   data: {
     *     // ... data to create a Save_later_table
     *   }
     * })
     * 
    **/
    create<T extends save_later_tableCreateArgs>(
      args: SelectSubset<T, save_later_tableCreateArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Create many Save_later_tables.
     *     @param {save_later_tableCreateManyArgs} args - Arguments to create many Save_later_tables.
     *     @example
     *     // Create many Save_later_tables
     *     const save_later_table = await prisma.save_later_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends save_later_tableCreateManyArgs>(
      args?: SelectSubset<T, save_later_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Save_later_table.
     * @param {save_later_tableDeleteArgs} args - Arguments to delete one Save_later_table.
     * @example
     * // Delete one Save_later_table
     * const Save_later_table = await prisma.save_later_table.delete({
     *   where: {
     *     // ... filter to delete one Save_later_table
     *   }
     * })
     * 
    **/
    delete<T extends save_later_tableDeleteArgs>(
      args: SelectSubset<T, save_later_tableDeleteArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Update one Save_later_table.
     * @param {save_later_tableUpdateArgs} args - Arguments to update one Save_later_table.
     * @example
     * // Update one Save_later_table
     * const save_later_table = await prisma.save_later_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends save_later_tableUpdateArgs>(
      args: SelectSubset<T, save_later_tableUpdateArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Delete zero or more Save_later_tables.
     * @param {save_later_tableDeleteManyArgs} args - Arguments to filter Save_later_tables to delete.
     * @example
     * // Delete a few Save_later_tables
     * const { count } = await prisma.save_later_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends save_later_tableDeleteManyArgs>(
      args?: SelectSubset<T, save_later_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Save_later_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_later_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Save_later_tables
     * const save_later_table = await prisma.save_later_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends save_later_tableUpdateManyArgs>(
      args: SelectSubset<T, save_later_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Save_later_table.
     * @param {save_later_tableUpsertArgs} args - Arguments to update or create a Save_later_table.
     * @example
     * // Update or create a Save_later_table
     * const save_later_table = await prisma.save_later_table.upsert({
     *   create: {
     *     // ... data to create a Save_later_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Save_later_table we want to update
     *   }
     * })
    **/
    upsert<T extends save_later_tableUpsertArgs>(
      args: SelectSubset<T, save_later_tableUpsertArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Find one Save_later_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {save_later_tableFindUniqueOrThrowArgs} args - Arguments to find a Save_later_table
     * @example
     * // Get one Save_later_table
     * const save_later_table = await prisma.save_later_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends save_later_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, save_later_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Find the first Save_later_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_later_tableFindFirstOrThrowArgs} args - Arguments to find a Save_later_table
     * @example
     * // Get one Save_later_table
     * const save_later_table = await prisma.save_later_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends save_later_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, save_later_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__save_later_tableClient<save_later_table>, Prisma__save_later_tableClient<save_later_tableGetPayload<T>>>

    /**
     * Count the number of Save_later_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_later_tableCountArgs} args - Arguments to filter Save_later_tables to count.
     * @example
     * // Count the number of Save_later_tables
     * const count = await prisma.save_later_table.count({
     *   where: {
     *     // ... the filter for the Save_later_tables we want to count
     *   }
     * })
    **/
    count<T extends save_later_tableCountArgs>(
      args?: Subset<T, save_later_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Save_later_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Save_later_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_later_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Save_later_tableAggregateArgs>(args: Subset<T, Save_later_tableAggregateArgs>): PrismaPromise<GetSave_later_tableAggregateType<T>>

    /**
     * Group by Save_later_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_later_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Save_later_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Save_later_tableGroupByArgs['orderBy'] }
        : { orderBy?: Save_later_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Save_later_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSave_later_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for save_later_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__save_later_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * save_later_table base type for findUnique actions
   */
  export type save_later_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * Filter, which save_later_table to fetch.
     * 
    **/
    where: save_later_tableWhereUniqueInput
  }

  /**
   * save_later_table: findUnique
   */
  export interface save_later_tableFindUniqueArgs extends save_later_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_later_table base type for findFirst actions
   */
  export type save_later_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * Filter, which save_later_table to fetch.
     * 
    **/
    where?: save_later_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_later_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_later_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for save_later_tables.
     * 
    **/
    cursor?: save_later_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_later_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_later_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of save_later_tables.
     * 
    **/
    distinct?: Enumerable<Save_later_tableScalarFieldEnum>
  }

  /**
   * save_later_table: findFirst
   */
  export interface save_later_tableFindFirstArgs extends save_later_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_later_table findMany
   */
  export type save_later_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * Filter, which save_later_tables to fetch.
     * 
    **/
    where?: save_later_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_later_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_later_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing save_later_tables.
     * 
    **/
    cursor?: save_later_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_later_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_later_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Save_later_tableScalarFieldEnum>
  }


  /**
   * save_later_table create
   */
  export type save_later_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * The data needed to create a save_later_table.
     * 
    **/
    data: XOR<save_later_tableCreateInput, save_later_tableUncheckedCreateInput>
  }


  /**
   * save_later_table createMany
   */
  export type save_later_tableCreateManyArgs = {
    /**
     * The data used to create many save_later_tables.
     * 
    **/
    data: Enumerable<save_later_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * save_later_table update
   */
  export type save_later_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * The data needed to update a save_later_table.
     * 
    **/
    data: XOR<save_later_tableUpdateInput, save_later_tableUncheckedUpdateInput>
    /**
     * Choose, which save_later_table to update.
     * 
    **/
    where: save_later_tableWhereUniqueInput
  }


  /**
   * save_later_table updateMany
   */
  export type save_later_tableUpdateManyArgs = {
    /**
     * The data used to update save_later_tables.
     * 
    **/
    data: XOR<save_later_tableUpdateManyMutationInput, save_later_tableUncheckedUpdateManyInput>
    /**
     * Filter which save_later_tables to update
     * 
    **/
    where?: save_later_tableWhereInput
  }


  /**
   * save_later_table upsert
   */
  export type save_later_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * The filter to search for the save_later_table to update in case it exists.
     * 
    **/
    where: save_later_tableWhereUniqueInput
    /**
     * In case the save_later_table found by the `where` argument doesn't exist, create a new save_later_table with this data.
     * 
    **/
    create: XOR<save_later_tableCreateInput, save_later_tableUncheckedCreateInput>
    /**
     * In case the save_later_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<save_later_tableUpdateInput, save_later_tableUncheckedUpdateInput>
  }


  /**
   * save_later_table delete
   */
  export type save_later_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
    /**
     * Filter which save_later_table to delete.
     * 
    **/
    where: save_later_tableWhereUniqueInput
  }


  /**
   * save_later_table deleteMany
   */
  export type save_later_tableDeleteManyArgs = {
    /**
     * Filter which save_later_tables to delete
     * 
    **/
    where?: save_later_tableWhereInput
  }


  /**
   * save_later_table: findUniqueOrThrow
   */
  export type save_later_tableFindUniqueOrThrowArgs = save_later_tableFindUniqueArgsBase
      

  /**
   * save_later_table: findFirstOrThrow
   */
  export type save_later_tableFindFirstOrThrowArgs = save_later_tableFindFirstArgsBase
      

  /**
   * save_later_table without action
   */
  export type save_later_tableArgs = {
    /**
     * Select specific fields to fetch from the save_later_table
     * 
    **/
    select?: save_later_tableSelect | null
  }



  /**
   * Model address_table
   */


  export type AggregateAddress_table = {
    _count: Address_tableCountAggregateOutputType | null
    _avg: Address_tableAvgAggregateOutputType | null
    _sum: Address_tableSumAggregateOutputType | null
    _min: Address_tableMinAggregateOutputType | null
    _max: Address_tableMaxAggregateOutputType | null
  }

  export type Address_tableAvgAggregateOutputType = {
    id: number | null
    user_pincode: number | null
  }

  export type Address_tableSumAggregateOutputType = {
    id: number | null
    user_pincode: bigint | null
  }

  export type Address_tableMinAggregateOutputType = {
    id: number | null
    user_address: string | null
    user_street: string | null
    user_pincode: bigint | null
  }

  export type Address_tableMaxAggregateOutputType = {
    id: number | null
    user_address: string | null
    user_street: string | null
    user_pincode: bigint | null
  }

  export type Address_tableCountAggregateOutputType = {
    id: number
    user_address: number
    user_street: number
    user_pincode: number
    _all: number
  }


  export type Address_tableAvgAggregateInputType = {
    id?: true
    user_pincode?: true
  }

  export type Address_tableSumAggregateInputType = {
    id?: true
    user_pincode?: true
  }

  export type Address_tableMinAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
  }

  export type Address_tableMaxAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
  }

  export type Address_tableCountAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
    _all?: true
  }

  export type Address_tableAggregateArgs = {
    /**
     * Filter which address_table to aggregate.
     * 
    **/
    where?: address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` address_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned address_tables
    **/
    _count?: true | Address_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Address_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Address_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Address_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Address_tableMaxAggregateInputType
  }

  export type GetAddress_tableAggregateType<T extends Address_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress_table[P]>
      : GetScalarType<T[P], AggregateAddress_table[P]>
  }




  export type Address_tableGroupByArgs = {
    where?: address_tableWhereInput
    orderBy?: Enumerable<address_tableOrderByWithAggregationInput>
    by: Array<Address_tableScalarFieldEnum>
    having?: address_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Address_tableCountAggregateInputType | true
    _avg?: Address_tableAvgAggregateInputType
    _sum?: Address_tableSumAggregateInputType
    _min?: Address_tableMinAggregateInputType
    _max?: Address_tableMaxAggregateInputType
  }


  export type Address_tableGroupByOutputType = {
    id: number
    user_address: string
    user_street: string | null
    user_pincode: bigint | null
    _count: Address_tableCountAggregateOutputType | null
    _avg: Address_tableAvgAggregateOutputType | null
    _sum: Address_tableSumAggregateOutputType | null
    _min: Address_tableMinAggregateOutputType | null
    _max: Address_tableMaxAggregateOutputType | null
  }

  type GetAddress_tableGroupByPayload<T extends Address_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Address_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Address_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Address_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Address_tableGroupByOutputType[P]>
        }
      >
    >


  export type address_tableSelect = {
    id?: boolean
    user_address?: boolean
    user_street?: boolean
    user_pincode?: boolean
  }

  export type address_tableGetPayload<
    S extends boolean | null | undefined | address_tableArgs,
    U = keyof S
      > = S extends true
        ? address_table
    : S extends undefined
    ? never
    : S extends address_tableArgs | address_tableFindManyArgs
    ?'include' extends U
    ? address_table 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof address_table ? address_table[P] : never
  } 
    : address_table
  : address_table


  type address_tableCountArgs = Merge<
    Omit<address_tableFindManyArgs, 'select' | 'include'> & {
      select?: Address_tableCountAggregateInputType | true
    }
  >

  export interface address_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Address_table that matches the filter.
     * @param {address_tableFindUniqueArgs} args - Arguments to find a Address_table
     * @example
     * // Get one Address_table
     * const address_table = await prisma.address_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends address_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, address_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'address_table'> extends True ? CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>> : CheckSelect<T, Prisma__address_tableClient<address_table | null >, Prisma__address_tableClient<address_tableGetPayload<T> | null >>

    /**
     * Find the first Address_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {address_tableFindFirstArgs} args - Arguments to find a Address_table
     * @example
     * // Get one Address_table
     * const address_table = await prisma.address_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends address_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, address_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'address_table'> extends True ? CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>> : CheckSelect<T, Prisma__address_tableClient<address_table | null >, Prisma__address_tableClient<address_tableGetPayload<T> | null >>

    /**
     * Find zero or more Address_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {address_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Address_tables
     * const address_tables = await prisma.address_table.findMany()
     * 
     * // Get first 10 Address_tables
     * const address_tables = await prisma.address_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const address_tableWithIdOnly = await prisma.address_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends address_tableFindManyArgs>(
      args?: SelectSubset<T, address_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<address_table>>, PrismaPromise<Array<address_tableGetPayload<T>>>>

    /**
     * Create a Address_table.
     * @param {address_tableCreateArgs} args - Arguments to create a Address_table.
     * @example
     * // Create one Address_table
     * const Address_table = await prisma.address_table.create({
     *   data: {
     *     // ... data to create a Address_table
     *   }
     * })
     * 
    **/
    create<T extends address_tableCreateArgs>(
      args: SelectSubset<T, address_tableCreateArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Create many Address_tables.
     *     @param {address_tableCreateManyArgs} args - Arguments to create many Address_tables.
     *     @example
     *     // Create many Address_tables
     *     const address_table = await prisma.address_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends address_tableCreateManyArgs>(
      args?: SelectSubset<T, address_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Address_table.
     * @param {address_tableDeleteArgs} args - Arguments to delete one Address_table.
     * @example
     * // Delete one Address_table
     * const Address_table = await prisma.address_table.delete({
     *   where: {
     *     // ... filter to delete one Address_table
     *   }
     * })
     * 
    **/
    delete<T extends address_tableDeleteArgs>(
      args: SelectSubset<T, address_tableDeleteArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Update one Address_table.
     * @param {address_tableUpdateArgs} args - Arguments to update one Address_table.
     * @example
     * // Update one Address_table
     * const address_table = await prisma.address_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends address_tableUpdateArgs>(
      args: SelectSubset<T, address_tableUpdateArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Delete zero or more Address_tables.
     * @param {address_tableDeleteManyArgs} args - Arguments to filter Address_tables to delete.
     * @example
     * // Delete a few Address_tables
     * const { count } = await prisma.address_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends address_tableDeleteManyArgs>(
      args?: SelectSubset<T, address_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Address_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {address_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Address_tables
     * const address_table = await prisma.address_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends address_tableUpdateManyArgs>(
      args: SelectSubset<T, address_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Address_table.
     * @param {address_tableUpsertArgs} args - Arguments to update or create a Address_table.
     * @example
     * // Update or create a Address_table
     * const address_table = await prisma.address_table.upsert({
     *   create: {
     *     // ... data to create a Address_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address_table we want to update
     *   }
     * })
    **/
    upsert<T extends address_tableUpsertArgs>(
      args: SelectSubset<T, address_tableUpsertArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Find one Address_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {address_tableFindUniqueOrThrowArgs} args - Arguments to find a Address_table
     * @example
     * // Get one Address_table
     * const address_table = await prisma.address_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends address_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, address_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Find the first Address_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {address_tableFindFirstOrThrowArgs} args - Arguments to find a Address_table
     * @example
     * // Get one Address_table
     * const address_table = await prisma.address_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends address_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, address_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__address_tableClient<address_table>, Prisma__address_tableClient<address_tableGetPayload<T>>>

    /**
     * Count the number of Address_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {address_tableCountArgs} args - Arguments to filter Address_tables to count.
     * @example
     * // Count the number of Address_tables
     * const count = await prisma.address_table.count({
     *   where: {
     *     // ... the filter for the Address_tables we want to count
     *   }
     * })
    **/
    count<T extends address_tableCountArgs>(
      args?: Subset<T, address_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Address_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Address_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Address_tableAggregateArgs>(args: Subset<T, Address_tableAggregateArgs>): PrismaPromise<GetAddress_tableAggregateType<T>>

    /**
     * Group by Address_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Address_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Address_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Address_tableGroupByArgs['orderBy'] }
        : { orderBy?: Address_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Address_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddress_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for address_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__address_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * address_table base type for findUnique actions
   */
  export type address_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * Filter, which address_table to fetch.
     * 
    **/
    where: address_tableWhereUniqueInput
  }

  /**
   * address_table: findUnique
   */
  export interface address_tableFindUniqueArgs extends address_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * address_table base type for findFirst actions
   */
  export type address_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * Filter, which address_table to fetch.
     * 
    **/
    where?: address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for address_tables.
     * 
    **/
    cursor?: address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` address_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of address_tables.
     * 
    **/
    distinct?: Enumerable<Address_tableScalarFieldEnum>
  }

  /**
   * address_table: findFirst
   */
  export interface address_tableFindFirstArgs extends address_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * address_table findMany
   */
  export type address_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * Filter, which address_tables to fetch.
     * 
    **/
    where?: address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing address_tables.
     * 
    **/
    cursor?: address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` address_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Address_tableScalarFieldEnum>
  }


  /**
   * address_table create
   */
  export type address_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * The data needed to create a address_table.
     * 
    **/
    data: XOR<address_tableCreateInput, address_tableUncheckedCreateInput>
  }


  /**
   * address_table createMany
   */
  export type address_tableCreateManyArgs = {
    /**
     * The data used to create many address_tables.
     * 
    **/
    data: Enumerable<address_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * address_table update
   */
  export type address_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * The data needed to update a address_table.
     * 
    **/
    data: XOR<address_tableUpdateInput, address_tableUncheckedUpdateInput>
    /**
     * Choose, which address_table to update.
     * 
    **/
    where: address_tableWhereUniqueInput
  }


  /**
   * address_table updateMany
   */
  export type address_tableUpdateManyArgs = {
    /**
     * The data used to update address_tables.
     * 
    **/
    data: XOR<address_tableUpdateManyMutationInput, address_tableUncheckedUpdateManyInput>
    /**
     * Filter which address_tables to update
     * 
    **/
    where?: address_tableWhereInput
  }


  /**
   * address_table upsert
   */
  export type address_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * The filter to search for the address_table to update in case it exists.
     * 
    **/
    where: address_tableWhereUniqueInput
    /**
     * In case the address_table found by the `where` argument doesn't exist, create a new address_table with this data.
     * 
    **/
    create: XOR<address_tableCreateInput, address_tableUncheckedCreateInput>
    /**
     * In case the address_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<address_tableUpdateInput, address_tableUncheckedUpdateInput>
  }


  /**
   * address_table delete
   */
  export type address_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
    /**
     * Filter which address_table to delete.
     * 
    **/
    where: address_tableWhereUniqueInput
  }


  /**
   * address_table deleteMany
   */
  export type address_tableDeleteManyArgs = {
    /**
     * Filter which address_tables to delete
     * 
    **/
    where?: address_tableWhereInput
  }


  /**
   * address_table: findUniqueOrThrow
   */
  export type address_tableFindUniqueOrThrowArgs = address_tableFindUniqueArgsBase
      

  /**
   * address_table: findFirstOrThrow
   */
  export type address_tableFindFirstOrThrowArgs = address_tableFindFirstArgsBase
      

  /**
   * address_table without action
   */
  export type address_tableArgs = {
    /**
     * Select specific fields to fetch from the address_table
     * 
    **/
    select?: address_tableSelect | null
  }



  /**
   * Model save_address_table
   */


  export type AggregateSave_address_table = {
    _count: Save_address_tableCountAggregateOutputType | null
    _avg: Save_address_tableAvgAggregateOutputType | null
    _sum: Save_address_tableSumAggregateOutputType | null
    _min: Save_address_tableMinAggregateOutputType | null
    _max: Save_address_tableMaxAggregateOutputType | null
  }

  export type Save_address_tableAvgAggregateOutputType = {
    id: number | null
    user_pincode: number | null
  }

  export type Save_address_tableSumAggregateOutputType = {
    id: number | null
    user_pincode: bigint | null
  }

  export type Save_address_tableMinAggregateOutputType = {
    id: number | null
    user_address: string | null
    user_street: string | null
    user_pincode: bigint | null
  }

  export type Save_address_tableMaxAggregateOutputType = {
    id: number | null
    user_address: string | null
    user_street: string | null
    user_pincode: bigint | null
  }

  export type Save_address_tableCountAggregateOutputType = {
    id: number
    user_address: number
    user_street: number
    user_pincode: number
    _all: number
  }


  export type Save_address_tableAvgAggregateInputType = {
    id?: true
    user_pincode?: true
  }

  export type Save_address_tableSumAggregateInputType = {
    id?: true
    user_pincode?: true
  }

  export type Save_address_tableMinAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
  }

  export type Save_address_tableMaxAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
  }

  export type Save_address_tableCountAggregateInputType = {
    id?: true
    user_address?: true
    user_street?: true
    user_pincode?: true
    _all?: true
  }

  export type Save_address_tableAggregateArgs = {
    /**
     * Filter which save_address_table to aggregate.
     * 
    **/
    where?: save_address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: save_address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_address_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned save_address_tables
    **/
    _count?: true | Save_address_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Save_address_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Save_address_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Save_address_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Save_address_tableMaxAggregateInputType
  }

  export type GetSave_address_tableAggregateType<T extends Save_address_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateSave_address_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSave_address_table[P]>
      : GetScalarType<T[P], AggregateSave_address_table[P]>
  }




  export type Save_address_tableGroupByArgs = {
    where?: save_address_tableWhereInput
    orderBy?: Enumerable<save_address_tableOrderByWithAggregationInput>
    by: Array<Save_address_tableScalarFieldEnum>
    having?: save_address_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Save_address_tableCountAggregateInputType | true
    _avg?: Save_address_tableAvgAggregateInputType
    _sum?: Save_address_tableSumAggregateInputType
    _min?: Save_address_tableMinAggregateInputType
    _max?: Save_address_tableMaxAggregateInputType
  }


  export type Save_address_tableGroupByOutputType = {
    id: number
    user_address: string
    user_street: string | null
    user_pincode: bigint | null
    _count: Save_address_tableCountAggregateOutputType | null
    _avg: Save_address_tableAvgAggregateOutputType | null
    _sum: Save_address_tableSumAggregateOutputType | null
    _min: Save_address_tableMinAggregateOutputType | null
    _max: Save_address_tableMaxAggregateOutputType | null
  }

  type GetSave_address_tableGroupByPayload<T extends Save_address_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Save_address_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Save_address_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Save_address_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Save_address_tableGroupByOutputType[P]>
        }
      >
    >


  export type save_address_tableSelect = {
    id?: boolean
    user_address?: boolean
    user_street?: boolean
    user_pincode?: boolean
  }

  export type save_address_tableGetPayload<
    S extends boolean | null | undefined | save_address_tableArgs,
    U = keyof S
      > = S extends true
        ? save_address_table
    : S extends undefined
    ? never
    : S extends save_address_tableArgs | save_address_tableFindManyArgs
    ?'include' extends U
    ? save_address_table 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof save_address_table ? save_address_table[P] : never
  } 
    : save_address_table
  : save_address_table


  type save_address_tableCountArgs = Merge<
    Omit<save_address_tableFindManyArgs, 'select' | 'include'> & {
      select?: Save_address_tableCountAggregateInputType | true
    }
  >

  export interface save_address_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Save_address_table that matches the filter.
     * @param {save_address_tableFindUniqueArgs} args - Arguments to find a Save_address_table
     * @example
     * // Get one Save_address_table
     * const save_address_table = await prisma.save_address_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends save_address_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, save_address_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'save_address_table'> extends True ? CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>> : CheckSelect<T, Prisma__save_address_tableClient<save_address_table | null >, Prisma__save_address_tableClient<save_address_tableGetPayload<T> | null >>

    /**
     * Find the first Save_address_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_address_tableFindFirstArgs} args - Arguments to find a Save_address_table
     * @example
     * // Get one Save_address_table
     * const save_address_table = await prisma.save_address_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends save_address_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, save_address_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'save_address_table'> extends True ? CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>> : CheckSelect<T, Prisma__save_address_tableClient<save_address_table | null >, Prisma__save_address_tableClient<save_address_tableGetPayload<T> | null >>

    /**
     * Find zero or more Save_address_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_address_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Save_address_tables
     * const save_address_tables = await prisma.save_address_table.findMany()
     * 
     * // Get first 10 Save_address_tables
     * const save_address_tables = await prisma.save_address_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const save_address_tableWithIdOnly = await prisma.save_address_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends save_address_tableFindManyArgs>(
      args?: SelectSubset<T, save_address_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<save_address_table>>, PrismaPromise<Array<save_address_tableGetPayload<T>>>>

    /**
     * Create a Save_address_table.
     * @param {save_address_tableCreateArgs} args - Arguments to create a Save_address_table.
     * @example
     * // Create one Save_address_table
     * const Save_address_table = await prisma.save_address_table.create({
     *   data: {
     *     // ... data to create a Save_address_table
     *   }
     * })
     * 
    **/
    create<T extends save_address_tableCreateArgs>(
      args: SelectSubset<T, save_address_tableCreateArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Create many Save_address_tables.
     *     @param {save_address_tableCreateManyArgs} args - Arguments to create many Save_address_tables.
     *     @example
     *     // Create many Save_address_tables
     *     const save_address_table = await prisma.save_address_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends save_address_tableCreateManyArgs>(
      args?: SelectSubset<T, save_address_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Save_address_table.
     * @param {save_address_tableDeleteArgs} args - Arguments to delete one Save_address_table.
     * @example
     * // Delete one Save_address_table
     * const Save_address_table = await prisma.save_address_table.delete({
     *   where: {
     *     // ... filter to delete one Save_address_table
     *   }
     * })
     * 
    **/
    delete<T extends save_address_tableDeleteArgs>(
      args: SelectSubset<T, save_address_tableDeleteArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Update one Save_address_table.
     * @param {save_address_tableUpdateArgs} args - Arguments to update one Save_address_table.
     * @example
     * // Update one Save_address_table
     * const save_address_table = await prisma.save_address_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends save_address_tableUpdateArgs>(
      args: SelectSubset<T, save_address_tableUpdateArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Delete zero or more Save_address_tables.
     * @param {save_address_tableDeleteManyArgs} args - Arguments to filter Save_address_tables to delete.
     * @example
     * // Delete a few Save_address_tables
     * const { count } = await prisma.save_address_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends save_address_tableDeleteManyArgs>(
      args?: SelectSubset<T, save_address_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Save_address_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_address_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Save_address_tables
     * const save_address_table = await prisma.save_address_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends save_address_tableUpdateManyArgs>(
      args: SelectSubset<T, save_address_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Save_address_table.
     * @param {save_address_tableUpsertArgs} args - Arguments to update or create a Save_address_table.
     * @example
     * // Update or create a Save_address_table
     * const save_address_table = await prisma.save_address_table.upsert({
     *   create: {
     *     // ... data to create a Save_address_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Save_address_table we want to update
     *   }
     * })
    **/
    upsert<T extends save_address_tableUpsertArgs>(
      args: SelectSubset<T, save_address_tableUpsertArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Find one Save_address_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {save_address_tableFindUniqueOrThrowArgs} args - Arguments to find a Save_address_table
     * @example
     * // Get one Save_address_table
     * const save_address_table = await prisma.save_address_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends save_address_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, save_address_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Find the first Save_address_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_address_tableFindFirstOrThrowArgs} args - Arguments to find a Save_address_table
     * @example
     * // Get one Save_address_table
     * const save_address_table = await prisma.save_address_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends save_address_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, save_address_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__save_address_tableClient<save_address_table>, Prisma__save_address_tableClient<save_address_tableGetPayload<T>>>

    /**
     * Count the number of Save_address_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_address_tableCountArgs} args - Arguments to filter Save_address_tables to count.
     * @example
     * // Count the number of Save_address_tables
     * const count = await prisma.save_address_table.count({
     *   where: {
     *     // ... the filter for the Save_address_tables we want to count
     *   }
     * })
    **/
    count<T extends save_address_tableCountArgs>(
      args?: Subset<T, save_address_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Save_address_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Save_address_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_address_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Save_address_tableAggregateArgs>(args: Subset<T, Save_address_tableAggregateArgs>): PrismaPromise<GetSave_address_tableAggregateType<T>>

    /**
     * Group by Save_address_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_address_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Save_address_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Save_address_tableGroupByArgs['orderBy'] }
        : { orderBy?: Save_address_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Save_address_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSave_address_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for save_address_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__save_address_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * save_address_table base type for findUnique actions
   */
  export type save_address_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * Filter, which save_address_table to fetch.
     * 
    **/
    where: save_address_tableWhereUniqueInput
  }

  /**
   * save_address_table: findUnique
   */
  export interface save_address_tableFindUniqueArgs extends save_address_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_address_table base type for findFirst actions
   */
  export type save_address_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * Filter, which save_address_table to fetch.
     * 
    **/
    where?: save_address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for save_address_tables.
     * 
    **/
    cursor?: save_address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_address_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of save_address_tables.
     * 
    **/
    distinct?: Enumerable<Save_address_tableScalarFieldEnum>
  }

  /**
   * save_address_table: findFirst
   */
  export interface save_address_tableFindFirstArgs extends save_address_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_address_table findMany
   */
  export type save_address_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * Filter, which save_address_tables to fetch.
     * 
    **/
    where?: save_address_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_address_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<save_address_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing save_address_tables.
     * 
    **/
    cursor?: save_address_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_address_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_address_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Save_address_tableScalarFieldEnum>
  }


  /**
   * save_address_table create
   */
  export type save_address_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * The data needed to create a save_address_table.
     * 
    **/
    data: XOR<save_address_tableCreateInput, save_address_tableUncheckedCreateInput>
  }


  /**
   * save_address_table createMany
   */
  export type save_address_tableCreateManyArgs = {
    /**
     * The data used to create many save_address_tables.
     * 
    **/
    data: Enumerable<save_address_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * save_address_table update
   */
  export type save_address_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * The data needed to update a save_address_table.
     * 
    **/
    data: XOR<save_address_tableUpdateInput, save_address_tableUncheckedUpdateInput>
    /**
     * Choose, which save_address_table to update.
     * 
    **/
    where: save_address_tableWhereUniqueInput
  }


  /**
   * save_address_table updateMany
   */
  export type save_address_tableUpdateManyArgs = {
    /**
     * The data used to update save_address_tables.
     * 
    **/
    data: XOR<save_address_tableUpdateManyMutationInput, save_address_tableUncheckedUpdateManyInput>
    /**
     * Filter which save_address_tables to update
     * 
    **/
    where?: save_address_tableWhereInput
  }


  /**
   * save_address_table upsert
   */
  export type save_address_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * The filter to search for the save_address_table to update in case it exists.
     * 
    **/
    where: save_address_tableWhereUniqueInput
    /**
     * In case the save_address_table found by the `where` argument doesn't exist, create a new save_address_table with this data.
     * 
    **/
    create: XOR<save_address_tableCreateInput, save_address_tableUncheckedCreateInput>
    /**
     * In case the save_address_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<save_address_tableUpdateInput, save_address_tableUncheckedUpdateInput>
  }


  /**
   * save_address_table delete
   */
  export type save_address_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
    /**
     * Filter which save_address_table to delete.
     * 
    **/
    where: save_address_tableWhereUniqueInput
  }


  /**
   * save_address_table deleteMany
   */
  export type save_address_tableDeleteManyArgs = {
    /**
     * Filter which save_address_tables to delete
     * 
    **/
    where?: save_address_tableWhereInput
  }


  /**
   * save_address_table: findUniqueOrThrow
   */
  export type save_address_tableFindUniqueOrThrowArgs = save_address_tableFindUniqueArgsBase
      

  /**
   * save_address_table: findFirstOrThrow
   */
  export type save_address_tableFindFirstOrThrowArgs = save_address_tableFindFirstArgsBase
      

  /**
   * save_address_table without action
   */
  export type save_address_tableArgs = {
    /**
     * Select specific fields to fetch from the save_address_table
     * 
    **/
    select?: save_address_tableSelect | null
  }



  /**
   * Model save_cart_totalprice
   */


  export type AggregateSave_cart_totalprice = {
    _count: Save_cart_totalpriceCountAggregateOutputType | null
    _avg: Save_cart_totalpriceAvgAggregateOutputType | null
    _sum: Save_cart_totalpriceSumAggregateOutputType | null
    _min: Save_cart_totalpriceMinAggregateOutputType | null
    _max: Save_cart_totalpriceMaxAggregateOutputType | null
  }

  export type Save_cart_totalpriceAvgAggregateOutputType = {
    id: number | null
    save_cart_totalprice: number | null
  }

  export type Save_cart_totalpriceSumAggregateOutputType = {
    id: number | null
    save_cart_totalprice: number | null
  }

  export type Save_cart_totalpriceMinAggregateOutputType = {
    id: number | null
    save_cart_totalprice: number | null
  }

  export type Save_cart_totalpriceMaxAggregateOutputType = {
    id: number | null
    save_cart_totalprice: number | null
  }

  export type Save_cart_totalpriceCountAggregateOutputType = {
    id: number
    save_cart_totalprice: number
    _all: number
  }


  export type Save_cart_totalpriceAvgAggregateInputType = {
    id?: true
    save_cart_totalprice?: true
  }

  export type Save_cart_totalpriceSumAggregateInputType = {
    id?: true
    save_cart_totalprice?: true
  }

  export type Save_cart_totalpriceMinAggregateInputType = {
    id?: true
    save_cart_totalprice?: true
  }

  export type Save_cart_totalpriceMaxAggregateInputType = {
    id?: true
    save_cart_totalprice?: true
  }

  export type Save_cart_totalpriceCountAggregateInputType = {
    id?: true
    save_cart_totalprice?: true
    _all?: true
  }

  export type Save_cart_totalpriceAggregateArgs = {
    /**
     * Filter which save_cart_totalprice to aggregate.
     * 
    **/
    where?: save_cart_totalpriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_cart_totalprices to fetch.
     * 
    **/
    orderBy?: Enumerable<save_cart_totalpriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: save_cart_totalpriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_cart_totalprices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_cart_totalprices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned save_cart_totalprices
    **/
    _count?: true | Save_cart_totalpriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Save_cart_totalpriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Save_cart_totalpriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Save_cart_totalpriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Save_cart_totalpriceMaxAggregateInputType
  }

  export type GetSave_cart_totalpriceAggregateType<T extends Save_cart_totalpriceAggregateArgs> = {
        [P in keyof T & keyof AggregateSave_cart_totalprice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSave_cart_totalprice[P]>
      : GetScalarType<T[P], AggregateSave_cart_totalprice[P]>
  }




  export type Save_cart_totalpriceGroupByArgs = {
    where?: save_cart_totalpriceWhereInput
    orderBy?: Enumerable<save_cart_totalpriceOrderByWithAggregationInput>
    by: Array<Save_cart_totalpriceScalarFieldEnum>
    having?: save_cart_totalpriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Save_cart_totalpriceCountAggregateInputType | true
    _avg?: Save_cart_totalpriceAvgAggregateInputType
    _sum?: Save_cart_totalpriceSumAggregateInputType
    _min?: Save_cart_totalpriceMinAggregateInputType
    _max?: Save_cart_totalpriceMaxAggregateInputType
  }


  export type Save_cart_totalpriceGroupByOutputType = {
    id: number
    save_cart_totalprice: number
    _count: Save_cart_totalpriceCountAggregateOutputType | null
    _avg: Save_cart_totalpriceAvgAggregateOutputType | null
    _sum: Save_cart_totalpriceSumAggregateOutputType | null
    _min: Save_cart_totalpriceMinAggregateOutputType | null
    _max: Save_cart_totalpriceMaxAggregateOutputType | null
  }

  type GetSave_cart_totalpriceGroupByPayload<T extends Save_cart_totalpriceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Save_cart_totalpriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Save_cart_totalpriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Save_cart_totalpriceGroupByOutputType[P]>
            : GetScalarType<T[P], Save_cart_totalpriceGroupByOutputType[P]>
        }
      >
    >


  export type save_cart_totalpriceSelect = {
    id?: boolean
    save_cart_totalprice?: boolean
  }

  export type save_cart_totalpriceGetPayload<
    S extends boolean | null | undefined | save_cart_totalpriceArgs,
    U = keyof S
      > = S extends true
        ? save_cart_totalprice
    : S extends undefined
    ? never
    : S extends save_cart_totalpriceArgs | save_cart_totalpriceFindManyArgs
    ?'include' extends U
    ? save_cart_totalprice 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof save_cart_totalprice ? save_cart_totalprice[P] : never
  } 
    : save_cart_totalprice
  : save_cart_totalprice


  type save_cart_totalpriceCountArgs = Merge<
    Omit<save_cart_totalpriceFindManyArgs, 'select' | 'include'> & {
      select?: Save_cart_totalpriceCountAggregateInputType | true
    }
  >

  export interface save_cart_totalpriceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Save_cart_totalprice that matches the filter.
     * @param {save_cart_totalpriceFindUniqueArgs} args - Arguments to find a Save_cart_totalprice
     * @example
     * // Get one Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends save_cart_totalpriceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, save_cart_totalpriceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'save_cart_totalprice'> extends True ? CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>> : CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice | null >, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T> | null >>

    /**
     * Find the first Save_cart_totalprice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_cart_totalpriceFindFirstArgs} args - Arguments to find a Save_cart_totalprice
     * @example
     * // Get one Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends save_cart_totalpriceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, save_cart_totalpriceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'save_cart_totalprice'> extends True ? CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>> : CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice | null >, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T> | null >>

    /**
     * Find zero or more Save_cart_totalprices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_cart_totalpriceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Save_cart_totalprices
     * const save_cart_totalprices = await prisma.save_cart_totalprice.findMany()
     * 
     * // Get first 10 Save_cart_totalprices
     * const save_cart_totalprices = await prisma.save_cart_totalprice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const save_cart_totalpriceWithIdOnly = await prisma.save_cart_totalprice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends save_cart_totalpriceFindManyArgs>(
      args?: SelectSubset<T, save_cart_totalpriceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<save_cart_totalprice>>, PrismaPromise<Array<save_cart_totalpriceGetPayload<T>>>>

    /**
     * Create a Save_cart_totalprice.
     * @param {save_cart_totalpriceCreateArgs} args - Arguments to create a Save_cart_totalprice.
     * @example
     * // Create one Save_cart_totalprice
     * const Save_cart_totalprice = await prisma.save_cart_totalprice.create({
     *   data: {
     *     // ... data to create a Save_cart_totalprice
     *   }
     * })
     * 
    **/
    create<T extends save_cart_totalpriceCreateArgs>(
      args: SelectSubset<T, save_cart_totalpriceCreateArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Create many Save_cart_totalprices.
     *     @param {save_cart_totalpriceCreateManyArgs} args - Arguments to create many Save_cart_totalprices.
     *     @example
     *     // Create many Save_cart_totalprices
     *     const save_cart_totalprice = await prisma.save_cart_totalprice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends save_cart_totalpriceCreateManyArgs>(
      args?: SelectSubset<T, save_cart_totalpriceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Save_cart_totalprice.
     * @param {save_cart_totalpriceDeleteArgs} args - Arguments to delete one Save_cart_totalprice.
     * @example
     * // Delete one Save_cart_totalprice
     * const Save_cart_totalprice = await prisma.save_cart_totalprice.delete({
     *   where: {
     *     // ... filter to delete one Save_cart_totalprice
     *   }
     * })
     * 
    **/
    delete<T extends save_cart_totalpriceDeleteArgs>(
      args: SelectSubset<T, save_cart_totalpriceDeleteArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Update one Save_cart_totalprice.
     * @param {save_cart_totalpriceUpdateArgs} args - Arguments to update one Save_cart_totalprice.
     * @example
     * // Update one Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends save_cart_totalpriceUpdateArgs>(
      args: SelectSubset<T, save_cart_totalpriceUpdateArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Delete zero or more Save_cart_totalprices.
     * @param {save_cart_totalpriceDeleteManyArgs} args - Arguments to filter Save_cart_totalprices to delete.
     * @example
     * // Delete a few Save_cart_totalprices
     * const { count } = await prisma.save_cart_totalprice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends save_cart_totalpriceDeleteManyArgs>(
      args?: SelectSubset<T, save_cart_totalpriceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Save_cart_totalprices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_cart_totalpriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Save_cart_totalprices
     * const save_cart_totalprice = await prisma.save_cart_totalprice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends save_cart_totalpriceUpdateManyArgs>(
      args: SelectSubset<T, save_cart_totalpriceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Save_cart_totalprice.
     * @param {save_cart_totalpriceUpsertArgs} args - Arguments to update or create a Save_cart_totalprice.
     * @example
     * // Update or create a Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.upsert({
     *   create: {
     *     // ... data to create a Save_cart_totalprice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Save_cart_totalprice we want to update
     *   }
     * })
    **/
    upsert<T extends save_cart_totalpriceUpsertArgs>(
      args: SelectSubset<T, save_cart_totalpriceUpsertArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Find one Save_cart_totalprice that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {save_cart_totalpriceFindUniqueOrThrowArgs} args - Arguments to find a Save_cart_totalprice
     * @example
     * // Get one Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends save_cart_totalpriceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, save_cart_totalpriceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Find the first Save_cart_totalprice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_cart_totalpriceFindFirstOrThrowArgs} args - Arguments to find a Save_cart_totalprice
     * @example
     * // Get one Save_cart_totalprice
     * const save_cart_totalprice = await prisma.save_cart_totalprice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends save_cart_totalpriceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, save_cart_totalpriceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__save_cart_totalpriceClient<save_cart_totalprice>, Prisma__save_cart_totalpriceClient<save_cart_totalpriceGetPayload<T>>>

    /**
     * Count the number of Save_cart_totalprices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {save_cart_totalpriceCountArgs} args - Arguments to filter Save_cart_totalprices to count.
     * @example
     * // Count the number of Save_cart_totalprices
     * const count = await prisma.save_cart_totalprice.count({
     *   where: {
     *     // ... the filter for the Save_cart_totalprices we want to count
     *   }
     * })
    **/
    count<T extends save_cart_totalpriceCountArgs>(
      args?: Subset<T, save_cart_totalpriceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Save_cart_totalpriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Save_cart_totalprice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_cart_totalpriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Save_cart_totalpriceAggregateArgs>(args: Subset<T, Save_cart_totalpriceAggregateArgs>): PrismaPromise<GetSave_cart_totalpriceAggregateType<T>>

    /**
     * Group by Save_cart_totalprice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Save_cart_totalpriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Save_cart_totalpriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Save_cart_totalpriceGroupByArgs['orderBy'] }
        : { orderBy?: Save_cart_totalpriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Save_cart_totalpriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSave_cart_totalpriceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for save_cart_totalprice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__save_cart_totalpriceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * save_cart_totalprice base type for findUnique actions
   */
  export type save_cart_totalpriceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * Filter, which save_cart_totalprice to fetch.
     * 
    **/
    where: save_cart_totalpriceWhereUniqueInput
  }

  /**
   * save_cart_totalprice: findUnique
   */
  export interface save_cart_totalpriceFindUniqueArgs extends save_cart_totalpriceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_cart_totalprice base type for findFirst actions
   */
  export type save_cart_totalpriceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * Filter, which save_cart_totalprice to fetch.
     * 
    **/
    where?: save_cart_totalpriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_cart_totalprices to fetch.
     * 
    **/
    orderBy?: Enumerable<save_cart_totalpriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for save_cart_totalprices.
     * 
    **/
    cursor?: save_cart_totalpriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_cart_totalprices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_cart_totalprices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of save_cart_totalprices.
     * 
    **/
    distinct?: Enumerable<Save_cart_totalpriceScalarFieldEnum>
  }

  /**
   * save_cart_totalprice: findFirst
   */
  export interface save_cart_totalpriceFindFirstArgs extends save_cart_totalpriceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * save_cart_totalprice findMany
   */
  export type save_cart_totalpriceFindManyArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * Filter, which save_cart_totalprices to fetch.
     * 
    **/
    where?: save_cart_totalpriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of save_cart_totalprices to fetch.
     * 
    **/
    orderBy?: Enumerable<save_cart_totalpriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing save_cart_totalprices.
     * 
    **/
    cursor?: save_cart_totalpriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` save_cart_totalprices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` save_cart_totalprices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Save_cart_totalpriceScalarFieldEnum>
  }


  /**
   * save_cart_totalprice create
   */
  export type save_cart_totalpriceCreateArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * The data needed to create a save_cart_totalprice.
     * 
    **/
    data: XOR<save_cart_totalpriceCreateInput, save_cart_totalpriceUncheckedCreateInput>
  }


  /**
   * save_cart_totalprice createMany
   */
  export type save_cart_totalpriceCreateManyArgs = {
    /**
     * The data used to create many save_cart_totalprices.
     * 
    **/
    data: Enumerable<save_cart_totalpriceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * save_cart_totalprice update
   */
  export type save_cart_totalpriceUpdateArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * The data needed to update a save_cart_totalprice.
     * 
    **/
    data: XOR<save_cart_totalpriceUpdateInput, save_cart_totalpriceUncheckedUpdateInput>
    /**
     * Choose, which save_cart_totalprice to update.
     * 
    **/
    where: save_cart_totalpriceWhereUniqueInput
  }


  /**
   * save_cart_totalprice updateMany
   */
  export type save_cart_totalpriceUpdateManyArgs = {
    /**
     * The data used to update save_cart_totalprices.
     * 
    **/
    data: XOR<save_cart_totalpriceUpdateManyMutationInput, save_cart_totalpriceUncheckedUpdateManyInput>
    /**
     * Filter which save_cart_totalprices to update
     * 
    **/
    where?: save_cart_totalpriceWhereInput
  }


  /**
   * save_cart_totalprice upsert
   */
  export type save_cart_totalpriceUpsertArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * The filter to search for the save_cart_totalprice to update in case it exists.
     * 
    **/
    where: save_cart_totalpriceWhereUniqueInput
    /**
     * In case the save_cart_totalprice found by the `where` argument doesn't exist, create a new save_cart_totalprice with this data.
     * 
    **/
    create: XOR<save_cart_totalpriceCreateInput, save_cart_totalpriceUncheckedCreateInput>
    /**
     * In case the save_cart_totalprice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<save_cart_totalpriceUpdateInput, save_cart_totalpriceUncheckedUpdateInput>
  }


  /**
   * save_cart_totalprice delete
   */
  export type save_cart_totalpriceDeleteArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
    /**
     * Filter which save_cart_totalprice to delete.
     * 
    **/
    where: save_cart_totalpriceWhereUniqueInput
  }


  /**
   * save_cart_totalprice deleteMany
   */
  export type save_cart_totalpriceDeleteManyArgs = {
    /**
     * Filter which save_cart_totalprices to delete
     * 
    **/
    where?: save_cart_totalpriceWhereInput
  }


  /**
   * save_cart_totalprice: findUniqueOrThrow
   */
  export type save_cart_totalpriceFindUniqueOrThrowArgs = save_cart_totalpriceFindUniqueArgsBase
      

  /**
   * save_cart_totalprice: findFirstOrThrow
   */
  export type save_cart_totalpriceFindFirstOrThrowArgs = save_cart_totalpriceFindFirstArgsBase
      

  /**
   * save_cart_totalprice without action
   */
  export type save_cart_totalpriceArgs = {
    /**
     * Select specific fields to fetch from the save_cart_totalprice
     * 
    **/
    select?: save_cart_totalpriceSelect | null
  }



  /**
   * Model credit_table
   */


  export type AggregateCredit_table = {
    _count: Credit_tableCountAggregateOutputType | null
    _avg: Credit_tableAvgAggregateOutputType | null
    _sum: Credit_tableSumAggregateOutputType | null
    _min: Credit_tableMinAggregateOutputType | null
    _max: Credit_tableMaxAggregateOutputType | null
  }

  export type Credit_tableAvgAggregateOutputType = {
    id: number | null
    credit_balance: number | null
  }

  export type Credit_tableSumAggregateOutputType = {
    id: number | null
    credit_balance: number | null
  }

  export type Credit_tableMinAggregateOutputType = {
    id: number | null
    credit_balance: number | null
  }

  export type Credit_tableMaxAggregateOutputType = {
    id: number | null
    credit_balance: number | null
  }

  export type Credit_tableCountAggregateOutputType = {
    id: number
    credit_balance: number
    _all: number
  }


  export type Credit_tableAvgAggregateInputType = {
    id?: true
    credit_balance?: true
  }

  export type Credit_tableSumAggregateInputType = {
    id?: true
    credit_balance?: true
  }

  export type Credit_tableMinAggregateInputType = {
    id?: true
    credit_balance?: true
  }

  export type Credit_tableMaxAggregateInputType = {
    id?: true
    credit_balance?: true
  }

  export type Credit_tableCountAggregateInputType = {
    id?: true
    credit_balance?: true
    _all?: true
  }

  export type Credit_tableAggregateArgs = {
    /**
     * Filter which credit_table to aggregate.
     * 
    **/
    where?: credit_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credit_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<credit_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: credit_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credit_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credit_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned credit_tables
    **/
    _count?: true | Credit_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Credit_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Credit_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Credit_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Credit_tableMaxAggregateInputType
  }

  export type GetCredit_tableAggregateType<T extends Credit_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateCredit_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredit_table[P]>
      : GetScalarType<T[P], AggregateCredit_table[P]>
  }




  export type Credit_tableGroupByArgs = {
    where?: credit_tableWhereInput
    orderBy?: Enumerable<credit_tableOrderByWithAggregationInput>
    by: Array<Credit_tableScalarFieldEnum>
    having?: credit_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Credit_tableCountAggregateInputType | true
    _avg?: Credit_tableAvgAggregateInputType
    _sum?: Credit_tableSumAggregateInputType
    _min?: Credit_tableMinAggregateInputType
    _max?: Credit_tableMaxAggregateInputType
  }


  export type Credit_tableGroupByOutputType = {
    id: number
    credit_balance: number
    _count: Credit_tableCountAggregateOutputType | null
    _avg: Credit_tableAvgAggregateOutputType | null
    _sum: Credit_tableSumAggregateOutputType | null
    _min: Credit_tableMinAggregateOutputType | null
    _max: Credit_tableMaxAggregateOutputType | null
  }

  type GetCredit_tableGroupByPayload<T extends Credit_tableGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Credit_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Credit_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Credit_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Credit_tableGroupByOutputType[P]>
        }
      >
    >


  export type credit_tableSelect = {
    id?: boolean
    credit_balance?: boolean
  }

  export type credit_tableGetPayload<
    S extends boolean | null | undefined | credit_tableArgs,
    U = keyof S
      > = S extends true
        ? credit_table
    : S extends undefined
    ? never
    : S extends credit_tableArgs | credit_tableFindManyArgs
    ?'include' extends U
    ? credit_table 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof credit_table ? credit_table[P] : never
  } 
    : credit_table
  : credit_table


  type credit_tableCountArgs = Merge<
    Omit<credit_tableFindManyArgs, 'select' | 'include'> & {
      select?: Credit_tableCountAggregateInputType | true
    }
  >

  export interface credit_tableDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Credit_table that matches the filter.
     * @param {credit_tableFindUniqueArgs} args - Arguments to find a Credit_table
     * @example
     * // Get one Credit_table
     * const credit_table = await prisma.credit_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends credit_tableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, credit_tableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'credit_table'> extends True ? CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>> : CheckSelect<T, Prisma__credit_tableClient<credit_table | null >, Prisma__credit_tableClient<credit_tableGetPayload<T> | null >>

    /**
     * Find the first Credit_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credit_tableFindFirstArgs} args - Arguments to find a Credit_table
     * @example
     * // Get one Credit_table
     * const credit_table = await prisma.credit_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends credit_tableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, credit_tableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'credit_table'> extends True ? CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>> : CheckSelect<T, Prisma__credit_tableClient<credit_table | null >, Prisma__credit_tableClient<credit_tableGetPayload<T> | null >>

    /**
     * Find zero or more Credit_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credit_tableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credit_tables
     * const credit_tables = await prisma.credit_table.findMany()
     * 
     * // Get first 10 Credit_tables
     * const credit_tables = await prisma.credit_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credit_tableWithIdOnly = await prisma.credit_table.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends credit_tableFindManyArgs>(
      args?: SelectSubset<T, credit_tableFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<credit_table>>, PrismaPromise<Array<credit_tableGetPayload<T>>>>

    /**
     * Create a Credit_table.
     * @param {credit_tableCreateArgs} args - Arguments to create a Credit_table.
     * @example
     * // Create one Credit_table
     * const Credit_table = await prisma.credit_table.create({
     *   data: {
     *     // ... data to create a Credit_table
     *   }
     * })
     * 
    **/
    create<T extends credit_tableCreateArgs>(
      args: SelectSubset<T, credit_tableCreateArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Create many Credit_tables.
     *     @param {credit_tableCreateManyArgs} args - Arguments to create many Credit_tables.
     *     @example
     *     // Create many Credit_tables
     *     const credit_table = await prisma.credit_table.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends credit_tableCreateManyArgs>(
      args?: SelectSubset<T, credit_tableCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Credit_table.
     * @param {credit_tableDeleteArgs} args - Arguments to delete one Credit_table.
     * @example
     * // Delete one Credit_table
     * const Credit_table = await prisma.credit_table.delete({
     *   where: {
     *     // ... filter to delete one Credit_table
     *   }
     * })
     * 
    **/
    delete<T extends credit_tableDeleteArgs>(
      args: SelectSubset<T, credit_tableDeleteArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Update one Credit_table.
     * @param {credit_tableUpdateArgs} args - Arguments to update one Credit_table.
     * @example
     * // Update one Credit_table
     * const credit_table = await prisma.credit_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends credit_tableUpdateArgs>(
      args: SelectSubset<T, credit_tableUpdateArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Delete zero or more Credit_tables.
     * @param {credit_tableDeleteManyArgs} args - Arguments to filter Credit_tables to delete.
     * @example
     * // Delete a few Credit_tables
     * const { count } = await prisma.credit_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends credit_tableDeleteManyArgs>(
      args?: SelectSubset<T, credit_tableDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credit_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credit_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credit_tables
     * const credit_table = await prisma.credit_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends credit_tableUpdateManyArgs>(
      args: SelectSubset<T, credit_tableUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credit_table.
     * @param {credit_tableUpsertArgs} args - Arguments to update or create a Credit_table.
     * @example
     * // Update or create a Credit_table
     * const credit_table = await prisma.credit_table.upsert({
     *   create: {
     *     // ... data to create a Credit_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credit_table we want to update
     *   }
     * })
    **/
    upsert<T extends credit_tableUpsertArgs>(
      args: SelectSubset<T, credit_tableUpsertArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Find one Credit_table that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {credit_tableFindUniqueOrThrowArgs} args - Arguments to find a Credit_table
     * @example
     * // Get one Credit_table
     * const credit_table = await prisma.credit_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends credit_tableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, credit_tableFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Find the first Credit_table that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credit_tableFindFirstOrThrowArgs} args - Arguments to find a Credit_table
     * @example
     * // Get one Credit_table
     * const credit_table = await prisma.credit_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends credit_tableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, credit_tableFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__credit_tableClient<credit_table>, Prisma__credit_tableClient<credit_tableGetPayload<T>>>

    /**
     * Count the number of Credit_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {credit_tableCountArgs} args - Arguments to filter Credit_tables to count.
     * @example
     * // Count the number of Credit_tables
     * const count = await prisma.credit_table.count({
     *   where: {
     *     // ... the filter for the Credit_tables we want to count
     *   }
     * })
    **/
    count<T extends credit_tableCountArgs>(
      args?: Subset<T, credit_tableCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Credit_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credit_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credit_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Credit_tableAggregateArgs>(args: Subset<T, Credit_tableAggregateArgs>): PrismaPromise<GetCredit_tableAggregateType<T>>

    /**
     * Group by Credit_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Credit_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Credit_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Credit_tableGroupByArgs['orderBy'] }
        : { orderBy?: Credit_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Credit_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredit_tableGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for credit_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__credit_tableClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * credit_table base type for findUnique actions
   */
  export type credit_tableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * Filter, which credit_table to fetch.
     * 
    **/
    where: credit_tableWhereUniqueInput
  }

  /**
   * credit_table: findUnique
   */
  export interface credit_tableFindUniqueArgs extends credit_tableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * credit_table base type for findFirst actions
   */
  export type credit_tableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * Filter, which credit_table to fetch.
     * 
    **/
    where?: credit_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credit_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<credit_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for credit_tables.
     * 
    **/
    cursor?: credit_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credit_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credit_tables.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of credit_tables.
     * 
    **/
    distinct?: Enumerable<Credit_tableScalarFieldEnum>
  }

  /**
   * credit_table: findFirst
   */
  export interface credit_tableFindFirstArgs extends credit_tableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * credit_table findMany
   */
  export type credit_tableFindManyArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * Filter, which credit_tables to fetch.
     * 
    **/
    where?: credit_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of credit_tables to fetch.
     * 
    **/
    orderBy?: Enumerable<credit_tableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing credit_tables.
     * 
    **/
    cursor?: credit_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` credit_tables from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` credit_tables.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Credit_tableScalarFieldEnum>
  }


  /**
   * credit_table create
   */
  export type credit_tableCreateArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * The data needed to create a credit_table.
     * 
    **/
    data: XOR<credit_tableCreateInput, credit_tableUncheckedCreateInput>
  }


  /**
   * credit_table createMany
   */
  export type credit_tableCreateManyArgs = {
    /**
     * The data used to create many credit_tables.
     * 
    **/
    data: Enumerable<credit_tableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * credit_table update
   */
  export type credit_tableUpdateArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * The data needed to update a credit_table.
     * 
    **/
    data: XOR<credit_tableUpdateInput, credit_tableUncheckedUpdateInput>
    /**
     * Choose, which credit_table to update.
     * 
    **/
    where: credit_tableWhereUniqueInput
  }


  /**
   * credit_table updateMany
   */
  export type credit_tableUpdateManyArgs = {
    /**
     * The data used to update credit_tables.
     * 
    **/
    data: XOR<credit_tableUpdateManyMutationInput, credit_tableUncheckedUpdateManyInput>
    /**
     * Filter which credit_tables to update
     * 
    **/
    where?: credit_tableWhereInput
  }


  /**
   * credit_table upsert
   */
  export type credit_tableUpsertArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * The filter to search for the credit_table to update in case it exists.
     * 
    **/
    where: credit_tableWhereUniqueInput
    /**
     * In case the credit_table found by the `where` argument doesn't exist, create a new credit_table with this data.
     * 
    **/
    create: XOR<credit_tableCreateInput, credit_tableUncheckedCreateInput>
    /**
     * In case the credit_table was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<credit_tableUpdateInput, credit_tableUncheckedUpdateInput>
  }


  /**
   * credit_table delete
   */
  export type credit_tableDeleteArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
    /**
     * Filter which credit_table to delete.
     * 
    **/
    where: credit_tableWhereUniqueInput
  }


  /**
   * credit_table deleteMany
   */
  export type credit_tableDeleteManyArgs = {
    /**
     * Filter which credit_tables to delete
     * 
    **/
    where?: credit_tableWhereInput
  }


  /**
   * credit_table: findUniqueOrThrow
   */
  export type credit_tableFindUniqueOrThrowArgs = credit_tableFindUniqueArgsBase
      

  /**
   * credit_table: findFirstOrThrow
   */
  export type credit_tableFindFirstOrThrowArgs = credit_tableFindFirstArgsBase
      

  /**
   * credit_table without action
   */
  export type credit_tableArgs = {
    /**
     * Select specific fields to fetch from the credit_table
     * 
    **/
    select?: credit_tableSelect | null
  }



  /**
   * Model teachers_list
   */


  export type AggregateTeachers_list = {
    _count: Teachers_listCountAggregateOutputType | null
    _avg: Teachers_listAvgAggregateOutputType | null
    _sum: Teachers_listSumAggregateOutputType | null
    _min: Teachers_listMinAggregateOutputType | null
    _max: Teachers_listMaxAggregateOutputType | null
  }

  export type Teachers_listAvgAggregateOutputType = {
    ID: number | null
  }

  export type Teachers_listSumAggregateOutputType = {
    ID: number | null
  }

  export type Teachers_listMinAggregateOutputType = {
    ID: number | null
    teachers_name: string | null
  }

  export type Teachers_listMaxAggregateOutputType = {
    ID: number | null
    teachers_name: string | null
  }

  export type Teachers_listCountAggregateOutputType = {
    ID: number
    teachers_name: number
    _all: number
  }


  export type Teachers_listAvgAggregateInputType = {
    ID?: true
  }

  export type Teachers_listSumAggregateInputType = {
    ID?: true
  }

  export type Teachers_listMinAggregateInputType = {
    ID?: true
    teachers_name?: true
  }

  export type Teachers_listMaxAggregateInputType = {
    ID?: true
    teachers_name?: true
  }

  export type Teachers_listCountAggregateInputType = {
    ID?: true
    teachers_name?: true
    _all?: true
  }

  export type Teachers_listAggregateArgs = {
    /**
     * Filter which teachers_list to aggregate.
     * 
    **/
    where?: teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers_lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teachers_lists
    **/
    _count?: true | Teachers_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Teachers_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Teachers_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Teachers_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Teachers_listMaxAggregateInputType
  }

  export type GetTeachers_listAggregateType<T extends Teachers_listAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachers_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachers_list[P]>
      : GetScalarType<T[P], AggregateTeachers_list[P]>
  }




  export type Teachers_listGroupByArgs = {
    where?: teachers_listWhereInput
    orderBy?: Enumerable<teachers_listOrderByWithAggregationInput>
    by: Array<Teachers_listScalarFieldEnum>
    having?: teachers_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Teachers_listCountAggregateInputType | true
    _avg?: Teachers_listAvgAggregateInputType
    _sum?: Teachers_listSumAggregateInputType
    _min?: Teachers_listMinAggregateInputType
    _max?: Teachers_listMaxAggregateInputType
  }


  export type Teachers_listGroupByOutputType = {
    ID: number
    teachers_name: string
    _count: Teachers_listCountAggregateOutputType | null
    _avg: Teachers_listAvgAggregateOutputType | null
    _sum: Teachers_listSumAggregateOutputType | null
    _min: Teachers_listMinAggregateOutputType | null
    _max: Teachers_listMaxAggregateOutputType | null
  }

  type GetTeachers_listGroupByPayload<T extends Teachers_listGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Teachers_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Teachers_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Teachers_listGroupByOutputType[P]>
            : GetScalarType<T[P], Teachers_listGroupByOutputType[P]>
        }
      >
    >


  export type teachers_listSelect = {
    ID?: boolean
    teachers_name?: boolean
  }

  export type teachers_listGetPayload<
    S extends boolean | null | undefined | teachers_listArgs,
    U = keyof S
      > = S extends true
        ? teachers_list
    : S extends undefined
    ? never
    : S extends teachers_listArgs | teachers_listFindManyArgs
    ?'include' extends U
    ? teachers_list 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof teachers_list ? teachers_list[P] : never
  } 
    : teachers_list
  : teachers_list


  type teachers_listCountArgs = Merge<
    Omit<teachers_listFindManyArgs, 'select' | 'include'> & {
      select?: Teachers_listCountAggregateInputType | true
    }
  >

  export interface teachers_listDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Teachers_list that matches the filter.
     * @param {teachers_listFindUniqueArgs} args - Arguments to find a Teachers_list
     * @example
     * // Get one Teachers_list
     * const teachers_list = await prisma.teachers_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends teachers_listFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, teachers_listFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'teachers_list'> extends True ? CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>> : CheckSelect<T, Prisma__teachers_listClient<teachers_list | null >, Prisma__teachers_listClient<teachers_listGetPayload<T> | null >>

    /**
     * Find the first Teachers_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachers_listFindFirstArgs} args - Arguments to find a Teachers_list
     * @example
     * // Get one Teachers_list
     * const teachers_list = await prisma.teachers_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends teachers_listFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, teachers_listFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'teachers_list'> extends True ? CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>> : CheckSelect<T, Prisma__teachers_listClient<teachers_list | null >, Prisma__teachers_listClient<teachers_listGetPayload<T> | null >>

    /**
     * Find zero or more Teachers_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachers_listFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers_lists
     * const teachers_lists = await prisma.teachers_list.findMany()
     * 
     * // Get first 10 Teachers_lists
     * const teachers_lists = await prisma.teachers_list.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const teachers_listWithIDOnly = await prisma.teachers_list.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends teachers_listFindManyArgs>(
      args?: SelectSubset<T, teachers_listFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<teachers_list>>, PrismaPromise<Array<teachers_listGetPayload<T>>>>

    /**
     * Create a Teachers_list.
     * @param {teachers_listCreateArgs} args - Arguments to create a Teachers_list.
     * @example
     * // Create one Teachers_list
     * const Teachers_list = await prisma.teachers_list.create({
     *   data: {
     *     // ... data to create a Teachers_list
     *   }
     * })
     * 
    **/
    create<T extends teachers_listCreateArgs>(
      args: SelectSubset<T, teachers_listCreateArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Create many Teachers_lists.
     *     @param {teachers_listCreateManyArgs} args - Arguments to create many Teachers_lists.
     *     @example
     *     // Create many Teachers_lists
     *     const teachers_list = await prisma.teachers_list.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends teachers_listCreateManyArgs>(
      args?: SelectSubset<T, teachers_listCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Teachers_list.
     * @param {teachers_listDeleteArgs} args - Arguments to delete one Teachers_list.
     * @example
     * // Delete one Teachers_list
     * const Teachers_list = await prisma.teachers_list.delete({
     *   where: {
     *     // ... filter to delete one Teachers_list
     *   }
     * })
     * 
    **/
    delete<T extends teachers_listDeleteArgs>(
      args: SelectSubset<T, teachers_listDeleteArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Update one Teachers_list.
     * @param {teachers_listUpdateArgs} args - Arguments to update one Teachers_list.
     * @example
     * // Update one Teachers_list
     * const teachers_list = await prisma.teachers_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends teachers_listUpdateArgs>(
      args: SelectSubset<T, teachers_listUpdateArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Delete zero or more Teachers_lists.
     * @param {teachers_listDeleteManyArgs} args - Arguments to filter Teachers_lists to delete.
     * @example
     * // Delete a few Teachers_lists
     * const { count } = await prisma.teachers_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends teachers_listDeleteManyArgs>(
      args?: SelectSubset<T, teachers_listDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachers_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers_lists
     * const teachers_list = await prisma.teachers_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends teachers_listUpdateManyArgs>(
      args: SelectSubset<T, teachers_listUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Teachers_list.
     * @param {teachers_listUpsertArgs} args - Arguments to update or create a Teachers_list.
     * @example
     * // Update or create a Teachers_list
     * const teachers_list = await prisma.teachers_list.upsert({
     *   create: {
     *     // ... data to create a Teachers_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teachers_list we want to update
     *   }
     * })
    **/
    upsert<T extends teachers_listUpsertArgs>(
      args: SelectSubset<T, teachers_listUpsertArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Find one Teachers_list that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {teachers_listFindUniqueOrThrowArgs} args - Arguments to find a Teachers_list
     * @example
     * // Get one Teachers_list
     * const teachers_list = await prisma.teachers_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends teachers_listFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, teachers_listFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Find the first Teachers_list that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachers_listFindFirstOrThrowArgs} args - Arguments to find a Teachers_list
     * @example
     * // Get one Teachers_list
     * const teachers_list = await prisma.teachers_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends teachers_listFindFirstOrThrowArgs>(
      args?: SelectSubset<T, teachers_listFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__teachers_listClient<teachers_list>, Prisma__teachers_listClient<teachers_listGetPayload<T>>>

    /**
     * Count the number of Teachers_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teachers_listCountArgs} args - Arguments to filter Teachers_lists to count.
     * @example
     * // Count the number of Teachers_lists
     * const count = await prisma.teachers_list.count({
     *   where: {
     *     // ... the filter for the Teachers_lists we want to count
     *   }
     * })
    **/
    count<T extends teachers_listCountArgs>(
      args?: Subset<T, teachers_listCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Teachers_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teachers_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Teachers_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Teachers_listAggregateArgs>(args: Subset<T, Teachers_listAggregateArgs>): PrismaPromise<GetTeachers_listAggregateType<T>>

    /**
     * Group by Teachers_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Teachers_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Teachers_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Teachers_listGroupByArgs['orderBy'] }
        : { orderBy?: Teachers_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Teachers_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachers_listGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for teachers_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__teachers_listClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * teachers_list base type for findUnique actions
   */
  export type teachers_listFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * Filter, which teachers_list to fetch.
     * 
    **/
    where: teachers_listWhereUniqueInput
  }

  /**
   * teachers_list: findUnique
   */
  export interface teachers_listFindUniqueArgs extends teachers_listFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * teachers_list base type for findFirst actions
   */
  export type teachers_listFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * Filter, which teachers_list to fetch.
     * 
    **/
    where?: teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teachers_lists.
     * 
    **/
    cursor?: teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers_lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teachers_lists.
     * 
    **/
    distinct?: Enumerable<Teachers_listScalarFieldEnum>
  }

  /**
   * teachers_list: findFirst
   */
  export interface teachers_listFindFirstArgs extends teachers_listFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * teachers_list findMany
   */
  export type teachers_listFindManyArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * Filter, which teachers_lists to fetch.
     * 
    **/
    where?: teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teachers_lists.
     * 
    **/
    cursor?: teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teachers_lists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Teachers_listScalarFieldEnum>
  }


  /**
   * teachers_list create
   */
  export type teachers_listCreateArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * The data needed to create a teachers_list.
     * 
    **/
    data: XOR<teachers_listCreateInput, teachers_listUncheckedCreateInput>
  }


  /**
   * teachers_list createMany
   */
  export type teachers_listCreateManyArgs = {
    /**
     * The data used to create many teachers_lists.
     * 
    **/
    data: Enumerable<teachers_listCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * teachers_list update
   */
  export type teachers_listUpdateArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * The data needed to update a teachers_list.
     * 
    **/
    data: XOR<teachers_listUpdateInput, teachers_listUncheckedUpdateInput>
    /**
     * Choose, which teachers_list to update.
     * 
    **/
    where: teachers_listWhereUniqueInput
  }


  /**
   * teachers_list updateMany
   */
  export type teachers_listUpdateManyArgs = {
    /**
     * The data used to update teachers_lists.
     * 
    **/
    data: XOR<teachers_listUpdateManyMutationInput, teachers_listUncheckedUpdateManyInput>
    /**
     * Filter which teachers_lists to update
     * 
    **/
    where?: teachers_listWhereInput
  }


  /**
   * teachers_list upsert
   */
  export type teachers_listUpsertArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * The filter to search for the teachers_list to update in case it exists.
     * 
    **/
    where: teachers_listWhereUniqueInput
    /**
     * In case the teachers_list found by the `where` argument doesn't exist, create a new teachers_list with this data.
     * 
    **/
    create: XOR<teachers_listCreateInput, teachers_listUncheckedCreateInput>
    /**
     * In case the teachers_list was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<teachers_listUpdateInput, teachers_listUncheckedUpdateInput>
  }


  /**
   * teachers_list delete
   */
  export type teachers_listDeleteArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
    /**
     * Filter which teachers_list to delete.
     * 
    **/
    where: teachers_listWhereUniqueInput
  }


  /**
   * teachers_list deleteMany
   */
  export type teachers_listDeleteManyArgs = {
    /**
     * Filter which teachers_lists to delete
     * 
    **/
    where?: teachers_listWhereInput
  }


  /**
   * teachers_list: findUniqueOrThrow
   */
  export type teachers_listFindUniqueOrThrowArgs = teachers_listFindUniqueArgsBase
      

  /**
   * teachers_list: findFirstOrThrow
   */
  export type teachers_listFindFirstOrThrowArgs = teachers_listFindFirstArgsBase
      

  /**
   * teachers_list without action
   */
  export type teachers_listArgs = {
    /**
     * Select specific fields to fetch from the teachers_list
     * 
    **/
    select?: teachers_listSelect | null
  }



  /**
   * Model questions_and_teachers_list
   */


  export type AggregateQuestions_and_teachers_list = {
    _count: Questions_and_teachers_listCountAggregateOutputType | null
    _avg: Questions_and_teachers_listAvgAggregateOutputType | null
    _sum: Questions_and_teachers_listSumAggregateOutputType | null
    _min: Questions_and_teachers_listMinAggregateOutputType | null
    _max: Questions_and_teachers_listMaxAggregateOutputType | null
  }

  export type Questions_and_teachers_listAvgAggregateOutputType = {
    id: number | null
  }

  export type Questions_and_teachers_listSumAggregateOutputType = {
    id: number | null
  }

  export type Questions_and_teachers_listMinAggregateOutputType = {
    id: number | null
    teachers_name: string | null
    feedback_questions: string | null
  }

  export type Questions_and_teachers_listMaxAggregateOutputType = {
    id: number | null
    teachers_name: string | null
    feedback_questions: string | null
  }

  export type Questions_and_teachers_listCountAggregateOutputType = {
    id: number
    teachers_name: number
    feedback_questions: number
    _all: number
  }


  export type Questions_and_teachers_listAvgAggregateInputType = {
    id?: true
  }

  export type Questions_and_teachers_listSumAggregateInputType = {
    id?: true
  }

  export type Questions_and_teachers_listMinAggregateInputType = {
    id?: true
    teachers_name?: true
    feedback_questions?: true
  }

  export type Questions_and_teachers_listMaxAggregateInputType = {
    id?: true
    teachers_name?: true
    feedback_questions?: true
  }

  export type Questions_and_teachers_listCountAggregateInputType = {
    id?: true
    teachers_name?: true
    feedback_questions?: true
    _all?: true
  }

  export type Questions_and_teachers_listAggregateArgs = {
    /**
     * Filter which questions_and_teachers_list to aggregate.
     * 
    **/
    where?: questions_and_teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions_and_teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<questions_and_teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: questions_and_teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions_and_teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions_and_teachers_lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions_and_teachers_lists
    **/
    _count?: true | Questions_and_teachers_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Questions_and_teachers_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Questions_and_teachers_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Questions_and_teachers_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Questions_and_teachers_listMaxAggregateInputType
  }

  export type GetQuestions_and_teachers_listAggregateType<T extends Questions_and_teachers_listAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions_and_teachers_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions_and_teachers_list[P]>
      : GetScalarType<T[P], AggregateQuestions_and_teachers_list[P]>
  }




  export type Questions_and_teachers_listGroupByArgs = {
    where?: questions_and_teachers_listWhereInput
    orderBy?: Enumerable<questions_and_teachers_listOrderByWithAggregationInput>
    by: Array<Questions_and_teachers_listScalarFieldEnum>
    having?: questions_and_teachers_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Questions_and_teachers_listCountAggregateInputType | true
    _avg?: Questions_and_teachers_listAvgAggregateInputType
    _sum?: Questions_and_teachers_listSumAggregateInputType
    _min?: Questions_and_teachers_listMinAggregateInputType
    _max?: Questions_and_teachers_listMaxAggregateInputType
  }


  export type Questions_and_teachers_listGroupByOutputType = {
    id: number
    teachers_name: string
    feedback_questions: string
    _count: Questions_and_teachers_listCountAggregateOutputType | null
    _avg: Questions_and_teachers_listAvgAggregateOutputType | null
    _sum: Questions_and_teachers_listSumAggregateOutputType | null
    _min: Questions_and_teachers_listMinAggregateOutputType | null
    _max: Questions_and_teachers_listMaxAggregateOutputType | null
  }

  type GetQuestions_and_teachers_listGroupByPayload<T extends Questions_and_teachers_listGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Questions_and_teachers_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Questions_and_teachers_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Questions_and_teachers_listGroupByOutputType[P]>
            : GetScalarType<T[P], Questions_and_teachers_listGroupByOutputType[P]>
        }
      >
    >


  export type questions_and_teachers_listSelect = {
    id?: boolean
    teachers_name?: boolean
    feedback_questions?: boolean
  }

  export type questions_and_teachers_listGetPayload<
    S extends boolean | null | undefined | questions_and_teachers_listArgs,
    U = keyof S
      > = S extends true
        ? questions_and_teachers_list
    : S extends undefined
    ? never
    : S extends questions_and_teachers_listArgs | questions_and_teachers_listFindManyArgs
    ?'include' extends U
    ? questions_and_teachers_list 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof questions_and_teachers_list ? questions_and_teachers_list[P] : never
  } 
    : questions_and_teachers_list
  : questions_and_teachers_list


  type questions_and_teachers_listCountArgs = Merge<
    Omit<questions_and_teachers_listFindManyArgs, 'select' | 'include'> & {
      select?: Questions_and_teachers_listCountAggregateInputType | true
    }
  >

  export interface questions_and_teachers_listDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Questions_and_teachers_list that matches the filter.
     * @param {questions_and_teachers_listFindUniqueArgs} args - Arguments to find a Questions_and_teachers_list
     * @example
     * // Get one Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questions_and_teachers_listFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, questions_and_teachers_listFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'questions_and_teachers_list'> extends True ? CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>> : CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list | null >, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T> | null >>

    /**
     * Find the first Questions_and_teachers_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questions_and_teachers_listFindFirstArgs} args - Arguments to find a Questions_and_teachers_list
     * @example
     * // Get one Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questions_and_teachers_listFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, questions_and_teachers_listFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'questions_and_teachers_list'> extends True ? CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>> : CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list | null >, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T> | null >>

    /**
     * Find zero or more Questions_and_teachers_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questions_and_teachers_listFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions_and_teachers_lists
     * const questions_and_teachers_lists = await prisma.questions_and_teachers_list.findMany()
     * 
     * // Get first 10 Questions_and_teachers_lists
     * const questions_and_teachers_lists = await prisma.questions_and_teachers_list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questions_and_teachers_listWithIdOnly = await prisma.questions_and_teachers_list.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends questions_and_teachers_listFindManyArgs>(
      args?: SelectSubset<T, questions_and_teachers_listFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<questions_and_teachers_list>>, PrismaPromise<Array<questions_and_teachers_listGetPayload<T>>>>

    /**
     * Create a Questions_and_teachers_list.
     * @param {questions_and_teachers_listCreateArgs} args - Arguments to create a Questions_and_teachers_list.
     * @example
     * // Create one Questions_and_teachers_list
     * const Questions_and_teachers_list = await prisma.questions_and_teachers_list.create({
     *   data: {
     *     // ... data to create a Questions_and_teachers_list
     *   }
     * })
     * 
    **/
    create<T extends questions_and_teachers_listCreateArgs>(
      args: SelectSubset<T, questions_and_teachers_listCreateArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Create many Questions_and_teachers_lists.
     *     @param {questions_and_teachers_listCreateManyArgs} args - Arguments to create many Questions_and_teachers_lists.
     *     @example
     *     // Create many Questions_and_teachers_lists
     *     const questions_and_teachers_list = await prisma.questions_and_teachers_list.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questions_and_teachers_listCreateManyArgs>(
      args?: SelectSubset<T, questions_and_teachers_listCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Questions_and_teachers_list.
     * @param {questions_and_teachers_listDeleteArgs} args - Arguments to delete one Questions_and_teachers_list.
     * @example
     * // Delete one Questions_and_teachers_list
     * const Questions_and_teachers_list = await prisma.questions_and_teachers_list.delete({
     *   where: {
     *     // ... filter to delete one Questions_and_teachers_list
     *   }
     * })
     * 
    **/
    delete<T extends questions_and_teachers_listDeleteArgs>(
      args: SelectSubset<T, questions_and_teachers_listDeleteArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Update one Questions_and_teachers_list.
     * @param {questions_and_teachers_listUpdateArgs} args - Arguments to update one Questions_and_teachers_list.
     * @example
     * // Update one Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questions_and_teachers_listUpdateArgs>(
      args: SelectSubset<T, questions_and_teachers_listUpdateArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Delete zero or more Questions_and_teachers_lists.
     * @param {questions_and_teachers_listDeleteManyArgs} args - Arguments to filter Questions_and_teachers_lists to delete.
     * @example
     * // Delete a few Questions_and_teachers_lists
     * const { count } = await prisma.questions_and_teachers_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questions_and_teachers_listDeleteManyArgs>(
      args?: SelectSubset<T, questions_and_teachers_listDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions_and_teachers_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questions_and_teachers_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions_and_teachers_lists
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questions_and_teachers_listUpdateManyArgs>(
      args: SelectSubset<T, questions_and_teachers_listUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions_and_teachers_list.
     * @param {questions_and_teachers_listUpsertArgs} args - Arguments to update or create a Questions_and_teachers_list.
     * @example
     * // Update or create a Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.upsert({
     *   create: {
     *     // ... data to create a Questions_and_teachers_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions_and_teachers_list we want to update
     *   }
     * })
    **/
    upsert<T extends questions_and_teachers_listUpsertArgs>(
      args: SelectSubset<T, questions_and_teachers_listUpsertArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Find one Questions_and_teachers_list that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {questions_and_teachers_listFindUniqueOrThrowArgs} args - Arguments to find a Questions_and_teachers_list
     * @example
     * // Get one Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questions_and_teachers_listFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, questions_and_teachers_listFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Find the first Questions_and_teachers_list that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questions_and_teachers_listFindFirstOrThrowArgs} args - Arguments to find a Questions_and_teachers_list
     * @example
     * // Get one Questions_and_teachers_list
     * const questions_and_teachers_list = await prisma.questions_and_teachers_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questions_and_teachers_listFindFirstOrThrowArgs>(
      args?: SelectSubset<T, questions_and_teachers_listFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__questions_and_teachers_listClient<questions_and_teachers_list>, Prisma__questions_and_teachers_listClient<questions_and_teachers_listGetPayload<T>>>

    /**
     * Count the number of Questions_and_teachers_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questions_and_teachers_listCountArgs} args - Arguments to filter Questions_and_teachers_lists to count.
     * @example
     * // Count the number of Questions_and_teachers_lists
     * const count = await prisma.questions_and_teachers_list.count({
     *   where: {
     *     // ... the filter for the Questions_and_teachers_lists we want to count
     *   }
     * })
    **/
    count<T extends questions_and_teachers_listCountArgs>(
      args?: Subset<T, questions_and_teachers_listCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Questions_and_teachers_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions_and_teachers_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Questions_and_teachers_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Questions_and_teachers_listAggregateArgs>(args: Subset<T, Questions_and_teachers_listAggregateArgs>): PrismaPromise<GetQuestions_and_teachers_listAggregateType<T>>

    /**
     * Group by Questions_and_teachers_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Questions_and_teachers_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Questions_and_teachers_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Questions_and_teachers_listGroupByArgs['orderBy'] }
        : { orderBy?: Questions_and_teachers_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Questions_and_teachers_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestions_and_teachers_listGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for questions_and_teachers_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__questions_and_teachers_listClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * questions_and_teachers_list base type for findUnique actions
   */
  export type questions_and_teachers_listFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * Filter, which questions_and_teachers_list to fetch.
     * 
    **/
    where: questions_and_teachers_listWhereUniqueInput
  }

  /**
   * questions_and_teachers_list: findUnique
   */
  export interface questions_and_teachers_listFindUniqueArgs extends questions_and_teachers_listFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questions_and_teachers_list base type for findFirst actions
   */
  export type questions_and_teachers_listFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * Filter, which questions_and_teachers_list to fetch.
     * 
    **/
    where?: questions_and_teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions_and_teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<questions_and_teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions_and_teachers_lists.
     * 
    **/
    cursor?: questions_and_teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions_and_teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions_and_teachers_lists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions_and_teachers_lists.
     * 
    **/
    distinct?: Enumerable<Questions_and_teachers_listScalarFieldEnum>
  }

  /**
   * questions_and_teachers_list: findFirst
   */
  export interface questions_and_teachers_listFindFirstArgs extends questions_and_teachers_listFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questions_and_teachers_list findMany
   */
  export type questions_and_teachers_listFindManyArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * Filter, which questions_and_teachers_lists to fetch.
     * 
    **/
    where?: questions_and_teachers_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions_and_teachers_lists to fetch.
     * 
    **/
    orderBy?: Enumerable<questions_and_teachers_listOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions_and_teachers_lists.
     * 
    **/
    cursor?: questions_and_teachers_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions_and_teachers_lists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions_and_teachers_lists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Questions_and_teachers_listScalarFieldEnum>
  }


  /**
   * questions_and_teachers_list create
   */
  export type questions_and_teachers_listCreateArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * The data needed to create a questions_and_teachers_list.
     * 
    **/
    data: XOR<questions_and_teachers_listCreateInput, questions_and_teachers_listUncheckedCreateInput>
  }


  /**
   * questions_and_teachers_list createMany
   */
  export type questions_and_teachers_listCreateManyArgs = {
    /**
     * The data used to create many questions_and_teachers_lists.
     * 
    **/
    data: Enumerable<questions_and_teachers_listCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * questions_and_teachers_list update
   */
  export type questions_and_teachers_listUpdateArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * The data needed to update a questions_and_teachers_list.
     * 
    **/
    data: XOR<questions_and_teachers_listUpdateInput, questions_and_teachers_listUncheckedUpdateInput>
    /**
     * Choose, which questions_and_teachers_list to update.
     * 
    **/
    where: questions_and_teachers_listWhereUniqueInput
  }


  /**
   * questions_and_teachers_list updateMany
   */
  export type questions_and_teachers_listUpdateManyArgs = {
    /**
     * The data used to update questions_and_teachers_lists.
     * 
    **/
    data: XOR<questions_and_teachers_listUpdateManyMutationInput, questions_and_teachers_listUncheckedUpdateManyInput>
    /**
     * Filter which questions_and_teachers_lists to update
     * 
    **/
    where?: questions_and_teachers_listWhereInput
  }


  /**
   * questions_and_teachers_list upsert
   */
  export type questions_and_teachers_listUpsertArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * The filter to search for the questions_and_teachers_list to update in case it exists.
     * 
    **/
    where: questions_and_teachers_listWhereUniqueInput
    /**
     * In case the questions_and_teachers_list found by the `where` argument doesn't exist, create a new questions_and_teachers_list with this data.
     * 
    **/
    create: XOR<questions_and_teachers_listCreateInput, questions_and_teachers_listUncheckedCreateInput>
    /**
     * In case the questions_and_teachers_list was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<questions_and_teachers_listUpdateInput, questions_and_teachers_listUncheckedUpdateInput>
  }


  /**
   * questions_and_teachers_list delete
   */
  export type questions_and_teachers_listDeleteArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
    /**
     * Filter which questions_and_teachers_list to delete.
     * 
    **/
    where: questions_and_teachers_listWhereUniqueInput
  }


  /**
   * questions_and_teachers_list deleteMany
   */
  export type questions_and_teachers_listDeleteManyArgs = {
    /**
     * Filter which questions_and_teachers_lists to delete
     * 
    **/
    where?: questions_and_teachers_listWhereInput
  }


  /**
   * questions_and_teachers_list: findUniqueOrThrow
   */
  export type questions_and_teachers_listFindUniqueOrThrowArgs = questions_and_teachers_listFindUniqueArgsBase
      

  /**
   * questions_and_teachers_list: findFirstOrThrow
   */
  export type questions_and_teachers_listFindFirstOrThrowArgs = questions_and_teachers_listFindFirstArgsBase
      

  /**
   * questions_and_teachers_list without action
   */
  export type questions_and_teachers_listArgs = {
    /**
     * Select specific fields to fetch from the questions_and_teachers_list
     * 
    **/
    select?: questions_and_teachers_listSelect | null
  }



  /**
   * Model selected_teachers
   */


  export type AggregateSelected_teachers = {
    _count: Selected_teachersCountAggregateOutputType | null
    _avg: Selected_teachersAvgAggregateOutputType | null
    _sum: Selected_teachersSumAggregateOutputType | null
    _min: Selected_teachersMinAggregateOutputType | null
    _max: Selected_teachersMaxAggregateOutputType | null
  }

  export type Selected_teachersAvgAggregateOutputType = {
    selected_id: number | null
  }

  export type Selected_teachersSumAggregateOutputType = {
    selected_id: number | null
  }

  export type Selected_teachersMinAggregateOutputType = {
    selected_id: number | null
    teachers_name: string | null
  }

  export type Selected_teachersMaxAggregateOutputType = {
    selected_id: number | null
    teachers_name: string | null
  }

  export type Selected_teachersCountAggregateOutputType = {
    selected_id: number
    teachers_name: number
    _all: number
  }


  export type Selected_teachersAvgAggregateInputType = {
    selected_id?: true
  }

  export type Selected_teachersSumAggregateInputType = {
    selected_id?: true
  }

  export type Selected_teachersMinAggregateInputType = {
    selected_id?: true
    teachers_name?: true
  }

  export type Selected_teachersMaxAggregateInputType = {
    selected_id?: true
    teachers_name?: true
  }

  export type Selected_teachersCountAggregateInputType = {
    selected_id?: true
    teachers_name?: true
    _all?: true
  }

  export type Selected_teachersAggregateArgs = {
    /**
     * Filter which selected_teachers to aggregate.
     * 
    **/
    where?: selected_teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected_teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<selected_teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: selected_teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected_teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected_teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selected_teachers
    **/
    _count?: true | Selected_teachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Selected_teachersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Selected_teachersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Selected_teachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Selected_teachersMaxAggregateInputType
  }

  export type GetSelected_teachersAggregateType<T extends Selected_teachersAggregateArgs> = {
        [P in keyof T & keyof AggregateSelected_teachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelected_teachers[P]>
      : GetScalarType<T[P], AggregateSelected_teachers[P]>
  }




  export type Selected_teachersGroupByArgs = {
    where?: selected_teachersWhereInput
    orderBy?: Enumerable<selected_teachersOrderByWithAggregationInput>
    by: Array<Selected_teachersScalarFieldEnum>
    having?: selected_teachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Selected_teachersCountAggregateInputType | true
    _avg?: Selected_teachersAvgAggregateInputType
    _sum?: Selected_teachersSumAggregateInputType
    _min?: Selected_teachersMinAggregateInputType
    _max?: Selected_teachersMaxAggregateInputType
  }


  export type Selected_teachersGroupByOutputType = {
    selected_id: number
    teachers_name: string
    _count: Selected_teachersCountAggregateOutputType | null
    _avg: Selected_teachersAvgAggregateOutputType | null
    _sum: Selected_teachersSumAggregateOutputType | null
    _min: Selected_teachersMinAggregateOutputType | null
    _max: Selected_teachersMaxAggregateOutputType | null
  }

  type GetSelected_teachersGroupByPayload<T extends Selected_teachersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Selected_teachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Selected_teachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Selected_teachersGroupByOutputType[P]>
            : GetScalarType<T[P], Selected_teachersGroupByOutputType[P]>
        }
      >
    >


  export type selected_teachersSelect = {
    selected_id?: boolean
    teachers_name?: boolean
    selected1_question?: boolean | selected1_questionFindManyArgs
    selected2_question?: boolean | selected2_questionFindManyArgs
    selected3_question?: boolean | selected3_questionFindManyArgs
    selected4_question?: boolean | selected4_questionFindManyArgs
    _count?: boolean | Selected_teachersCountOutputTypeArgs
  }

  export type selected_teachersInclude = {
    selected1_question?: boolean | selected1_questionFindManyArgs
    selected2_question?: boolean | selected2_questionFindManyArgs
    selected3_question?: boolean | selected3_questionFindManyArgs
    selected4_question?: boolean | selected4_questionFindManyArgs
    _count?: boolean | Selected_teachersCountOutputTypeArgs
  }

  export type selected_teachersGetPayload<
    S extends boolean | null | undefined | selected_teachersArgs,
    U = keyof S
      > = S extends true
        ? selected_teachers
    : S extends undefined
    ? never
    : S extends selected_teachersArgs | selected_teachersFindManyArgs
    ?'include' extends U
    ? selected_teachers  & {
    [P in TrueKeys<S['include']>]:
        P extends 'selected1_question' ? Array < selected1_questionGetPayload<S['include'][P]>>  :
        P extends 'selected2_question' ? Array < selected2_questionGetPayload<S['include'][P]>>  :
        P extends 'selected3_question' ? Array < selected3_questionGetPayload<S['include'][P]>>  :
        P extends 'selected4_question' ? Array < selected4_questionGetPayload<S['include'][P]>>  :
        P extends '_count' ? Selected_teachersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'selected1_question' ? Array < selected1_questionGetPayload<S['select'][P]>>  :
        P extends 'selected2_question' ? Array < selected2_questionGetPayload<S['select'][P]>>  :
        P extends 'selected3_question' ? Array < selected3_questionGetPayload<S['select'][P]>>  :
        P extends 'selected4_question' ? Array < selected4_questionGetPayload<S['select'][P]>>  :
        P extends '_count' ? Selected_teachersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof selected_teachers ? selected_teachers[P] : never
  } 
    : selected_teachers
  : selected_teachers


  type selected_teachersCountArgs = Merge<
    Omit<selected_teachersFindManyArgs, 'select' | 'include'> & {
      select?: Selected_teachersCountAggregateInputType | true
    }
  >

  export interface selected_teachersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Selected_teachers that matches the filter.
     * @param {selected_teachersFindUniqueArgs} args - Arguments to find a Selected_teachers
     * @example
     * // Get one Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends selected_teachersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, selected_teachersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'selected_teachers'> extends True ? CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>> : CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>

    /**
     * Find the first Selected_teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected_teachersFindFirstArgs} args - Arguments to find a Selected_teachers
     * @example
     * // Get one Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends selected_teachersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, selected_teachersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'selected_teachers'> extends True ? CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>> : CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>

    /**
     * Find zero or more Selected_teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected_teachersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findMany()
     * 
     * // Get first 10 Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findMany({ take: 10 })
     * 
     * // Only select the `selected_id`
     * const selected_teachersWithSelected_idOnly = await prisma.selected_teachers.findMany({ select: { selected_id: true } })
     * 
    **/
    findMany<T extends selected_teachersFindManyArgs>(
      args?: SelectSubset<T, selected_teachersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<selected_teachers>>, PrismaPromise<Array<selected_teachersGetPayload<T>>>>

    /**
     * Create a Selected_teachers.
     * @param {selected_teachersCreateArgs} args - Arguments to create a Selected_teachers.
     * @example
     * // Create one Selected_teachers
     * const Selected_teachers = await prisma.selected_teachers.create({
     *   data: {
     *     // ... data to create a Selected_teachers
     *   }
     * })
     * 
    **/
    create<T extends selected_teachersCreateArgs>(
      args: SelectSubset<T, selected_teachersCreateArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Create many Selected_teachers.
     *     @param {selected_teachersCreateManyArgs} args - Arguments to create many Selected_teachers.
     *     @example
     *     // Create many Selected_teachers
     *     const selected_teachers = await prisma.selected_teachers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends selected_teachersCreateManyArgs>(
      args?: SelectSubset<T, selected_teachersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Selected_teachers.
     * @param {selected_teachersDeleteArgs} args - Arguments to delete one Selected_teachers.
     * @example
     * // Delete one Selected_teachers
     * const Selected_teachers = await prisma.selected_teachers.delete({
     *   where: {
     *     // ... filter to delete one Selected_teachers
     *   }
     * })
     * 
    **/
    delete<T extends selected_teachersDeleteArgs>(
      args: SelectSubset<T, selected_teachersDeleteArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Update one Selected_teachers.
     * @param {selected_teachersUpdateArgs} args - Arguments to update one Selected_teachers.
     * @example
     * // Update one Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends selected_teachersUpdateArgs>(
      args: SelectSubset<T, selected_teachersUpdateArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Delete zero or more Selected_teachers.
     * @param {selected_teachersDeleteManyArgs} args - Arguments to filter Selected_teachers to delete.
     * @example
     * // Delete a few Selected_teachers
     * const { count } = await prisma.selected_teachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends selected_teachersDeleteManyArgs>(
      args?: SelectSubset<T, selected_teachersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Selected_teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected_teachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends selected_teachersUpdateManyArgs>(
      args: SelectSubset<T, selected_teachersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Selected_teachers.
     * @param {selected_teachersUpsertArgs} args - Arguments to update or create a Selected_teachers.
     * @example
     * // Update or create a Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.upsert({
     *   create: {
     *     // ... data to create a Selected_teachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Selected_teachers we want to update
     *   }
     * })
    **/
    upsert<T extends selected_teachersUpsertArgs>(
      args: SelectSubset<T, selected_teachersUpsertArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Find one Selected_teachers that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {selected_teachersFindUniqueOrThrowArgs} args - Arguments to find a Selected_teachers
     * @example
     * // Get one Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends selected_teachersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, selected_teachersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Find the first Selected_teachers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected_teachersFindFirstOrThrowArgs} args - Arguments to find a Selected_teachers
     * @example
     * // Get one Selected_teachers
     * const selected_teachers = await prisma.selected_teachers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends selected_teachersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, selected_teachersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers>, Prisma__selected_teachersClient<selected_teachersGetPayload<T>>>

    /**
     * Count the number of Selected_teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected_teachersCountArgs} args - Arguments to filter Selected_teachers to count.
     * @example
     * // Count the number of Selected_teachers
     * const count = await prisma.selected_teachers.count({
     *   where: {
     *     // ... the filter for the Selected_teachers we want to count
     *   }
     * })
    **/
    count<T extends selected_teachersCountArgs>(
      args?: Subset<T, selected_teachersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Selected_teachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Selected_teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected_teachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Selected_teachersAggregateArgs>(args: Subset<T, Selected_teachersAggregateArgs>): PrismaPromise<GetSelected_teachersAggregateType<T>>

    /**
     * Group by Selected_teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected_teachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Selected_teachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Selected_teachersGroupByArgs['orderBy'] }
        : { orderBy?: Selected_teachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Selected_teachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelected_teachersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for selected_teachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__selected_teachersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    selected1_question<T extends selected1_questionFindManyArgs = {}>(args?: Subset<T, selected1_questionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<selected1_question>>, PrismaPromise<Array<selected1_questionGetPayload<T>>>>;

    selected2_question<T extends selected2_questionFindManyArgs = {}>(args?: Subset<T, selected2_questionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<selected2_question>>, PrismaPromise<Array<selected2_questionGetPayload<T>>>>;

    selected3_question<T extends selected3_questionFindManyArgs = {}>(args?: Subset<T, selected3_questionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<selected3_question>>, PrismaPromise<Array<selected3_questionGetPayload<T>>>>;

    selected4_question<T extends selected4_questionFindManyArgs = {}>(args?: Subset<T, selected4_questionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<selected4_question>>, PrismaPromise<Array<selected4_questionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * selected_teachers base type for findUnique actions
   */
  export type selected_teachersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * Filter, which selected_teachers to fetch.
     * 
    **/
    where: selected_teachersWhereUniqueInput
  }

  /**
   * selected_teachers: findUnique
   */
  export interface selected_teachersFindUniqueArgs extends selected_teachersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected_teachers base type for findFirst actions
   */
  export type selected_teachersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * Filter, which selected_teachers to fetch.
     * 
    **/
    where?: selected_teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected_teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<selected_teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selected_teachers.
     * 
    **/
    cursor?: selected_teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected_teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected_teachers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selected_teachers.
     * 
    **/
    distinct?: Enumerable<Selected_teachersScalarFieldEnum>
  }

  /**
   * selected_teachers: findFirst
   */
  export interface selected_teachersFindFirstArgs extends selected_teachersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected_teachers findMany
   */
  export type selected_teachersFindManyArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * Filter, which selected_teachers to fetch.
     * 
    **/
    where?: selected_teachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected_teachers to fetch.
     * 
    **/
    orderBy?: Enumerable<selected_teachersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selected_teachers.
     * 
    **/
    cursor?: selected_teachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected_teachers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected_teachers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Selected_teachersScalarFieldEnum>
  }


  /**
   * selected_teachers create
   */
  export type selected_teachersCreateArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * The data needed to create a selected_teachers.
     * 
    **/
    data: XOR<selected_teachersCreateInput, selected_teachersUncheckedCreateInput>
  }


  /**
   * selected_teachers createMany
   */
  export type selected_teachersCreateManyArgs = {
    /**
     * The data used to create many selected_teachers.
     * 
    **/
    data: Enumerable<selected_teachersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * selected_teachers update
   */
  export type selected_teachersUpdateArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * The data needed to update a selected_teachers.
     * 
    **/
    data: XOR<selected_teachersUpdateInput, selected_teachersUncheckedUpdateInput>
    /**
     * Choose, which selected_teachers to update.
     * 
    **/
    where: selected_teachersWhereUniqueInput
  }


  /**
   * selected_teachers updateMany
   */
  export type selected_teachersUpdateManyArgs = {
    /**
     * The data used to update selected_teachers.
     * 
    **/
    data: XOR<selected_teachersUpdateManyMutationInput, selected_teachersUncheckedUpdateManyInput>
    /**
     * Filter which selected_teachers to update
     * 
    **/
    where?: selected_teachersWhereInput
  }


  /**
   * selected_teachers upsert
   */
  export type selected_teachersUpsertArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * The filter to search for the selected_teachers to update in case it exists.
     * 
    **/
    where: selected_teachersWhereUniqueInput
    /**
     * In case the selected_teachers found by the `where` argument doesn't exist, create a new selected_teachers with this data.
     * 
    **/
    create: XOR<selected_teachersCreateInput, selected_teachersUncheckedCreateInput>
    /**
     * In case the selected_teachers was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<selected_teachersUpdateInput, selected_teachersUncheckedUpdateInput>
  }


  /**
   * selected_teachers delete
   */
  export type selected_teachersDeleteArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
    /**
     * Filter which selected_teachers to delete.
     * 
    **/
    where: selected_teachersWhereUniqueInput
  }


  /**
   * selected_teachers deleteMany
   */
  export type selected_teachersDeleteManyArgs = {
    /**
     * Filter which selected_teachers to delete
     * 
    **/
    where?: selected_teachersWhereInput
  }


  /**
   * selected_teachers: findUniqueOrThrow
   */
  export type selected_teachersFindUniqueOrThrowArgs = selected_teachersFindUniqueArgsBase
      

  /**
   * selected_teachers: findFirstOrThrow
   */
  export type selected_teachersFindFirstOrThrowArgs = selected_teachersFindFirstArgsBase
      

  /**
   * selected_teachers without action
   */
  export type selected_teachersArgs = {
    /**
     * Select specific fields to fetch from the selected_teachers
     * 
    **/
    select?: selected_teachersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected_teachersInclude | null
  }



  /**
   * Model feedback_question_1
   */


  export type AggregateFeedback_question_1 = {
    _count: Feedback_question_1CountAggregateOutputType | null
    _avg: Feedback_question_1AvgAggregateOutputType | null
    _sum: Feedback_question_1SumAggregateOutputType | null
    _min: Feedback_question_1MinAggregateOutputType | null
    _max: Feedback_question_1MaxAggregateOutputType | null
  }

  export type Feedback_question_1AvgAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_1SumAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_1MinAggregateOutputType = {
    ID: number | null
    question_1: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_1MaxAggregateOutputType = {
    ID: number | null
    question_1: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_1CountAggregateOutputType = {
    ID: number
    question_1: number
    answer_1: number
    answer_2: number
    _all: number
  }


  export type Feedback_question_1AvgAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_1SumAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_1MinAggregateInputType = {
    ID?: true
    question_1?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_1MaxAggregateInputType = {
    ID?: true
    question_1?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_1CountAggregateInputType = {
    ID?: true
    question_1?: true
    answer_1?: true
    answer_2?: true
    _all?: true
  }

  export type Feedback_question_1AggregateArgs = {
    /**
     * Filter which feedback_question_1 to aggregate.
     * 
    **/
    where?: feedback_question_1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_1s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: feedback_question_1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_1s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_1s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedback_question_1s
    **/
    _count?: true | Feedback_question_1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Feedback_question_1AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Feedback_question_1SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Feedback_question_1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Feedback_question_1MaxAggregateInputType
  }

  export type GetFeedback_question_1AggregateType<T extends Feedback_question_1AggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback_question_1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback_question_1[P]>
      : GetScalarType<T[P], AggregateFeedback_question_1[P]>
  }




  export type Feedback_question_1GroupByArgs = {
    where?: feedback_question_1WhereInput
    orderBy?: Enumerable<feedback_question_1OrderByWithAggregationInput>
    by: Array<Feedback_question_1ScalarFieldEnum>
    having?: feedback_question_1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Feedback_question_1CountAggregateInputType | true
    _avg?: Feedback_question_1AvgAggregateInputType
    _sum?: Feedback_question_1SumAggregateInputType
    _min?: Feedback_question_1MinAggregateInputType
    _max?: Feedback_question_1MaxAggregateInputType
  }


  export type Feedback_question_1GroupByOutputType = {
    ID: number
    question_1: string
    answer_1: string
    answer_2: string | null
    _count: Feedback_question_1CountAggregateOutputType | null
    _avg: Feedback_question_1AvgAggregateOutputType | null
    _sum: Feedback_question_1SumAggregateOutputType | null
    _min: Feedback_question_1MinAggregateOutputType | null
    _max: Feedback_question_1MaxAggregateOutputType | null
  }

  type GetFeedback_question_1GroupByPayload<T extends Feedback_question_1GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Feedback_question_1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Feedback_question_1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Feedback_question_1GroupByOutputType[P]>
            : GetScalarType<T[P], Feedback_question_1GroupByOutputType[P]>
        }
      >
    >


  export type feedback_question_1Select = {
    ID?: boolean
    question_1?: boolean
    answer_1?: boolean
    answer_2?: boolean
  }

  export type feedback_question_1GetPayload<
    S extends boolean | null | undefined | feedback_question_1Args,
    U = keyof S
      > = S extends true
        ? feedback_question_1
    : S extends undefined
    ? never
    : S extends feedback_question_1Args | feedback_question_1FindManyArgs
    ?'include' extends U
    ? feedback_question_1 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof feedback_question_1 ? feedback_question_1[P] : never
  } 
    : feedback_question_1
  : feedback_question_1


  type feedback_question_1CountArgs = Merge<
    Omit<feedback_question_1FindManyArgs, 'select' | 'include'> & {
      select?: Feedback_question_1CountAggregateInputType | true
    }
  >

  export interface feedback_question_1Delegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback_question_1 that matches the filter.
     * @param {feedback_question_1FindUniqueArgs} args - Arguments to find a Feedback_question_1
     * @example
     * // Get one Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedback_question_1FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, feedback_question_1FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'feedback_question_1'> extends True ? CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1 | null >, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T> | null >>

    /**
     * Find the first Feedback_question_1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_1FindFirstArgs} args - Arguments to find a Feedback_question_1
     * @example
     * // Get one Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedback_question_1FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, feedback_question_1FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'feedback_question_1'> extends True ? CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1 | null >, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T> | null >>

    /**
     * Find zero or more Feedback_question_1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_1FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedback_question_1s
     * const feedback_question_1s = await prisma.feedback_question_1.findMany()
     * 
     * // Get first 10 Feedback_question_1s
     * const feedback_question_1s = await prisma.feedback_question_1.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const feedback_question_1WithIDOnly = await prisma.feedback_question_1.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends feedback_question_1FindManyArgs>(
      args?: SelectSubset<T, feedback_question_1FindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<feedback_question_1>>, PrismaPromise<Array<feedback_question_1GetPayload<T>>>>

    /**
     * Create a Feedback_question_1.
     * @param {feedback_question_1CreateArgs} args - Arguments to create a Feedback_question_1.
     * @example
     * // Create one Feedback_question_1
     * const Feedback_question_1 = await prisma.feedback_question_1.create({
     *   data: {
     *     // ... data to create a Feedback_question_1
     *   }
     * })
     * 
    **/
    create<T extends feedback_question_1CreateArgs>(
      args: SelectSubset<T, feedback_question_1CreateArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Create many Feedback_question_1s.
     *     @param {feedback_question_1CreateManyArgs} args - Arguments to create many Feedback_question_1s.
     *     @example
     *     // Create many Feedback_question_1s
     *     const feedback_question_1 = await prisma.feedback_question_1.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedback_question_1CreateManyArgs>(
      args?: SelectSubset<T, feedback_question_1CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback_question_1.
     * @param {feedback_question_1DeleteArgs} args - Arguments to delete one Feedback_question_1.
     * @example
     * // Delete one Feedback_question_1
     * const Feedback_question_1 = await prisma.feedback_question_1.delete({
     *   where: {
     *     // ... filter to delete one Feedback_question_1
     *   }
     * })
     * 
    **/
    delete<T extends feedback_question_1DeleteArgs>(
      args: SelectSubset<T, feedback_question_1DeleteArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Update one Feedback_question_1.
     * @param {feedback_question_1UpdateArgs} args - Arguments to update one Feedback_question_1.
     * @example
     * // Update one Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedback_question_1UpdateArgs>(
      args: SelectSubset<T, feedback_question_1UpdateArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Delete zero or more Feedback_question_1s.
     * @param {feedback_question_1DeleteManyArgs} args - Arguments to filter Feedback_question_1s to delete.
     * @example
     * // Delete a few Feedback_question_1s
     * const { count } = await prisma.feedback_question_1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedback_question_1DeleteManyArgs>(
      args?: SelectSubset<T, feedback_question_1DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedback_question_1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedback_question_1s
     * const feedback_question_1 = await prisma.feedback_question_1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedback_question_1UpdateManyArgs>(
      args: SelectSubset<T, feedback_question_1UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback_question_1.
     * @param {feedback_question_1UpsertArgs} args - Arguments to update or create a Feedback_question_1.
     * @example
     * // Update or create a Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.upsert({
     *   create: {
     *     // ... data to create a Feedback_question_1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback_question_1 we want to update
     *   }
     * })
    **/
    upsert<T extends feedback_question_1UpsertArgs>(
      args: SelectSubset<T, feedback_question_1UpsertArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Find one Feedback_question_1 that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {feedback_question_1FindUniqueOrThrowArgs} args - Arguments to find a Feedback_question_1
     * @example
     * // Get one Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedback_question_1FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_1FindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Find the first Feedback_question_1 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_1FindFirstOrThrowArgs} args - Arguments to find a Feedback_question_1
     * @example
     * // Get one Feedback_question_1
     * const feedback_question_1 = await prisma.feedback_question_1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedback_question_1FindFirstOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_1FindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_1Client<feedback_question_1>, Prisma__feedback_question_1Client<feedback_question_1GetPayload<T>>>

    /**
     * Count the number of Feedback_question_1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_1CountArgs} args - Arguments to filter Feedback_question_1s to count.
     * @example
     * // Count the number of Feedback_question_1s
     * const count = await prisma.feedback_question_1.count({
     *   where: {
     *     // ... the filter for the Feedback_question_1s we want to count
     *   }
     * })
    **/
    count<T extends feedback_question_1CountArgs>(
      args?: Subset<T, feedback_question_1CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Feedback_question_1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback_question_1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Feedback_question_1AggregateArgs>(args: Subset<T, Feedback_question_1AggregateArgs>): PrismaPromise<GetFeedback_question_1AggregateType<T>>

    /**
     * Group by Feedback_question_1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Feedback_question_1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Feedback_question_1GroupByArgs['orderBy'] }
        : { orderBy?: Feedback_question_1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Feedback_question_1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedback_question_1GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for feedback_question_1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__feedback_question_1Client<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * feedback_question_1 base type for findUnique actions
   */
  export type feedback_question_1FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * Filter, which feedback_question_1 to fetch.
     * 
    **/
    where: feedback_question_1WhereUniqueInput
  }

  /**
   * feedback_question_1: findUnique
   */
  export interface feedback_question_1FindUniqueArgs extends feedback_question_1FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_1 base type for findFirst actions
   */
  export type feedback_question_1FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * Filter, which feedback_question_1 to fetch.
     * 
    **/
    where?: feedback_question_1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_1s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_question_1s.
     * 
    **/
    cursor?: feedback_question_1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_1s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_1s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_question_1s.
     * 
    **/
    distinct?: Enumerable<Feedback_question_1ScalarFieldEnum>
  }

  /**
   * feedback_question_1: findFirst
   */
  export interface feedback_question_1FindFirstArgs extends feedback_question_1FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_1 findMany
   */
  export type feedback_question_1FindManyArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * Filter, which feedback_question_1s to fetch.
     * 
    **/
    where?: feedback_question_1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_1s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_1OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedback_question_1s.
     * 
    **/
    cursor?: feedback_question_1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_1s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_1s.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Feedback_question_1ScalarFieldEnum>
  }


  /**
   * feedback_question_1 create
   */
  export type feedback_question_1CreateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * The data needed to create a feedback_question_1.
     * 
    **/
    data: XOR<feedback_question_1CreateInput, feedback_question_1UncheckedCreateInput>
  }


  /**
   * feedback_question_1 createMany
   */
  export type feedback_question_1CreateManyArgs = {
    /**
     * The data used to create many feedback_question_1s.
     * 
    **/
    data: Enumerable<feedback_question_1CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * feedback_question_1 update
   */
  export type feedback_question_1UpdateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * The data needed to update a feedback_question_1.
     * 
    **/
    data: XOR<feedback_question_1UpdateInput, feedback_question_1UncheckedUpdateInput>
    /**
     * Choose, which feedback_question_1 to update.
     * 
    **/
    where: feedback_question_1WhereUniqueInput
  }


  /**
   * feedback_question_1 updateMany
   */
  export type feedback_question_1UpdateManyArgs = {
    /**
     * The data used to update feedback_question_1s.
     * 
    **/
    data: XOR<feedback_question_1UpdateManyMutationInput, feedback_question_1UncheckedUpdateManyInput>
    /**
     * Filter which feedback_question_1s to update
     * 
    **/
    where?: feedback_question_1WhereInput
  }


  /**
   * feedback_question_1 upsert
   */
  export type feedback_question_1UpsertArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * The filter to search for the feedback_question_1 to update in case it exists.
     * 
    **/
    where: feedback_question_1WhereUniqueInput
    /**
     * In case the feedback_question_1 found by the `where` argument doesn't exist, create a new feedback_question_1 with this data.
     * 
    **/
    create: XOR<feedback_question_1CreateInput, feedback_question_1UncheckedCreateInput>
    /**
     * In case the feedback_question_1 was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<feedback_question_1UpdateInput, feedback_question_1UncheckedUpdateInput>
  }


  /**
   * feedback_question_1 delete
   */
  export type feedback_question_1DeleteArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
    /**
     * Filter which feedback_question_1 to delete.
     * 
    **/
    where: feedback_question_1WhereUniqueInput
  }


  /**
   * feedback_question_1 deleteMany
   */
  export type feedback_question_1DeleteManyArgs = {
    /**
     * Filter which feedback_question_1s to delete
     * 
    **/
    where?: feedback_question_1WhereInput
  }


  /**
   * feedback_question_1: findUniqueOrThrow
   */
  export type feedback_question_1FindUniqueOrThrowArgs = feedback_question_1FindUniqueArgsBase
      

  /**
   * feedback_question_1: findFirstOrThrow
   */
  export type feedback_question_1FindFirstOrThrowArgs = feedback_question_1FindFirstArgsBase
      

  /**
   * feedback_question_1 without action
   */
  export type feedback_question_1Args = {
    /**
     * Select specific fields to fetch from the feedback_question_1
     * 
    **/
    select?: feedback_question_1Select | null
  }



  /**
   * Model feedback_question_2
   */


  export type AggregateFeedback_question_2 = {
    _count: Feedback_question_2CountAggregateOutputType | null
    _avg: Feedback_question_2AvgAggregateOutputType | null
    _sum: Feedback_question_2SumAggregateOutputType | null
    _min: Feedback_question_2MinAggregateOutputType | null
    _max: Feedback_question_2MaxAggregateOutputType | null
  }

  export type Feedback_question_2AvgAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_2SumAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_2MinAggregateOutputType = {
    ID: number | null
    question_2: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_2MaxAggregateOutputType = {
    ID: number | null
    question_2: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_2CountAggregateOutputType = {
    ID: number
    question_2: number
    answer_1: number
    answer_2: number
    _all: number
  }


  export type Feedback_question_2AvgAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_2SumAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_2MinAggregateInputType = {
    ID?: true
    question_2?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_2MaxAggregateInputType = {
    ID?: true
    question_2?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_2CountAggregateInputType = {
    ID?: true
    question_2?: true
    answer_1?: true
    answer_2?: true
    _all?: true
  }

  export type Feedback_question_2AggregateArgs = {
    /**
     * Filter which feedback_question_2 to aggregate.
     * 
    **/
    where?: feedback_question_2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_2s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: feedback_question_2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_2s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_2s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedback_question_2s
    **/
    _count?: true | Feedback_question_2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Feedback_question_2AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Feedback_question_2SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Feedback_question_2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Feedback_question_2MaxAggregateInputType
  }

  export type GetFeedback_question_2AggregateType<T extends Feedback_question_2AggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback_question_2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback_question_2[P]>
      : GetScalarType<T[P], AggregateFeedback_question_2[P]>
  }




  export type Feedback_question_2GroupByArgs = {
    where?: feedback_question_2WhereInput
    orderBy?: Enumerable<feedback_question_2OrderByWithAggregationInput>
    by: Array<Feedback_question_2ScalarFieldEnum>
    having?: feedback_question_2ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Feedback_question_2CountAggregateInputType | true
    _avg?: Feedback_question_2AvgAggregateInputType
    _sum?: Feedback_question_2SumAggregateInputType
    _min?: Feedback_question_2MinAggregateInputType
    _max?: Feedback_question_2MaxAggregateInputType
  }


  export type Feedback_question_2GroupByOutputType = {
    ID: number
    question_2: string
    answer_1: string
    answer_2: string | null
    _count: Feedback_question_2CountAggregateOutputType | null
    _avg: Feedback_question_2AvgAggregateOutputType | null
    _sum: Feedback_question_2SumAggregateOutputType | null
    _min: Feedback_question_2MinAggregateOutputType | null
    _max: Feedback_question_2MaxAggregateOutputType | null
  }

  type GetFeedback_question_2GroupByPayload<T extends Feedback_question_2GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Feedback_question_2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Feedback_question_2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Feedback_question_2GroupByOutputType[P]>
            : GetScalarType<T[P], Feedback_question_2GroupByOutputType[P]>
        }
      >
    >


  export type feedback_question_2Select = {
    ID?: boolean
    question_2?: boolean
    answer_1?: boolean
    answer_2?: boolean
  }

  export type feedback_question_2GetPayload<
    S extends boolean | null | undefined | feedback_question_2Args,
    U = keyof S
      > = S extends true
        ? feedback_question_2
    : S extends undefined
    ? never
    : S extends feedback_question_2Args | feedback_question_2FindManyArgs
    ?'include' extends U
    ? feedback_question_2 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof feedback_question_2 ? feedback_question_2[P] : never
  } 
    : feedback_question_2
  : feedback_question_2


  type feedback_question_2CountArgs = Merge<
    Omit<feedback_question_2FindManyArgs, 'select' | 'include'> & {
      select?: Feedback_question_2CountAggregateInputType | true
    }
  >

  export interface feedback_question_2Delegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback_question_2 that matches the filter.
     * @param {feedback_question_2FindUniqueArgs} args - Arguments to find a Feedback_question_2
     * @example
     * // Get one Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedback_question_2FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, feedback_question_2FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'feedback_question_2'> extends True ? CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2 | null >, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T> | null >>

    /**
     * Find the first Feedback_question_2 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_2FindFirstArgs} args - Arguments to find a Feedback_question_2
     * @example
     * // Get one Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedback_question_2FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, feedback_question_2FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'feedback_question_2'> extends True ? CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2 | null >, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T> | null >>

    /**
     * Find zero or more Feedback_question_2s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_2FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedback_question_2s
     * const feedback_question_2s = await prisma.feedback_question_2.findMany()
     * 
     * // Get first 10 Feedback_question_2s
     * const feedback_question_2s = await prisma.feedback_question_2.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const feedback_question_2WithIDOnly = await prisma.feedback_question_2.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends feedback_question_2FindManyArgs>(
      args?: SelectSubset<T, feedback_question_2FindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<feedback_question_2>>, PrismaPromise<Array<feedback_question_2GetPayload<T>>>>

    /**
     * Create a Feedback_question_2.
     * @param {feedback_question_2CreateArgs} args - Arguments to create a Feedback_question_2.
     * @example
     * // Create one Feedback_question_2
     * const Feedback_question_2 = await prisma.feedback_question_2.create({
     *   data: {
     *     // ... data to create a Feedback_question_2
     *   }
     * })
     * 
    **/
    create<T extends feedback_question_2CreateArgs>(
      args: SelectSubset<T, feedback_question_2CreateArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Create many Feedback_question_2s.
     *     @param {feedback_question_2CreateManyArgs} args - Arguments to create many Feedback_question_2s.
     *     @example
     *     // Create many Feedback_question_2s
     *     const feedback_question_2 = await prisma.feedback_question_2.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedback_question_2CreateManyArgs>(
      args?: SelectSubset<T, feedback_question_2CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback_question_2.
     * @param {feedback_question_2DeleteArgs} args - Arguments to delete one Feedback_question_2.
     * @example
     * // Delete one Feedback_question_2
     * const Feedback_question_2 = await prisma.feedback_question_2.delete({
     *   where: {
     *     // ... filter to delete one Feedback_question_2
     *   }
     * })
     * 
    **/
    delete<T extends feedback_question_2DeleteArgs>(
      args: SelectSubset<T, feedback_question_2DeleteArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Update one Feedback_question_2.
     * @param {feedback_question_2UpdateArgs} args - Arguments to update one Feedback_question_2.
     * @example
     * // Update one Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedback_question_2UpdateArgs>(
      args: SelectSubset<T, feedback_question_2UpdateArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Delete zero or more Feedback_question_2s.
     * @param {feedback_question_2DeleteManyArgs} args - Arguments to filter Feedback_question_2s to delete.
     * @example
     * // Delete a few Feedback_question_2s
     * const { count } = await prisma.feedback_question_2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedback_question_2DeleteManyArgs>(
      args?: SelectSubset<T, feedback_question_2DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedback_question_2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedback_question_2s
     * const feedback_question_2 = await prisma.feedback_question_2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedback_question_2UpdateManyArgs>(
      args: SelectSubset<T, feedback_question_2UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback_question_2.
     * @param {feedback_question_2UpsertArgs} args - Arguments to update or create a Feedback_question_2.
     * @example
     * // Update or create a Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.upsert({
     *   create: {
     *     // ... data to create a Feedback_question_2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback_question_2 we want to update
     *   }
     * })
    **/
    upsert<T extends feedback_question_2UpsertArgs>(
      args: SelectSubset<T, feedback_question_2UpsertArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Find one Feedback_question_2 that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {feedback_question_2FindUniqueOrThrowArgs} args - Arguments to find a Feedback_question_2
     * @example
     * // Get one Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedback_question_2FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_2FindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Find the first Feedback_question_2 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_2FindFirstOrThrowArgs} args - Arguments to find a Feedback_question_2
     * @example
     * // Get one Feedback_question_2
     * const feedback_question_2 = await prisma.feedback_question_2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedback_question_2FindFirstOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_2FindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_2Client<feedback_question_2>, Prisma__feedback_question_2Client<feedback_question_2GetPayload<T>>>

    /**
     * Count the number of Feedback_question_2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_2CountArgs} args - Arguments to filter Feedback_question_2s to count.
     * @example
     * // Count the number of Feedback_question_2s
     * const count = await prisma.feedback_question_2.count({
     *   where: {
     *     // ... the filter for the Feedback_question_2s we want to count
     *   }
     * })
    **/
    count<T extends feedback_question_2CountArgs>(
      args?: Subset<T, feedback_question_2CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Feedback_question_2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback_question_2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Feedback_question_2AggregateArgs>(args: Subset<T, Feedback_question_2AggregateArgs>): PrismaPromise<GetFeedback_question_2AggregateType<T>>

    /**
     * Group by Feedback_question_2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Feedback_question_2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Feedback_question_2GroupByArgs['orderBy'] }
        : { orderBy?: Feedback_question_2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Feedback_question_2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedback_question_2GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for feedback_question_2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__feedback_question_2Client<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * feedback_question_2 base type for findUnique actions
   */
  export type feedback_question_2FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * Filter, which feedback_question_2 to fetch.
     * 
    **/
    where: feedback_question_2WhereUniqueInput
  }

  /**
   * feedback_question_2: findUnique
   */
  export interface feedback_question_2FindUniqueArgs extends feedback_question_2FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_2 base type for findFirst actions
   */
  export type feedback_question_2FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * Filter, which feedback_question_2 to fetch.
     * 
    **/
    where?: feedback_question_2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_2s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_question_2s.
     * 
    **/
    cursor?: feedback_question_2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_2s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_2s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_question_2s.
     * 
    **/
    distinct?: Enumerable<Feedback_question_2ScalarFieldEnum>
  }

  /**
   * feedback_question_2: findFirst
   */
  export interface feedback_question_2FindFirstArgs extends feedback_question_2FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_2 findMany
   */
  export type feedback_question_2FindManyArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * Filter, which feedback_question_2s to fetch.
     * 
    **/
    where?: feedback_question_2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_2s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_2OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedback_question_2s.
     * 
    **/
    cursor?: feedback_question_2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_2s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_2s.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Feedback_question_2ScalarFieldEnum>
  }


  /**
   * feedback_question_2 create
   */
  export type feedback_question_2CreateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * The data needed to create a feedback_question_2.
     * 
    **/
    data: XOR<feedback_question_2CreateInput, feedback_question_2UncheckedCreateInput>
  }


  /**
   * feedback_question_2 createMany
   */
  export type feedback_question_2CreateManyArgs = {
    /**
     * The data used to create many feedback_question_2s.
     * 
    **/
    data: Enumerable<feedback_question_2CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * feedback_question_2 update
   */
  export type feedback_question_2UpdateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * The data needed to update a feedback_question_2.
     * 
    **/
    data: XOR<feedback_question_2UpdateInput, feedback_question_2UncheckedUpdateInput>
    /**
     * Choose, which feedback_question_2 to update.
     * 
    **/
    where: feedback_question_2WhereUniqueInput
  }


  /**
   * feedback_question_2 updateMany
   */
  export type feedback_question_2UpdateManyArgs = {
    /**
     * The data used to update feedback_question_2s.
     * 
    **/
    data: XOR<feedback_question_2UpdateManyMutationInput, feedback_question_2UncheckedUpdateManyInput>
    /**
     * Filter which feedback_question_2s to update
     * 
    **/
    where?: feedback_question_2WhereInput
  }


  /**
   * feedback_question_2 upsert
   */
  export type feedback_question_2UpsertArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * The filter to search for the feedback_question_2 to update in case it exists.
     * 
    **/
    where: feedback_question_2WhereUniqueInput
    /**
     * In case the feedback_question_2 found by the `where` argument doesn't exist, create a new feedback_question_2 with this data.
     * 
    **/
    create: XOR<feedback_question_2CreateInput, feedback_question_2UncheckedCreateInput>
    /**
     * In case the feedback_question_2 was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<feedback_question_2UpdateInput, feedback_question_2UncheckedUpdateInput>
  }


  /**
   * feedback_question_2 delete
   */
  export type feedback_question_2DeleteArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
    /**
     * Filter which feedback_question_2 to delete.
     * 
    **/
    where: feedback_question_2WhereUniqueInput
  }


  /**
   * feedback_question_2 deleteMany
   */
  export type feedback_question_2DeleteManyArgs = {
    /**
     * Filter which feedback_question_2s to delete
     * 
    **/
    where?: feedback_question_2WhereInput
  }


  /**
   * feedback_question_2: findUniqueOrThrow
   */
  export type feedback_question_2FindUniqueOrThrowArgs = feedback_question_2FindUniqueArgsBase
      

  /**
   * feedback_question_2: findFirstOrThrow
   */
  export type feedback_question_2FindFirstOrThrowArgs = feedback_question_2FindFirstArgsBase
      

  /**
   * feedback_question_2 without action
   */
  export type feedback_question_2Args = {
    /**
     * Select specific fields to fetch from the feedback_question_2
     * 
    **/
    select?: feedback_question_2Select | null
  }



  /**
   * Model feedback_question_3
   */


  export type AggregateFeedback_question_3 = {
    _count: Feedback_question_3CountAggregateOutputType | null
    _avg: Feedback_question_3AvgAggregateOutputType | null
    _sum: Feedback_question_3SumAggregateOutputType | null
    _min: Feedback_question_3MinAggregateOutputType | null
    _max: Feedback_question_3MaxAggregateOutputType | null
  }

  export type Feedback_question_3AvgAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_3SumAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_3MinAggregateOutputType = {
    ID: number | null
    question_3: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_3MaxAggregateOutputType = {
    ID: number | null
    question_3: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_3CountAggregateOutputType = {
    ID: number
    question_3: number
    answer_1: number
    answer_2: number
    _all: number
  }


  export type Feedback_question_3AvgAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_3SumAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_3MinAggregateInputType = {
    ID?: true
    question_3?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_3MaxAggregateInputType = {
    ID?: true
    question_3?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_3CountAggregateInputType = {
    ID?: true
    question_3?: true
    answer_1?: true
    answer_2?: true
    _all?: true
  }

  export type Feedback_question_3AggregateArgs = {
    /**
     * Filter which feedback_question_3 to aggregate.
     * 
    **/
    where?: feedback_question_3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_3s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: feedback_question_3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_3s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_3s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedback_question_3s
    **/
    _count?: true | Feedback_question_3CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Feedback_question_3AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Feedback_question_3SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Feedback_question_3MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Feedback_question_3MaxAggregateInputType
  }

  export type GetFeedback_question_3AggregateType<T extends Feedback_question_3AggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback_question_3]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback_question_3[P]>
      : GetScalarType<T[P], AggregateFeedback_question_3[P]>
  }




  export type Feedback_question_3GroupByArgs = {
    where?: feedback_question_3WhereInput
    orderBy?: Enumerable<feedback_question_3OrderByWithAggregationInput>
    by: Array<Feedback_question_3ScalarFieldEnum>
    having?: feedback_question_3ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Feedback_question_3CountAggregateInputType | true
    _avg?: Feedback_question_3AvgAggregateInputType
    _sum?: Feedback_question_3SumAggregateInputType
    _min?: Feedback_question_3MinAggregateInputType
    _max?: Feedback_question_3MaxAggregateInputType
  }


  export type Feedback_question_3GroupByOutputType = {
    ID: number
    question_3: string
    answer_1: string
    answer_2: string | null
    _count: Feedback_question_3CountAggregateOutputType | null
    _avg: Feedback_question_3AvgAggregateOutputType | null
    _sum: Feedback_question_3SumAggregateOutputType | null
    _min: Feedback_question_3MinAggregateOutputType | null
    _max: Feedback_question_3MaxAggregateOutputType | null
  }

  type GetFeedback_question_3GroupByPayload<T extends Feedback_question_3GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Feedback_question_3GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Feedback_question_3GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Feedback_question_3GroupByOutputType[P]>
            : GetScalarType<T[P], Feedback_question_3GroupByOutputType[P]>
        }
      >
    >


  export type feedback_question_3Select = {
    ID?: boolean
    question_3?: boolean
    answer_1?: boolean
    answer_2?: boolean
  }

  export type feedback_question_3GetPayload<
    S extends boolean | null | undefined | feedback_question_3Args,
    U = keyof S
      > = S extends true
        ? feedback_question_3
    : S extends undefined
    ? never
    : S extends feedback_question_3Args | feedback_question_3FindManyArgs
    ?'include' extends U
    ? feedback_question_3 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof feedback_question_3 ? feedback_question_3[P] : never
  } 
    : feedback_question_3
  : feedback_question_3


  type feedback_question_3CountArgs = Merge<
    Omit<feedback_question_3FindManyArgs, 'select' | 'include'> & {
      select?: Feedback_question_3CountAggregateInputType | true
    }
  >

  export interface feedback_question_3Delegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback_question_3 that matches the filter.
     * @param {feedback_question_3FindUniqueArgs} args - Arguments to find a Feedback_question_3
     * @example
     * // Get one Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedback_question_3FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, feedback_question_3FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'feedback_question_3'> extends True ? CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3 | null >, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T> | null >>

    /**
     * Find the first Feedback_question_3 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_3FindFirstArgs} args - Arguments to find a Feedback_question_3
     * @example
     * // Get one Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedback_question_3FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, feedback_question_3FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'feedback_question_3'> extends True ? CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3 | null >, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T> | null >>

    /**
     * Find zero or more Feedback_question_3s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_3FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedback_question_3s
     * const feedback_question_3s = await prisma.feedback_question_3.findMany()
     * 
     * // Get first 10 Feedback_question_3s
     * const feedback_question_3s = await prisma.feedback_question_3.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const feedback_question_3WithIDOnly = await prisma.feedback_question_3.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends feedback_question_3FindManyArgs>(
      args?: SelectSubset<T, feedback_question_3FindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<feedback_question_3>>, PrismaPromise<Array<feedback_question_3GetPayload<T>>>>

    /**
     * Create a Feedback_question_3.
     * @param {feedback_question_3CreateArgs} args - Arguments to create a Feedback_question_3.
     * @example
     * // Create one Feedback_question_3
     * const Feedback_question_3 = await prisma.feedback_question_3.create({
     *   data: {
     *     // ... data to create a Feedback_question_3
     *   }
     * })
     * 
    **/
    create<T extends feedback_question_3CreateArgs>(
      args: SelectSubset<T, feedback_question_3CreateArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Create many Feedback_question_3s.
     *     @param {feedback_question_3CreateManyArgs} args - Arguments to create many Feedback_question_3s.
     *     @example
     *     // Create many Feedback_question_3s
     *     const feedback_question_3 = await prisma.feedback_question_3.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedback_question_3CreateManyArgs>(
      args?: SelectSubset<T, feedback_question_3CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback_question_3.
     * @param {feedback_question_3DeleteArgs} args - Arguments to delete one Feedback_question_3.
     * @example
     * // Delete one Feedback_question_3
     * const Feedback_question_3 = await prisma.feedback_question_3.delete({
     *   where: {
     *     // ... filter to delete one Feedback_question_3
     *   }
     * })
     * 
    **/
    delete<T extends feedback_question_3DeleteArgs>(
      args: SelectSubset<T, feedback_question_3DeleteArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Update one Feedback_question_3.
     * @param {feedback_question_3UpdateArgs} args - Arguments to update one Feedback_question_3.
     * @example
     * // Update one Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedback_question_3UpdateArgs>(
      args: SelectSubset<T, feedback_question_3UpdateArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Delete zero or more Feedback_question_3s.
     * @param {feedback_question_3DeleteManyArgs} args - Arguments to filter Feedback_question_3s to delete.
     * @example
     * // Delete a few Feedback_question_3s
     * const { count } = await prisma.feedback_question_3.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedback_question_3DeleteManyArgs>(
      args?: SelectSubset<T, feedback_question_3DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedback_question_3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_3UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedback_question_3s
     * const feedback_question_3 = await prisma.feedback_question_3.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedback_question_3UpdateManyArgs>(
      args: SelectSubset<T, feedback_question_3UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback_question_3.
     * @param {feedback_question_3UpsertArgs} args - Arguments to update or create a Feedback_question_3.
     * @example
     * // Update or create a Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.upsert({
     *   create: {
     *     // ... data to create a Feedback_question_3
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback_question_3 we want to update
     *   }
     * })
    **/
    upsert<T extends feedback_question_3UpsertArgs>(
      args: SelectSubset<T, feedback_question_3UpsertArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Find one Feedback_question_3 that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {feedback_question_3FindUniqueOrThrowArgs} args - Arguments to find a Feedback_question_3
     * @example
     * // Get one Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedback_question_3FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_3FindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Find the first Feedback_question_3 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_3FindFirstOrThrowArgs} args - Arguments to find a Feedback_question_3
     * @example
     * // Get one Feedback_question_3
     * const feedback_question_3 = await prisma.feedback_question_3.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedback_question_3FindFirstOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_3FindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_3Client<feedback_question_3>, Prisma__feedback_question_3Client<feedback_question_3GetPayload<T>>>

    /**
     * Count the number of Feedback_question_3s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_3CountArgs} args - Arguments to filter Feedback_question_3s to count.
     * @example
     * // Count the number of Feedback_question_3s
     * const count = await prisma.feedback_question_3.count({
     *   where: {
     *     // ... the filter for the Feedback_question_3s we want to count
     *   }
     * })
    **/
    count<T extends feedback_question_3CountArgs>(
      args?: Subset<T, feedback_question_3CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Feedback_question_3CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback_question_3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_3AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Feedback_question_3AggregateArgs>(args: Subset<T, Feedback_question_3AggregateArgs>): PrismaPromise<GetFeedback_question_3AggregateType<T>>

    /**
     * Group by Feedback_question_3.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_3GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Feedback_question_3GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Feedback_question_3GroupByArgs['orderBy'] }
        : { orderBy?: Feedback_question_3GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Feedback_question_3GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedback_question_3GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for feedback_question_3.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__feedback_question_3Client<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * feedback_question_3 base type for findUnique actions
   */
  export type feedback_question_3FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * Filter, which feedback_question_3 to fetch.
     * 
    **/
    where: feedback_question_3WhereUniqueInput
  }

  /**
   * feedback_question_3: findUnique
   */
  export interface feedback_question_3FindUniqueArgs extends feedback_question_3FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_3 base type for findFirst actions
   */
  export type feedback_question_3FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * Filter, which feedback_question_3 to fetch.
     * 
    **/
    where?: feedback_question_3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_3s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_question_3s.
     * 
    **/
    cursor?: feedback_question_3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_3s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_3s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_question_3s.
     * 
    **/
    distinct?: Enumerable<Feedback_question_3ScalarFieldEnum>
  }

  /**
   * feedback_question_3: findFirst
   */
  export interface feedback_question_3FindFirstArgs extends feedback_question_3FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_3 findMany
   */
  export type feedback_question_3FindManyArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * Filter, which feedback_question_3s to fetch.
     * 
    **/
    where?: feedback_question_3WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_3s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_3OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedback_question_3s.
     * 
    **/
    cursor?: feedback_question_3WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_3s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_3s.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Feedback_question_3ScalarFieldEnum>
  }


  /**
   * feedback_question_3 create
   */
  export type feedback_question_3CreateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * The data needed to create a feedback_question_3.
     * 
    **/
    data: XOR<feedback_question_3CreateInput, feedback_question_3UncheckedCreateInput>
  }


  /**
   * feedback_question_3 createMany
   */
  export type feedback_question_3CreateManyArgs = {
    /**
     * The data used to create many feedback_question_3s.
     * 
    **/
    data: Enumerable<feedback_question_3CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * feedback_question_3 update
   */
  export type feedback_question_3UpdateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * The data needed to update a feedback_question_3.
     * 
    **/
    data: XOR<feedback_question_3UpdateInput, feedback_question_3UncheckedUpdateInput>
    /**
     * Choose, which feedback_question_3 to update.
     * 
    **/
    where: feedback_question_3WhereUniqueInput
  }


  /**
   * feedback_question_3 updateMany
   */
  export type feedback_question_3UpdateManyArgs = {
    /**
     * The data used to update feedback_question_3s.
     * 
    **/
    data: XOR<feedback_question_3UpdateManyMutationInput, feedback_question_3UncheckedUpdateManyInput>
    /**
     * Filter which feedback_question_3s to update
     * 
    **/
    where?: feedback_question_3WhereInput
  }


  /**
   * feedback_question_3 upsert
   */
  export type feedback_question_3UpsertArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * The filter to search for the feedback_question_3 to update in case it exists.
     * 
    **/
    where: feedback_question_3WhereUniqueInput
    /**
     * In case the feedback_question_3 found by the `where` argument doesn't exist, create a new feedback_question_3 with this data.
     * 
    **/
    create: XOR<feedback_question_3CreateInput, feedback_question_3UncheckedCreateInput>
    /**
     * In case the feedback_question_3 was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<feedback_question_3UpdateInput, feedback_question_3UncheckedUpdateInput>
  }


  /**
   * feedback_question_3 delete
   */
  export type feedback_question_3DeleteArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
    /**
     * Filter which feedback_question_3 to delete.
     * 
    **/
    where: feedback_question_3WhereUniqueInput
  }


  /**
   * feedback_question_3 deleteMany
   */
  export type feedback_question_3DeleteManyArgs = {
    /**
     * Filter which feedback_question_3s to delete
     * 
    **/
    where?: feedback_question_3WhereInput
  }


  /**
   * feedback_question_3: findUniqueOrThrow
   */
  export type feedback_question_3FindUniqueOrThrowArgs = feedback_question_3FindUniqueArgsBase
      

  /**
   * feedback_question_3: findFirstOrThrow
   */
  export type feedback_question_3FindFirstOrThrowArgs = feedback_question_3FindFirstArgsBase
      

  /**
   * feedback_question_3 without action
   */
  export type feedback_question_3Args = {
    /**
     * Select specific fields to fetch from the feedback_question_3
     * 
    **/
    select?: feedback_question_3Select | null
  }



  /**
   * Model feedback_question_4
   */


  export type AggregateFeedback_question_4 = {
    _count: Feedback_question_4CountAggregateOutputType | null
    _avg: Feedback_question_4AvgAggregateOutputType | null
    _sum: Feedback_question_4SumAggregateOutputType | null
    _min: Feedback_question_4MinAggregateOutputType | null
    _max: Feedback_question_4MaxAggregateOutputType | null
  }

  export type Feedback_question_4AvgAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_4SumAggregateOutputType = {
    ID: number | null
  }

  export type Feedback_question_4MinAggregateOutputType = {
    ID: number | null
    question_4: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_4MaxAggregateOutputType = {
    ID: number | null
    question_4: string | null
    answer_1: string | null
    answer_2: string | null
  }

  export type Feedback_question_4CountAggregateOutputType = {
    ID: number
    question_4: number
    answer_1: number
    answer_2: number
    _all: number
  }


  export type Feedback_question_4AvgAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_4SumAggregateInputType = {
    ID?: true
  }

  export type Feedback_question_4MinAggregateInputType = {
    ID?: true
    question_4?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_4MaxAggregateInputType = {
    ID?: true
    question_4?: true
    answer_1?: true
    answer_2?: true
  }

  export type Feedback_question_4CountAggregateInputType = {
    ID?: true
    question_4?: true
    answer_1?: true
    answer_2?: true
    _all?: true
  }

  export type Feedback_question_4AggregateArgs = {
    /**
     * Filter which feedback_question_4 to aggregate.
     * 
    **/
    where?: feedback_question_4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_4s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: feedback_question_4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_4s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_4s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedback_question_4s
    **/
    _count?: true | Feedback_question_4CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Feedback_question_4AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Feedback_question_4SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Feedback_question_4MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Feedback_question_4MaxAggregateInputType
  }

  export type GetFeedback_question_4AggregateType<T extends Feedback_question_4AggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback_question_4]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback_question_4[P]>
      : GetScalarType<T[P], AggregateFeedback_question_4[P]>
  }




  export type Feedback_question_4GroupByArgs = {
    where?: feedback_question_4WhereInput
    orderBy?: Enumerable<feedback_question_4OrderByWithAggregationInput>
    by: Array<Feedback_question_4ScalarFieldEnum>
    having?: feedback_question_4ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Feedback_question_4CountAggregateInputType | true
    _avg?: Feedback_question_4AvgAggregateInputType
    _sum?: Feedback_question_4SumAggregateInputType
    _min?: Feedback_question_4MinAggregateInputType
    _max?: Feedback_question_4MaxAggregateInputType
  }


  export type Feedback_question_4GroupByOutputType = {
    ID: number
    question_4: string
    answer_1: string
    answer_2: string | null
    _count: Feedback_question_4CountAggregateOutputType | null
    _avg: Feedback_question_4AvgAggregateOutputType | null
    _sum: Feedback_question_4SumAggregateOutputType | null
    _min: Feedback_question_4MinAggregateOutputType | null
    _max: Feedback_question_4MaxAggregateOutputType | null
  }

  type GetFeedback_question_4GroupByPayload<T extends Feedback_question_4GroupByArgs> = PrismaPromise<
    Array<
      PickArray<Feedback_question_4GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Feedback_question_4GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Feedback_question_4GroupByOutputType[P]>
            : GetScalarType<T[P], Feedback_question_4GroupByOutputType[P]>
        }
      >
    >


  export type feedback_question_4Select = {
    ID?: boolean
    question_4?: boolean
    answer_1?: boolean
    answer_2?: boolean
  }

  export type feedback_question_4GetPayload<
    S extends boolean | null | undefined | feedback_question_4Args,
    U = keyof S
      > = S extends true
        ? feedback_question_4
    : S extends undefined
    ? never
    : S extends feedback_question_4Args | feedback_question_4FindManyArgs
    ?'include' extends U
    ? feedback_question_4 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof feedback_question_4 ? feedback_question_4[P] : never
  } 
    : feedback_question_4
  : feedback_question_4


  type feedback_question_4CountArgs = Merge<
    Omit<feedback_question_4FindManyArgs, 'select' | 'include'> & {
      select?: Feedback_question_4CountAggregateInputType | true
    }
  >

  export interface feedback_question_4Delegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback_question_4 that matches the filter.
     * @param {feedback_question_4FindUniqueArgs} args - Arguments to find a Feedback_question_4
     * @example
     * // Get one Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedback_question_4FindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, feedback_question_4FindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'feedback_question_4'> extends True ? CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4 | null >, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T> | null >>

    /**
     * Find the first Feedback_question_4 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_4FindFirstArgs} args - Arguments to find a Feedback_question_4
     * @example
     * // Get one Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedback_question_4FindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, feedback_question_4FindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'feedback_question_4'> extends True ? CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>> : CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4 | null >, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T> | null >>

    /**
     * Find zero or more Feedback_question_4s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_4FindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedback_question_4s
     * const feedback_question_4s = await prisma.feedback_question_4.findMany()
     * 
     * // Get first 10 Feedback_question_4s
     * const feedback_question_4s = await prisma.feedback_question_4.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const feedback_question_4WithIDOnly = await prisma.feedback_question_4.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends feedback_question_4FindManyArgs>(
      args?: SelectSubset<T, feedback_question_4FindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<feedback_question_4>>, PrismaPromise<Array<feedback_question_4GetPayload<T>>>>

    /**
     * Create a Feedback_question_4.
     * @param {feedback_question_4CreateArgs} args - Arguments to create a Feedback_question_4.
     * @example
     * // Create one Feedback_question_4
     * const Feedback_question_4 = await prisma.feedback_question_4.create({
     *   data: {
     *     // ... data to create a Feedback_question_4
     *   }
     * })
     * 
    **/
    create<T extends feedback_question_4CreateArgs>(
      args: SelectSubset<T, feedback_question_4CreateArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Create many Feedback_question_4s.
     *     @param {feedback_question_4CreateManyArgs} args - Arguments to create many Feedback_question_4s.
     *     @example
     *     // Create many Feedback_question_4s
     *     const feedback_question_4 = await prisma.feedback_question_4.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedback_question_4CreateManyArgs>(
      args?: SelectSubset<T, feedback_question_4CreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback_question_4.
     * @param {feedback_question_4DeleteArgs} args - Arguments to delete one Feedback_question_4.
     * @example
     * // Delete one Feedback_question_4
     * const Feedback_question_4 = await prisma.feedback_question_4.delete({
     *   where: {
     *     // ... filter to delete one Feedback_question_4
     *   }
     * })
     * 
    **/
    delete<T extends feedback_question_4DeleteArgs>(
      args: SelectSubset<T, feedback_question_4DeleteArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Update one Feedback_question_4.
     * @param {feedback_question_4UpdateArgs} args - Arguments to update one Feedback_question_4.
     * @example
     * // Update one Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedback_question_4UpdateArgs>(
      args: SelectSubset<T, feedback_question_4UpdateArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Delete zero or more Feedback_question_4s.
     * @param {feedback_question_4DeleteManyArgs} args - Arguments to filter Feedback_question_4s to delete.
     * @example
     * // Delete a few Feedback_question_4s
     * const { count } = await prisma.feedback_question_4.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedback_question_4DeleteManyArgs>(
      args?: SelectSubset<T, feedback_question_4DeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedback_question_4s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_4UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedback_question_4s
     * const feedback_question_4 = await prisma.feedback_question_4.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedback_question_4UpdateManyArgs>(
      args: SelectSubset<T, feedback_question_4UpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback_question_4.
     * @param {feedback_question_4UpsertArgs} args - Arguments to update or create a Feedback_question_4.
     * @example
     * // Update or create a Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.upsert({
     *   create: {
     *     // ... data to create a Feedback_question_4
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback_question_4 we want to update
     *   }
     * })
    **/
    upsert<T extends feedback_question_4UpsertArgs>(
      args: SelectSubset<T, feedback_question_4UpsertArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Find one Feedback_question_4 that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {feedback_question_4FindUniqueOrThrowArgs} args - Arguments to find a Feedback_question_4
     * @example
     * // Get one Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedback_question_4FindUniqueOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_4FindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Find the first Feedback_question_4 that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_4FindFirstOrThrowArgs} args - Arguments to find a Feedback_question_4
     * @example
     * // Get one Feedback_question_4
     * const feedback_question_4 = await prisma.feedback_question_4.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedback_question_4FindFirstOrThrowArgs>(
      args?: SelectSubset<T, feedback_question_4FindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__feedback_question_4Client<feedback_question_4>, Prisma__feedback_question_4Client<feedback_question_4GetPayload<T>>>

    /**
     * Count the number of Feedback_question_4s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_question_4CountArgs} args - Arguments to filter Feedback_question_4s to count.
     * @example
     * // Count the number of Feedback_question_4s
     * const count = await prisma.feedback_question_4.count({
     *   where: {
     *     // ... the filter for the Feedback_question_4s we want to count
     *   }
     * })
    **/
    count<T extends feedback_question_4CountArgs>(
      args?: Subset<T, feedback_question_4CountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Feedback_question_4CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback_question_4.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_4AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Feedback_question_4AggregateArgs>(args: Subset<T, Feedback_question_4AggregateArgs>): PrismaPromise<GetFeedback_question_4AggregateType<T>>

    /**
     * Group by Feedback_question_4.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_question_4GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Feedback_question_4GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Feedback_question_4GroupByArgs['orderBy'] }
        : { orderBy?: Feedback_question_4GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Feedback_question_4GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedback_question_4GroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for feedback_question_4.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__feedback_question_4Client<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * feedback_question_4 base type for findUnique actions
   */
  export type feedback_question_4FindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * Filter, which feedback_question_4 to fetch.
     * 
    **/
    where: feedback_question_4WhereUniqueInput
  }

  /**
   * feedback_question_4: findUnique
   */
  export interface feedback_question_4FindUniqueArgs extends feedback_question_4FindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_4 base type for findFirst actions
   */
  export type feedback_question_4FindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * Filter, which feedback_question_4 to fetch.
     * 
    **/
    where?: feedback_question_4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_4s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_question_4s.
     * 
    **/
    cursor?: feedback_question_4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_4s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_4s.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_question_4s.
     * 
    **/
    distinct?: Enumerable<Feedback_question_4ScalarFieldEnum>
  }

  /**
   * feedback_question_4: findFirst
   */
  export interface feedback_question_4FindFirstArgs extends feedback_question_4FindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * feedback_question_4 findMany
   */
  export type feedback_question_4FindManyArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * Filter, which feedback_question_4s to fetch.
     * 
    **/
    where?: feedback_question_4WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_question_4s to fetch.
     * 
    **/
    orderBy?: Enumerable<feedback_question_4OrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedback_question_4s.
     * 
    **/
    cursor?: feedback_question_4WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_question_4s from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_question_4s.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Feedback_question_4ScalarFieldEnum>
  }


  /**
   * feedback_question_4 create
   */
  export type feedback_question_4CreateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * The data needed to create a feedback_question_4.
     * 
    **/
    data: XOR<feedback_question_4CreateInput, feedback_question_4UncheckedCreateInput>
  }


  /**
   * feedback_question_4 createMany
   */
  export type feedback_question_4CreateManyArgs = {
    /**
     * The data used to create many feedback_question_4s.
     * 
    **/
    data: Enumerable<feedback_question_4CreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * feedback_question_4 update
   */
  export type feedback_question_4UpdateArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * The data needed to update a feedback_question_4.
     * 
    **/
    data: XOR<feedback_question_4UpdateInput, feedback_question_4UncheckedUpdateInput>
    /**
     * Choose, which feedback_question_4 to update.
     * 
    **/
    where: feedback_question_4WhereUniqueInput
  }


  /**
   * feedback_question_4 updateMany
   */
  export type feedback_question_4UpdateManyArgs = {
    /**
     * The data used to update feedback_question_4s.
     * 
    **/
    data: XOR<feedback_question_4UpdateManyMutationInput, feedback_question_4UncheckedUpdateManyInput>
    /**
     * Filter which feedback_question_4s to update
     * 
    **/
    where?: feedback_question_4WhereInput
  }


  /**
   * feedback_question_4 upsert
   */
  export type feedback_question_4UpsertArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * The filter to search for the feedback_question_4 to update in case it exists.
     * 
    **/
    where: feedback_question_4WhereUniqueInput
    /**
     * In case the feedback_question_4 found by the `where` argument doesn't exist, create a new feedback_question_4 with this data.
     * 
    **/
    create: XOR<feedback_question_4CreateInput, feedback_question_4UncheckedCreateInput>
    /**
     * In case the feedback_question_4 was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<feedback_question_4UpdateInput, feedback_question_4UncheckedUpdateInput>
  }


  /**
   * feedback_question_4 delete
   */
  export type feedback_question_4DeleteArgs = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
    /**
     * Filter which feedback_question_4 to delete.
     * 
    **/
    where: feedback_question_4WhereUniqueInput
  }


  /**
   * feedback_question_4 deleteMany
   */
  export type feedback_question_4DeleteManyArgs = {
    /**
     * Filter which feedback_question_4s to delete
     * 
    **/
    where?: feedback_question_4WhereInput
  }


  /**
   * feedback_question_4: findUniqueOrThrow
   */
  export type feedback_question_4FindUniqueOrThrowArgs = feedback_question_4FindUniqueArgsBase
      

  /**
   * feedback_question_4: findFirstOrThrow
   */
  export type feedback_question_4FindFirstOrThrowArgs = feedback_question_4FindFirstArgsBase
      

  /**
   * feedback_question_4 without action
   */
  export type feedback_question_4Args = {
    /**
     * Select specific fields to fetch from the feedback_question_4
     * 
    **/
    select?: feedback_question_4Select | null
  }



  /**
   * Model selected1_question
   */


  export type AggregateSelected1_question = {
    _count: Selected1_questionCountAggregateOutputType | null
    _avg: Selected1_questionAvgAggregateOutputType | null
    _sum: Selected1_questionSumAggregateOutputType | null
    _min: Selected1_questionMinAggregateOutputType | null
    _max: Selected1_questionMaxAggregateOutputType | null
  }

  export type Selected1_questionAvgAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected1_questionSumAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected1_questionMinAggregateOutputType = {
    ID: number | null
    question_1: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected1_questionMaxAggregateOutputType = {
    ID: number | null
    question_1: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected1_questionCountAggregateOutputType = {
    ID: number
    question_1: number
    answer: number
    selected_id: number
    _all: number
  }


  export type Selected1_questionAvgAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected1_questionSumAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected1_questionMinAggregateInputType = {
    ID?: true
    question_1?: true
    answer?: true
    selected_id?: true
  }

  export type Selected1_questionMaxAggregateInputType = {
    ID?: true
    question_1?: true
    answer?: true
    selected_id?: true
  }

  export type Selected1_questionCountAggregateInputType = {
    ID?: true
    question_1?: true
    answer?: true
    selected_id?: true
    _all?: true
  }

  export type Selected1_questionAggregateArgs = {
    /**
     * Filter which selected1_question to aggregate.
     * 
    **/
    where?: selected1_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected1_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected1_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: selected1_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected1_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected1_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selected1_questions
    **/
    _count?: true | Selected1_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Selected1_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Selected1_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Selected1_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Selected1_questionMaxAggregateInputType
  }

  export type GetSelected1_questionAggregateType<T extends Selected1_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateSelected1_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelected1_question[P]>
      : GetScalarType<T[P], AggregateSelected1_question[P]>
  }




  export type Selected1_questionGroupByArgs = {
    where?: selected1_questionWhereInput
    orderBy?: Enumerable<selected1_questionOrderByWithAggregationInput>
    by: Array<Selected1_questionScalarFieldEnum>
    having?: selected1_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Selected1_questionCountAggregateInputType | true
    _avg?: Selected1_questionAvgAggregateInputType
    _sum?: Selected1_questionSumAggregateInputType
    _min?: Selected1_questionMinAggregateInputType
    _max?: Selected1_questionMaxAggregateInputType
  }


  export type Selected1_questionGroupByOutputType = {
    ID: number
    question_1: string
    answer: string
    selected_id: number
    _count: Selected1_questionCountAggregateOutputType | null
    _avg: Selected1_questionAvgAggregateOutputType | null
    _sum: Selected1_questionSumAggregateOutputType | null
    _min: Selected1_questionMinAggregateOutputType | null
    _max: Selected1_questionMaxAggregateOutputType | null
  }

  type GetSelected1_questionGroupByPayload<T extends Selected1_questionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Selected1_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Selected1_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Selected1_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Selected1_questionGroupByOutputType[P]>
        }
      >
    >


  export type selected1_questionSelect = {
    ID?: boolean
    question_1?: boolean
    answer?: boolean
    selected_id?: boolean
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected1_questionInclude = {
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected1_questionGetPayload<
    S extends boolean | null | undefined | selected1_questionArgs,
    U = keyof S
      > = S extends true
        ? selected1_question
    : S extends undefined
    ? never
    : S extends selected1_questionArgs | selected1_questionFindManyArgs
    ?'include' extends U
    ? selected1_question  & {
    [P in TrueKeys<S['include']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['select'][P]> :  P extends keyof selected1_question ? selected1_question[P] : never
  } 
    : selected1_question
  : selected1_question


  type selected1_questionCountArgs = Merge<
    Omit<selected1_questionFindManyArgs, 'select' | 'include'> & {
      select?: Selected1_questionCountAggregateInputType | true
    }
  >

  export interface selected1_questionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Selected1_question that matches the filter.
     * @param {selected1_questionFindUniqueArgs} args - Arguments to find a Selected1_question
     * @example
     * // Get one Selected1_question
     * const selected1_question = await prisma.selected1_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends selected1_questionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, selected1_questionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'selected1_question'> extends True ? CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected1_questionClient<selected1_question | null >, Prisma__selected1_questionClient<selected1_questionGetPayload<T> | null >>

    /**
     * Find the first Selected1_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected1_questionFindFirstArgs} args - Arguments to find a Selected1_question
     * @example
     * // Get one Selected1_question
     * const selected1_question = await prisma.selected1_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends selected1_questionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, selected1_questionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'selected1_question'> extends True ? CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected1_questionClient<selected1_question | null >, Prisma__selected1_questionClient<selected1_questionGetPayload<T> | null >>

    /**
     * Find zero or more Selected1_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected1_questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Selected1_questions
     * const selected1_questions = await prisma.selected1_question.findMany()
     * 
     * // Get first 10 Selected1_questions
     * const selected1_questions = await prisma.selected1_question.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const selected1_questionWithIDOnly = await prisma.selected1_question.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends selected1_questionFindManyArgs>(
      args?: SelectSubset<T, selected1_questionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<selected1_question>>, PrismaPromise<Array<selected1_questionGetPayload<T>>>>

    /**
     * Create a Selected1_question.
     * @param {selected1_questionCreateArgs} args - Arguments to create a Selected1_question.
     * @example
     * // Create one Selected1_question
     * const Selected1_question = await prisma.selected1_question.create({
     *   data: {
     *     // ... data to create a Selected1_question
     *   }
     * })
     * 
    **/
    create<T extends selected1_questionCreateArgs>(
      args: SelectSubset<T, selected1_questionCreateArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Create many Selected1_questions.
     *     @param {selected1_questionCreateManyArgs} args - Arguments to create many Selected1_questions.
     *     @example
     *     // Create many Selected1_questions
     *     const selected1_question = await prisma.selected1_question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends selected1_questionCreateManyArgs>(
      args?: SelectSubset<T, selected1_questionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Selected1_question.
     * @param {selected1_questionDeleteArgs} args - Arguments to delete one Selected1_question.
     * @example
     * // Delete one Selected1_question
     * const Selected1_question = await prisma.selected1_question.delete({
     *   where: {
     *     // ... filter to delete one Selected1_question
     *   }
     * })
     * 
    **/
    delete<T extends selected1_questionDeleteArgs>(
      args: SelectSubset<T, selected1_questionDeleteArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Update one Selected1_question.
     * @param {selected1_questionUpdateArgs} args - Arguments to update one Selected1_question.
     * @example
     * // Update one Selected1_question
     * const selected1_question = await prisma.selected1_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends selected1_questionUpdateArgs>(
      args: SelectSubset<T, selected1_questionUpdateArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Delete zero or more Selected1_questions.
     * @param {selected1_questionDeleteManyArgs} args - Arguments to filter Selected1_questions to delete.
     * @example
     * // Delete a few Selected1_questions
     * const { count } = await prisma.selected1_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends selected1_questionDeleteManyArgs>(
      args?: SelectSubset<T, selected1_questionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Selected1_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected1_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Selected1_questions
     * const selected1_question = await prisma.selected1_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends selected1_questionUpdateManyArgs>(
      args: SelectSubset<T, selected1_questionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Selected1_question.
     * @param {selected1_questionUpsertArgs} args - Arguments to update or create a Selected1_question.
     * @example
     * // Update or create a Selected1_question
     * const selected1_question = await prisma.selected1_question.upsert({
     *   create: {
     *     // ... data to create a Selected1_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Selected1_question we want to update
     *   }
     * })
    **/
    upsert<T extends selected1_questionUpsertArgs>(
      args: SelectSubset<T, selected1_questionUpsertArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Find one Selected1_question that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {selected1_questionFindUniqueOrThrowArgs} args - Arguments to find a Selected1_question
     * @example
     * // Get one Selected1_question
     * const selected1_question = await prisma.selected1_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends selected1_questionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, selected1_questionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Find the first Selected1_question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected1_questionFindFirstOrThrowArgs} args - Arguments to find a Selected1_question
     * @example
     * // Get one Selected1_question
     * const selected1_question = await prisma.selected1_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends selected1_questionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, selected1_questionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__selected1_questionClient<selected1_question>, Prisma__selected1_questionClient<selected1_questionGetPayload<T>>>

    /**
     * Count the number of Selected1_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected1_questionCountArgs} args - Arguments to filter Selected1_questions to count.
     * @example
     * // Count the number of Selected1_questions
     * const count = await prisma.selected1_question.count({
     *   where: {
     *     // ... the filter for the Selected1_questions we want to count
     *   }
     * })
    **/
    count<T extends selected1_questionCountArgs>(
      args?: Subset<T, selected1_questionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Selected1_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Selected1_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected1_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Selected1_questionAggregateArgs>(args: Subset<T, Selected1_questionAggregateArgs>): PrismaPromise<GetSelected1_questionAggregateType<T>>

    /**
     * Group by Selected1_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected1_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Selected1_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Selected1_questionGroupByArgs['orderBy'] }
        : { orderBy?: Selected1_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Selected1_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelected1_questionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for selected1_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__selected1_questionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    selected_teachers<T extends selected_teachersArgs = {}>(args?: Subset<T, selected_teachersArgs>): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * selected1_question base type for findUnique actions
   */
  export type selected1_questionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * Filter, which selected1_question to fetch.
     * 
    **/
    where: selected1_questionWhereUniqueInput
  }

  /**
   * selected1_question: findUnique
   */
  export interface selected1_questionFindUniqueArgs extends selected1_questionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected1_question base type for findFirst actions
   */
  export type selected1_questionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * Filter, which selected1_question to fetch.
     * 
    **/
    where?: selected1_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected1_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected1_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selected1_questions.
     * 
    **/
    cursor?: selected1_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected1_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected1_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selected1_questions.
     * 
    **/
    distinct?: Enumerable<Selected1_questionScalarFieldEnum>
  }

  /**
   * selected1_question: findFirst
   */
  export interface selected1_questionFindFirstArgs extends selected1_questionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected1_question findMany
   */
  export type selected1_questionFindManyArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * Filter, which selected1_questions to fetch.
     * 
    **/
    where?: selected1_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected1_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected1_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selected1_questions.
     * 
    **/
    cursor?: selected1_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected1_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected1_questions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Selected1_questionScalarFieldEnum>
  }


  /**
   * selected1_question create
   */
  export type selected1_questionCreateArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * The data needed to create a selected1_question.
     * 
    **/
    data: XOR<selected1_questionCreateInput, selected1_questionUncheckedCreateInput>
  }


  /**
   * selected1_question createMany
   */
  export type selected1_questionCreateManyArgs = {
    /**
     * The data used to create many selected1_questions.
     * 
    **/
    data: Enumerable<selected1_questionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * selected1_question update
   */
  export type selected1_questionUpdateArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * The data needed to update a selected1_question.
     * 
    **/
    data: XOR<selected1_questionUpdateInput, selected1_questionUncheckedUpdateInput>
    /**
     * Choose, which selected1_question to update.
     * 
    **/
    where: selected1_questionWhereUniqueInput
  }


  /**
   * selected1_question updateMany
   */
  export type selected1_questionUpdateManyArgs = {
    /**
     * The data used to update selected1_questions.
     * 
    **/
    data: XOR<selected1_questionUpdateManyMutationInput, selected1_questionUncheckedUpdateManyInput>
    /**
     * Filter which selected1_questions to update
     * 
    **/
    where?: selected1_questionWhereInput
  }


  /**
   * selected1_question upsert
   */
  export type selected1_questionUpsertArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * The filter to search for the selected1_question to update in case it exists.
     * 
    **/
    where: selected1_questionWhereUniqueInput
    /**
     * In case the selected1_question found by the `where` argument doesn't exist, create a new selected1_question with this data.
     * 
    **/
    create: XOR<selected1_questionCreateInput, selected1_questionUncheckedCreateInput>
    /**
     * In case the selected1_question was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<selected1_questionUpdateInput, selected1_questionUncheckedUpdateInput>
  }


  /**
   * selected1_question delete
   */
  export type selected1_questionDeleteArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
    /**
     * Filter which selected1_question to delete.
     * 
    **/
    where: selected1_questionWhereUniqueInput
  }


  /**
   * selected1_question deleteMany
   */
  export type selected1_questionDeleteManyArgs = {
    /**
     * Filter which selected1_questions to delete
     * 
    **/
    where?: selected1_questionWhereInput
  }


  /**
   * selected1_question: findUniqueOrThrow
   */
  export type selected1_questionFindUniqueOrThrowArgs = selected1_questionFindUniqueArgsBase
      

  /**
   * selected1_question: findFirstOrThrow
   */
  export type selected1_questionFindFirstOrThrowArgs = selected1_questionFindFirstArgsBase
      

  /**
   * selected1_question without action
   */
  export type selected1_questionArgs = {
    /**
     * Select specific fields to fetch from the selected1_question
     * 
    **/
    select?: selected1_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected1_questionInclude | null
  }



  /**
   * Model selected2_question
   */


  export type AggregateSelected2_question = {
    _count: Selected2_questionCountAggregateOutputType | null
    _avg: Selected2_questionAvgAggregateOutputType | null
    _sum: Selected2_questionSumAggregateOutputType | null
    _min: Selected2_questionMinAggregateOutputType | null
    _max: Selected2_questionMaxAggregateOutputType | null
  }

  export type Selected2_questionAvgAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected2_questionSumAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected2_questionMinAggregateOutputType = {
    ID: number | null
    question_2: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected2_questionMaxAggregateOutputType = {
    ID: number | null
    question_2: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected2_questionCountAggregateOutputType = {
    ID: number
    question_2: number
    answer: number
    selected_id: number
    _all: number
  }


  export type Selected2_questionAvgAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected2_questionSumAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected2_questionMinAggregateInputType = {
    ID?: true
    question_2?: true
    answer?: true
    selected_id?: true
  }

  export type Selected2_questionMaxAggregateInputType = {
    ID?: true
    question_2?: true
    answer?: true
    selected_id?: true
  }

  export type Selected2_questionCountAggregateInputType = {
    ID?: true
    question_2?: true
    answer?: true
    selected_id?: true
    _all?: true
  }

  export type Selected2_questionAggregateArgs = {
    /**
     * Filter which selected2_question to aggregate.
     * 
    **/
    where?: selected2_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected2_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected2_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: selected2_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected2_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected2_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selected2_questions
    **/
    _count?: true | Selected2_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Selected2_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Selected2_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Selected2_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Selected2_questionMaxAggregateInputType
  }

  export type GetSelected2_questionAggregateType<T extends Selected2_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateSelected2_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelected2_question[P]>
      : GetScalarType<T[P], AggregateSelected2_question[P]>
  }




  export type Selected2_questionGroupByArgs = {
    where?: selected2_questionWhereInput
    orderBy?: Enumerable<selected2_questionOrderByWithAggregationInput>
    by: Array<Selected2_questionScalarFieldEnum>
    having?: selected2_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Selected2_questionCountAggregateInputType | true
    _avg?: Selected2_questionAvgAggregateInputType
    _sum?: Selected2_questionSumAggregateInputType
    _min?: Selected2_questionMinAggregateInputType
    _max?: Selected2_questionMaxAggregateInputType
  }


  export type Selected2_questionGroupByOutputType = {
    ID: number
    question_2: string
    answer: string
    selected_id: number
    _count: Selected2_questionCountAggregateOutputType | null
    _avg: Selected2_questionAvgAggregateOutputType | null
    _sum: Selected2_questionSumAggregateOutputType | null
    _min: Selected2_questionMinAggregateOutputType | null
    _max: Selected2_questionMaxAggregateOutputType | null
  }

  type GetSelected2_questionGroupByPayload<T extends Selected2_questionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Selected2_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Selected2_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Selected2_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Selected2_questionGroupByOutputType[P]>
        }
      >
    >


  export type selected2_questionSelect = {
    ID?: boolean
    question_2?: boolean
    answer?: boolean
    selected_id?: boolean
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected2_questionInclude = {
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected2_questionGetPayload<
    S extends boolean | null | undefined | selected2_questionArgs,
    U = keyof S
      > = S extends true
        ? selected2_question
    : S extends undefined
    ? never
    : S extends selected2_questionArgs | selected2_questionFindManyArgs
    ?'include' extends U
    ? selected2_question  & {
    [P in TrueKeys<S['include']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['select'][P]> :  P extends keyof selected2_question ? selected2_question[P] : never
  } 
    : selected2_question
  : selected2_question


  type selected2_questionCountArgs = Merge<
    Omit<selected2_questionFindManyArgs, 'select' | 'include'> & {
      select?: Selected2_questionCountAggregateInputType | true
    }
  >

  export interface selected2_questionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Selected2_question that matches the filter.
     * @param {selected2_questionFindUniqueArgs} args - Arguments to find a Selected2_question
     * @example
     * // Get one Selected2_question
     * const selected2_question = await prisma.selected2_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends selected2_questionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, selected2_questionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'selected2_question'> extends True ? CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected2_questionClient<selected2_question | null >, Prisma__selected2_questionClient<selected2_questionGetPayload<T> | null >>

    /**
     * Find the first Selected2_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected2_questionFindFirstArgs} args - Arguments to find a Selected2_question
     * @example
     * // Get one Selected2_question
     * const selected2_question = await prisma.selected2_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends selected2_questionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, selected2_questionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'selected2_question'> extends True ? CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected2_questionClient<selected2_question | null >, Prisma__selected2_questionClient<selected2_questionGetPayload<T> | null >>

    /**
     * Find zero or more Selected2_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected2_questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Selected2_questions
     * const selected2_questions = await prisma.selected2_question.findMany()
     * 
     * // Get first 10 Selected2_questions
     * const selected2_questions = await prisma.selected2_question.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const selected2_questionWithIDOnly = await prisma.selected2_question.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends selected2_questionFindManyArgs>(
      args?: SelectSubset<T, selected2_questionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<selected2_question>>, PrismaPromise<Array<selected2_questionGetPayload<T>>>>

    /**
     * Create a Selected2_question.
     * @param {selected2_questionCreateArgs} args - Arguments to create a Selected2_question.
     * @example
     * // Create one Selected2_question
     * const Selected2_question = await prisma.selected2_question.create({
     *   data: {
     *     // ... data to create a Selected2_question
     *   }
     * })
     * 
    **/
    create<T extends selected2_questionCreateArgs>(
      args: SelectSubset<T, selected2_questionCreateArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Create many Selected2_questions.
     *     @param {selected2_questionCreateManyArgs} args - Arguments to create many Selected2_questions.
     *     @example
     *     // Create many Selected2_questions
     *     const selected2_question = await prisma.selected2_question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends selected2_questionCreateManyArgs>(
      args?: SelectSubset<T, selected2_questionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Selected2_question.
     * @param {selected2_questionDeleteArgs} args - Arguments to delete one Selected2_question.
     * @example
     * // Delete one Selected2_question
     * const Selected2_question = await prisma.selected2_question.delete({
     *   where: {
     *     // ... filter to delete one Selected2_question
     *   }
     * })
     * 
    **/
    delete<T extends selected2_questionDeleteArgs>(
      args: SelectSubset<T, selected2_questionDeleteArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Update one Selected2_question.
     * @param {selected2_questionUpdateArgs} args - Arguments to update one Selected2_question.
     * @example
     * // Update one Selected2_question
     * const selected2_question = await prisma.selected2_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends selected2_questionUpdateArgs>(
      args: SelectSubset<T, selected2_questionUpdateArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Delete zero or more Selected2_questions.
     * @param {selected2_questionDeleteManyArgs} args - Arguments to filter Selected2_questions to delete.
     * @example
     * // Delete a few Selected2_questions
     * const { count } = await prisma.selected2_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends selected2_questionDeleteManyArgs>(
      args?: SelectSubset<T, selected2_questionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Selected2_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected2_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Selected2_questions
     * const selected2_question = await prisma.selected2_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends selected2_questionUpdateManyArgs>(
      args: SelectSubset<T, selected2_questionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Selected2_question.
     * @param {selected2_questionUpsertArgs} args - Arguments to update or create a Selected2_question.
     * @example
     * // Update or create a Selected2_question
     * const selected2_question = await prisma.selected2_question.upsert({
     *   create: {
     *     // ... data to create a Selected2_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Selected2_question we want to update
     *   }
     * })
    **/
    upsert<T extends selected2_questionUpsertArgs>(
      args: SelectSubset<T, selected2_questionUpsertArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Find one Selected2_question that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {selected2_questionFindUniqueOrThrowArgs} args - Arguments to find a Selected2_question
     * @example
     * // Get one Selected2_question
     * const selected2_question = await prisma.selected2_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends selected2_questionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, selected2_questionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Find the first Selected2_question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected2_questionFindFirstOrThrowArgs} args - Arguments to find a Selected2_question
     * @example
     * // Get one Selected2_question
     * const selected2_question = await prisma.selected2_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends selected2_questionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, selected2_questionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__selected2_questionClient<selected2_question>, Prisma__selected2_questionClient<selected2_questionGetPayload<T>>>

    /**
     * Count the number of Selected2_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected2_questionCountArgs} args - Arguments to filter Selected2_questions to count.
     * @example
     * // Count the number of Selected2_questions
     * const count = await prisma.selected2_question.count({
     *   where: {
     *     // ... the filter for the Selected2_questions we want to count
     *   }
     * })
    **/
    count<T extends selected2_questionCountArgs>(
      args?: Subset<T, selected2_questionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Selected2_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Selected2_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected2_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Selected2_questionAggregateArgs>(args: Subset<T, Selected2_questionAggregateArgs>): PrismaPromise<GetSelected2_questionAggregateType<T>>

    /**
     * Group by Selected2_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected2_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Selected2_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Selected2_questionGroupByArgs['orderBy'] }
        : { orderBy?: Selected2_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Selected2_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelected2_questionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for selected2_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__selected2_questionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    selected_teachers<T extends selected_teachersArgs = {}>(args?: Subset<T, selected_teachersArgs>): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * selected2_question base type for findUnique actions
   */
  export type selected2_questionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * Filter, which selected2_question to fetch.
     * 
    **/
    where: selected2_questionWhereUniqueInput
  }

  /**
   * selected2_question: findUnique
   */
  export interface selected2_questionFindUniqueArgs extends selected2_questionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected2_question base type for findFirst actions
   */
  export type selected2_questionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * Filter, which selected2_question to fetch.
     * 
    **/
    where?: selected2_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected2_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected2_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selected2_questions.
     * 
    **/
    cursor?: selected2_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected2_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected2_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selected2_questions.
     * 
    **/
    distinct?: Enumerable<Selected2_questionScalarFieldEnum>
  }

  /**
   * selected2_question: findFirst
   */
  export interface selected2_questionFindFirstArgs extends selected2_questionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected2_question findMany
   */
  export type selected2_questionFindManyArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * Filter, which selected2_questions to fetch.
     * 
    **/
    where?: selected2_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected2_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected2_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selected2_questions.
     * 
    **/
    cursor?: selected2_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected2_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected2_questions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Selected2_questionScalarFieldEnum>
  }


  /**
   * selected2_question create
   */
  export type selected2_questionCreateArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * The data needed to create a selected2_question.
     * 
    **/
    data: XOR<selected2_questionCreateInput, selected2_questionUncheckedCreateInput>
  }


  /**
   * selected2_question createMany
   */
  export type selected2_questionCreateManyArgs = {
    /**
     * The data used to create many selected2_questions.
     * 
    **/
    data: Enumerable<selected2_questionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * selected2_question update
   */
  export type selected2_questionUpdateArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * The data needed to update a selected2_question.
     * 
    **/
    data: XOR<selected2_questionUpdateInput, selected2_questionUncheckedUpdateInput>
    /**
     * Choose, which selected2_question to update.
     * 
    **/
    where: selected2_questionWhereUniqueInput
  }


  /**
   * selected2_question updateMany
   */
  export type selected2_questionUpdateManyArgs = {
    /**
     * The data used to update selected2_questions.
     * 
    **/
    data: XOR<selected2_questionUpdateManyMutationInput, selected2_questionUncheckedUpdateManyInput>
    /**
     * Filter which selected2_questions to update
     * 
    **/
    where?: selected2_questionWhereInput
  }


  /**
   * selected2_question upsert
   */
  export type selected2_questionUpsertArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * The filter to search for the selected2_question to update in case it exists.
     * 
    **/
    where: selected2_questionWhereUniqueInput
    /**
     * In case the selected2_question found by the `where` argument doesn't exist, create a new selected2_question with this data.
     * 
    **/
    create: XOR<selected2_questionCreateInput, selected2_questionUncheckedCreateInput>
    /**
     * In case the selected2_question was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<selected2_questionUpdateInput, selected2_questionUncheckedUpdateInput>
  }


  /**
   * selected2_question delete
   */
  export type selected2_questionDeleteArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
    /**
     * Filter which selected2_question to delete.
     * 
    **/
    where: selected2_questionWhereUniqueInput
  }


  /**
   * selected2_question deleteMany
   */
  export type selected2_questionDeleteManyArgs = {
    /**
     * Filter which selected2_questions to delete
     * 
    **/
    where?: selected2_questionWhereInput
  }


  /**
   * selected2_question: findUniqueOrThrow
   */
  export type selected2_questionFindUniqueOrThrowArgs = selected2_questionFindUniqueArgsBase
      

  /**
   * selected2_question: findFirstOrThrow
   */
  export type selected2_questionFindFirstOrThrowArgs = selected2_questionFindFirstArgsBase
      

  /**
   * selected2_question without action
   */
  export type selected2_questionArgs = {
    /**
     * Select specific fields to fetch from the selected2_question
     * 
    **/
    select?: selected2_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected2_questionInclude | null
  }



  /**
   * Model selected3_question
   */


  export type AggregateSelected3_question = {
    _count: Selected3_questionCountAggregateOutputType | null
    _avg: Selected3_questionAvgAggregateOutputType | null
    _sum: Selected3_questionSumAggregateOutputType | null
    _min: Selected3_questionMinAggregateOutputType | null
    _max: Selected3_questionMaxAggregateOutputType | null
  }

  export type Selected3_questionAvgAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected3_questionSumAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected3_questionMinAggregateOutputType = {
    ID: number | null
    question_3: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected3_questionMaxAggregateOutputType = {
    ID: number | null
    question_3: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected3_questionCountAggregateOutputType = {
    ID: number
    question_3: number
    answer: number
    selected_id: number
    _all: number
  }


  export type Selected3_questionAvgAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected3_questionSumAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected3_questionMinAggregateInputType = {
    ID?: true
    question_3?: true
    answer?: true
    selected_id?: true
  }

  export type Selected3_questionMaxAggregateInputType = {
    ID?: true
    question_3?: true
    answer?: true
    selected_id?: true
  }

  export type Selected3_questionCountAggregateInputType = {
    ID?: true
    question_3?: true
    answer?: true
    selected_id?: true
    _all?: true
  }

  export type Selected3_questionAggregateArgs = {
    /**
     * Filter which selected3_question to aggregate.
     * 
    **/
    where?: selected3_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected3_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected3_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: selected3_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected3_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected3_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selected3_questions
    **/
    _count?: true | Selected3_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Selected3_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Selected3_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Selected3_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Selected3_questionMaxAggregateInputType
  }

  export type GetSelected3_questionAggregateType<T extends Selected3_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateSelected3_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelected3_question[P]>
      : GetScalarType<T[P], AggregateSelected3_question[P]>
  }




  export type Selected3_questionGroupByArgs = {
    where?: selected3_questionWhereInput
    orderBy?: Enumerable<selected3_questionOrderByWithAggregationInput>
    by: Array<Selected3_questionScalarFieldEnum>
    having?: selected3_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Selected3_questionCountAggregateInputType | true
    _avg?: Selected3_questionAvgAggregateInputType
    _sum?: Selected3_questionSumAggregateInputType
    _min?: Selected3_questionMinAggregateInputType
    _max?: Selected3_questionMaxAggregateInputType
  }


  export type Selected3_questionGroupByOutputType = {
    ID: number
    question_3: string
    answer: string
    selected_id: number
    _count: Selected3_questionCountAggregateOutputType | null
    _avg: Selected3_questionAvgAggregateOutputType | null
    _sum: Selected3_questionSumAggregateOutputType | null
    _min: Selected3_questionMinAggregateOutputType | null
    _max: Selected3_questionMaxAggregateOutputType | null
  }

  type GetSelected3_questionGroupByPayload<T extends Selected3_questionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Selected3_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Selected3_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Selected3_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Selected3_questionGroupByOutputType[P]>
        }
      >
    >


  export type selected3_questionSelect = {
    ID?: boolean
    question_3?: boolean
    answer?: boolean
    selected_id?: boolean
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected3_questionInclude = {
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected3_questionGetPayload<
    S extends boolean | null | undefined | selected3_questionArgs,
    U = keyof S
      > = S extends true
        ? selected3_question
    : S extends undefined
    ? never
    : S extends selected3_questionArgs | selected3_questionFindManyArgs
    ?'include' extends U
    ? selected3_question  & {
    [P in TrueKeys<S['include']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['select'][P]> :  P extends keyof selected3_question ? selected3_question[P] : never
  } 
    : selected3_question
  : selected3_question


  type selected3_questionCountArgs = Merge<
    Omit<selected3_questionFindManyArgs, 'select' | 'include'> & {
      select?: Selected3_questionCountAggregateInputType | true
    }
  >

  export interface selected3_questionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Selected3_question that matches the filter.
     * @param {selected3_questionFindUniqueArgs} args - Arguments to find a Selected3_question
     * @example
     * // Get one Selected3_question
     * const selected3_question = await prisma.selected3_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends selected3_questionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, selected3_questionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'selected3_question'> extends True ? CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected3_questionClient<selected3_question | null >, Prisma__selected3_questionClient<selected3_questionGetPayload<T> | null >>

    /**
     * Find the first Selected3_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected3_questionFindFirstArgs} args - Arguments to find a Selected3_question
     * @example
     * // Get one Selected3_question
     * const selected3_question = await prisma.selected3_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends selected3_questionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, selected3_questionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'selected3_question'> extends True ? CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected3_questionClient<selected3_question | null >, Prisma__selected3_questionClient<selected3_questionGetPayload<T> | null >>

    /**
     * Find zero or more Selected3_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected3_questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Selected3_questions
     * const selected3_questions = await prisma.selected3_question.findMany()
     * 
     * // Get first 10 Selected3_questions
     * const selected3_questions = await prisma.selected3_question.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const selected3_questionWithIDOnly = await prisma.selected3_question.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends selected3_questionFindManyArgs>(
      args?: SelectSubset<T, selected3_questionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<selected3_question>>, PrismaPromise<Array<selected3_questionGetPayload<T>>>>

    /**
     * Create a Selected3_question.
     * @param {selected3_questionCreateArgs} args - Arguments to create a Selected3_question.
     * @example
     * // Create one Selected3_question
     * const Selected3_question = await prisma.selected3_question.create({
     *   data: {
     *     // ... data to create a Selected3_question
     *   }
     * })
     * 
    **/
    create<T extends selected3_questionCreateArgs>(
      args: SelectSubset<T, selected3_questionCreateArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Create many Selected3_questions.
     *     @param {selected3_questionCreateManyArgs} args - Arguments to create many Selected3_questions.
     *     @example
     *     // Create many Selected3_questions
     *     const selected3_question = await prisma.selected3_question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends selected3_questionCreateManyArgs>(
      args?: SelectSubset<T, selected3_questionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Selected3_question.
     * @param {selected3_questionDeleteArgs} args - Arguments to delete one Selected3_question.
     * @example
     * // Delete one Selected3_question
     * const Selected3_question = await prisma.selected3_question.delete({
     *   where: {
     *     // ... filter to delete one Selected3_question
     *   }
     * })
     * 
    **/
    delete<T extends selected3_questionDeleteArgs>(
      args: SelectSubset<T, selected3_questionDeleteArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Update one Selected3_question.
     * @param {selected3_questionUpdateArgs} args - Arguments to update one Selected3_question.
     * @example
     * // Update one Selected3_question
     * const selected3_question = await prisma.selected3_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends selected3_questionUpdateArgs>(
      args: SelectSubset<T, selected3_questionUpdateArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Delete zero or more Selected3_questions.
     * @param {selected3_questionDeleteManyArgs} args - Arguments to filter Selected3_questions to delete.
     * @example
     * // Delete a few Selected3_questions
     * const { count } = await prisma.selected3_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends selected3_questionDeleteManyArgs>(
      args?: SelectSubset<T, selected3_questionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Selected3_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected3_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Selected3_questions
     * const selected3_question = await prisma.selected3_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends selected3_questionUpdateManyArgs>(
      args: SelectSubset<T, selected3_questionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Selected3_question.
     * @param {selected3_questionUpsertArgs} args - Arguments to update or create a Selected3_question.
     * @example
     * // Update or create a Selected3_question
     * const selected3_question = await prisma.selected3_question.upsert({
     *   create: {
     *     // ... data to create a Selected3_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Selected3_question we want to update
     *   }
     * })
    **/
    upsert<T extends selected3_questionUpsertArgs>(
      args: SelectSubset<T, selected3_questionUpsertArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Find one Selected3_question that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {selected3_questionFindUniqueOrThrowArgs} args - Arguments to find a Selected3_question
     * @example
     * // Get one Selected3_question
     * const selected3_question = await prisma.selected3_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends selected3_questionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, selected3_questionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Find the first Selected3_question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected3_questionFindFirstOrThrowArgs} args - Arguments to find a Selected3_question
     * @example
     * // Get one Selected3_question
     * const selected3_question = await prisma.selected3_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends selected3_questionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, selected3_questionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__selected3_questionClient<selected3_question>, Prisma__selected3_questionClient<selected3_questionGetPayload<T>>>

    /**
     * Count the number of Selected3_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected3_questionCountArgs} args - Arguments to filter Selected3_questions to count.
     * @example
     * // Count the number of Selected3_questions
     * const count = await prisma.selected3_question.count({
     *   where: {
     *     // ... the filter for the Selected3_questions we want to count
     *   }
     * })
    **/
    count<T extends selected3_questionCountArgs>(
      args?: Subset<T, selected3_questionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Selected3_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Selected3_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected3_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Selected3_questionAggregateArgs>(args: Subset<T, Selected3_questionAggregateArgs>): PrismaPromise<GetSelected3_questionAggregateType<T>>

    /**
     * Group by Selected3_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected3_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Selected3_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Selected3_questionGroupByArgs['orderBy'] }
        : { orderBy?: Selected3_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Selected3_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelected3_questionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for selected3_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__selected3_questionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    selected_teachers<T extends selected_teachersArgs = {}>(args?: Subset<T, selected_teachersArgs>): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * selected3_question base type for findUnique actions
   */
  export type selected3_questionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * Filter, which selected3_question to fetch.
     * 
    **/
    where: selected3_questionWhereUniqueInput
  }

  /**
   * selected3_question: findUnique
   */
  export interface selected3_questionFindUniqueArgs extends selected3_questionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected3_question base type for findFirst actions
   */
  export type selected3_questionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * Filter, which selected3_question to fetch.
     * 
    **/
    where?: selected3_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected3_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected3_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selected3_questions.
     * 
    **/
    cursor?: selected3_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected3_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected3_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selected3_questions.
     * 
    **/
    distinct?: Enumerable<Selected3_questionScalarFieldEnum>
  }

  /**
   * selected3_question: findFirst
   */
  export interface selected3_questionFindFirstArgs extends selected3_questionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected3_question findMany
   */
  export type selected3_questionFindManyArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * Filter, which selected3_questions to fetch.
     * 
    **/
    where?: selected3_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected3_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected3_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selected3_questions.
     * 
    **/
    cursor?: selected3_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected3_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected3_questions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Selected3_questionScalarFieldEnum>
  }


  /**
   * selected3_question create
   */
  export type selected3_questionCreateArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * The data needed to create a selected3_question.
     * 
    **/
    data: XOR<selected3_questionCreateInput, selected3_questionUncheckedCreateInput>
  }


  /**
   * selected3_question createMany
   */
  export type selected3_questionCreateManyArgs = {
    /**
     * The data used to create many selected3_questions.
     * 
    **/
    data: Enumerable<selected3_questionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * selected3_question update
   */
  export type selected3_questionUpdateArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * The data needed to update a selected3_question.
     * 
    **/
    data: XOR<selected3_questionUpdateInput, selected3_questionUncheckedUpdateInput>
    /**
     * Choose, which selected3_question to update.
     * 
    **/
    where: selected3_questionWhereUniqueInput
  }


  /**
   * selected3_question updateMany
   */
  export type selected3_questionUpdateManyArgs = {
    /**
     * The data used to update selected3_questions.
     * 
    **/
    data: XOR<selected3_questionUpdateManyMutationInput, selected3_questionUncheckedUpdateManyInput>
    /**
     * Filter which selected3_questions to update
     * 
    **/
    where?: selected3_questionWhereInput
  }


  /**
   * selected3_question upsert
   */
  export type selected3_questionUpsertArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * The filter to search for the selected3_question to update in case it exists.
     * 
    **/
    where: selected3_questionWhereUniqueInput
    /**
     * In case the selected3_question found by the `where` argument doesn't exist, create a new selected3_question with this data.
     * 
    **/
    create: XOR<selected3_questionCreateInput, selected3_questionUncheckedCreateInput>
    /**
     * In case the selected3_question was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<selected3_questionUpdateInput, selected3_questionUncheckedUpdateInput>
  }


  /**
   * selected3_question delete
   */
  export type selected3_questionDeleteArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
    /**
     * Filter which selected3_question to delete.
     * 
    **/
    where: selected3_questionWhereUniqueInput
  }


  /**
   * selected3_question deleteMany
   */
  export type selected3_questionDeleteManyArgs = {
    /**
     * Filter which selected3_questions to delete
     * 
    **/
    where?: selected3_questionWhereInput
  }


  /**
   * selected3_question: findUniqueOrThrow
   */
  export type selected3_questionFindUniqueOrThrowArgs = selected3_questionFindUniqueArgsBase
      

  /**
   * selected3_question: findFirstOrThrow
   */
  export type selected3_questionFindFirstOrThrowArgs = selected3_questionFindFirstArgsBase
      

  /**
   * selected3_question without action
   */
  export type selected3_questionArgs = {
    /**
     * Select specific fields to fetch from the selected3_question
     * 
    **/
    select?: selected3_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected3_questionInclude | null
  }



  /**
   * Model selected4_question
   */


  export type AggregateSelected4_question = {
    _count: Selected4_questionCountAggregateOutputType | null
    _avg: Selected4_questionAvgAggregateOutputType | null
    _sum: Selected4_questionSumAggregateOutputType | null
    _min: Selected4_questionMinAggregateOutputType | null
    _max: Selected4_questionMaxAggregateOutputType | null
  }

  export type Selected4_questionAvgAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected4_questionSumAggregateOutputType = {
    ID: number | null
    selected_id: number | null
  }

  export type Selected4_questionMinAggregateOutputType = {
    ID: number | null
    question_4: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected4_questionMaxAggregateOutputType = {
    ID: number | null
    question_4: string | null
    answer: string | null
    selected_id: number | null
  }

  export type Selected4_questionCountAggregateOutputType = {
    ID: number
    question_4: number
    answer: number
    selected_id: number
    _all: number
  }


  export type Selected4_questionAvgAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected4_questionSumAggregateInputType = {
    ID?: true
    selected_id?: true
  }

  export type Selected4_questionMinAggregateInputType = {
    ID?: true
    question_4?: true
    answer?: true
    selected_id?: true
  }

  export type Selected4_questionMaxAggregateInputType = {
    ID?: true
    question_4?: true
    answer?: true
    selected_id?: true
  }

  export type Selected4_questionCountAggregateInputType = {
    ID?: true
    question_4?: true
    answer?: true
    selected_id?: true
    _all?: true
  }

  export type Selected4_questionAggregateArgs = {
    /**
     * Filter which selected4_question to aggregate.
     * 
    **/
    where?: selected4_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected4_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected4_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: selected4_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected4_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected4_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned selected4_questions
    **/
    _count?: true | Selected4_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Selected4_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Selected4_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Selected4_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Selected4_questionMaxAggregateInputType
  }

  export type GetSelected4_questionAggregateType<T extends Selected4_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateSelected4_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelected4_question[P]>
      : GetScalarType<T[P], AggregateSelected4_question[P]>
  }




  export type Selected4_questionGroupByArgs = {
    where?: selected4_questionWhereInput
    orderBy?: Enumerable<selected4_questionOrderByWithAggregationInput>
    by: Array<Selected4_questionScalarFieldEnum>
    having?: selected4_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Selected4_questionCountAggregateInputType | true
    _avg?: Selected4_questionAvgAggregateInputType
    _sum?: Selected4_questionSumAggregateInputType
    _min?: Selected4_questionMinAggregateInputType
    _max?: Selected4_questionMaxAggregateInputType
  }


  export type Selected4_questionGroupByOutputType = {
    ID: number
    question_4: string
    answer: string
    selected_id: number
    _count: Selected4_questionCountAggregateOutputType | null
    _avg: Selected4_questionAvgAggregateOutputType | null
    _sum: Selected4_questionSumAggregateOutputType | null
    _min: Selected4_questionMinAggregateOutputType | null
    _max: Selected4_questionMaxAggregateOutputType | null
  }

  type GetSelected4_questionGroupByPayload<T extends Selected4_questionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Selected4_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Selected4_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Selected4_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Selected4_questionGroupByOutputType[P]>
        }
      >
    >


  export type selected4_questionSelect = {
    ID?: boolean
    question_4?: boolean
    answer?: boolean
    selected_id?: boolean
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected4_questionInclude = {
    selected_teachers?: boolean | selected_teachersArgs
  }

  export type selected4_questionGetPayload<
    S extends boolean | null | undefined | selected4_questionArgs,
    U = keyof S
      > = S extends true
        ? selected4_question
    : S extends undefined
    ? never
    : S extends selected4_questionArgs | selected4_questionFindManyArgs
    ?'include' extends U
    ? selected4_question  & {
    [P in TrueKeys<S['include']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'selected_teachers' ? selected_teachersGetPayload<S['select'][P]> :  P extends keyof selected4_question ? selected4_question[P] : never
  } 
    : selected4_question
  : selected4_question


  type selected4_questionCountArgs = Merge<
    Omit<selected4_questionFindManyArgs, 'select' | 'include'> & {
      select?: Selected4_questionCountAggregateInputType | true
    }
  >

  export interface selected4_questionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Selected4_question that matches the filter.
     * @param {selected4_questionFindUniqueArgs} args - Arguments to find a Selected4_question
     * @example
     * // Get one Selected4_question
     * const selected4_question = await prisma.selected4_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends selected4_questionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, selected4_questionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'selected4_question'> extends True ? CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected4_questionClient<selected4_question | null >, Prisma__selected4_questionClient<selected4_questionGetPayload<T> | null >>

    /**
     * Find the first Selected4_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected4_questionFindFirstArgs} args - Arguments to find a Selected4_question
     * @example
     * // Get one Selected4_question
     * const selected4_question = await prisma.selected4_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends selected4_questionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, selected4_questionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'selected4_question'> extends True ? CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>> : CheckSelect<T, Prisma__selected4_questionClient<selected4_question | null >, Prisma__selected4_questionClient<selected4_questionGetPayload<T> | null >>

    /**
     * Find zero or more Selected4_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected4_questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Selected4_questions
     * const selected4_questions = await prisma.selected4_question.findMany()
     * 
     * // Get first 10 Selected4_questions
     * const selected4_questions = await prisma.selected4_question.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const selected4_questionWithIDOnly = await prisma.selected4_question.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends selected4_questionFindManyArgs>(
      args?: SelectSubset<T, selected4_questionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<selected4_question>>, PrismaPromise<Array<selected4_questionGetPayload<T>>>>

    /**
     * Create a Selected4_question.
     * @param {selected4_questionCreateArgs} args - Arguments to create a Selected4_question.
     * @example
     * // Create one Selected4_question
     * const Selected4_question = await prisma.selected4_question.create({
     *   data: {
     *     // ... data to create a Selected4_question
     *   }
     * })
     * 
    **/
    create<T extends selected4_questionCreateArgs>(
      args: SelectSubset<T, selected4_questionCreateArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Create many Selected4_questions.
     *     @param {selected4_questionCreateManyArgs} args - Arguments to create many Selected4_questions.
     *     @example
     *     // Create many Selected4_questions
     *     const selected4_question = await prisma.selected4_question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends selected4_questionCreateManyArgs>(
      args?: SelectSubset<T, selected4_questionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Selected4_question.
     * @param {selected4_questionDeleteArgs} args - Arguments to delete one Selected4_question.
     * @example
     * // Delete one Selected4_question
     * const Selected4_question = await prisma.selected4_question.delete({
     *   where: {
     *     // ... filter to delete one Selected4_question
     *   }
     * })
     * 
    **/
    delete<T extends selected4_questionDeleteArgs>(
      args: SelectSubset<T, selected4_questionDeleteArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Update one Selected4_question.
     * @param {selected4_questionUpdateArgs} args - Arguments to update one Selected4_question.
     * @example
     * // Update one Selected4_question
     * const selected4_question = await prisma.selected4_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends selected4_questionUpdateArgs>(
      args: SelectSubset<T, selected4_questionUpdateArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Delete zero or more Selected4_questions.
     * @param {selected4_questionDeleteManyArgs} args - Arguments to filter Selected4_questions to delete.
     * @example
     * // Delete a few Selected4_questions
     * const { count } = await prisma.selected4_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends selected4_questionDeleteManyArgs>(
      args?: SelectSubset<T, selected4_questionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Selected4_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected4_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Selected4_questions
     * const selected4_question = await prisma.selected4_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends selected4_questionUpdateManyArgs>(
      args: SelectSubset<T, selected4_questionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Selected4_question.
     * @param {selected4_questionUpsertArgs} args - Arguments to update or create a Selected4_question.
     * @example
     * // Update or create a Selected4_question
     * const selected4_question = await prisma.selected4_question.upsert({
     *   create: {
     *     // ... data to create a Selected4_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Selected4_question we want to update
     *   }
     * })
    **/
    upsert<T extends selected4_questionUpsertArgs>(
      args: SelectSubset<T, selected4_questionUpsertArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Find one Selected4_question that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {selected4_questionFindUniqueOrThrowArgs} args - Arguments to find a Selected4_question
     * @example
     * // Get one Selected4_question
     * const selected4_question = await prisma.selected4_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends selected4_questionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, selected4_questionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Find the first Selected4_question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected4_questionFindFirstOrThrowArgs} args - Arguments to find a Selected4_question
     * @example
     * // Get one Selected4_question
     * const selected4_question = await prisma.selected4_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends selected4_questionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, selected4_questionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__selected4_questionClient<selected4_question>, Prisma__selected4_questionClient<selected4_questionGetPayload<T>>>

    /**
     * Count the number of Selected4_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {selected4_questionCountArgs} args - Arguments to filter Selected4_questions to count.
     * @example
     * // Count the number of Selected4_questions
     * const count = await prisma.selected4_question.count({
     *   where: {
     *     // ... the filter for the Selected4_questions we want to count
     *   }
     * })
    **/
    count<T extends selected4_questionCountArgs>(
      args?: Subset<T, selected4_questionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Selected4_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Selected4_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected4_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Selected4_questionAggregateArgs>(args: Subset<T, Selected4_questionAggregateArgs>): PrismaPromise<GetSelected4_questionAggregateType<T>>

    /**
     * Group by Selected4_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Selected4_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Selected4_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Selected4_questionGroupByArgs['orderBy'] }
        : { orderBy?: Selected4_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Selected4_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelected4_questionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for selected4_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__selected4_questionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    selected_teachers<T extends selected_teachersArgs = {}>(args?: Subset<T, selected_teachersArgs>): CheckSelect<T, Prisma__selected_teachersClient<selected_teachers | null >, Prisma__selected_teachersClient<selected_teachersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * selected4_question base type for findUnique actions
   */
  export type selected4_questionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * Filter, which selected4_question to fetch.
     * 
    **/
    where: selected4_questionWhereUniqueInput
  }

  /**
   * selected4_question: findUnique
   */
  export interface selected4_questionFindUniqueArgs extends selected4_questionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected4_question base type for findFirst actions
   */
  export type selected4_questionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * Filter, which selected4_question to fetch.
     * 
    **/
    where?: selected4_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected4_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected4_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for selected4_questions.
     * 
    **/
    cursor?: selected4_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected4_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected4_questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of selected4_questions.
     * 
    **/
    distinct?: Enumerable<Selected4_questionScalarFieldEnum>
  }

  /**
   * selected4_question: findFirst
   */
  export interface selected4_questionFindFirstArgs extends selected4_questionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * selected4_question findMany
   */
  export type selected4_questionFindManyArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * Filter, which selected4_questions to fetch.
     * 
    **/
    where?: selected4_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of selected4_questions to fetch.
     * 
    **/
    orderBy?: Enumerable<selected4_questionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing selected4_questions.
     * 
    **/
    cursor?: selected4_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` selected4_questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` selected4_questions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Selected4_questionScalarFieldEnum>
  }


  /**
   * selected4_question create
   */
  export type selected4_questionCreateArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * The data needed to create a selected4_question.
     * 
    **/
    data: XOR<selected4_questionCreateInput, selected4_questionUncheckedCreateInput>
  }


  /**
   * selected4_question createMany
   */
  export type selected4_questionCreateManyArgs = {
    /**
     * The data used to create many selected4_questions.
     * 
    **/
    data: Enumerable<selected4_questionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * selected4_question update
   */
  export type selected4_questionUpdateArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * The data needed to update a selected4_question.
     * 
    **/
    data: XOR<selected4_questionUpdateInput, selected4_questionUncheckedUpdateInput>
    /**
     * Choose, which selected4_question to update.
     * 
    **/
    where: selected4_questionWhereUniqueInput
  }


  /**
   * selected4_question updateMany
   */
  export type selected4_questionUpdateManyArgs = {
    /**
     * The data used to update selected4_questions.
     * 
    **/
    data: XOR<selected4_questionUpdateManyMutationInput, selected4_questionUncheckedUpdateManyInput>
    /**
     * Filter which selected4_questions to update
     * 
    **/
    where?: selected4_questionWhereInput
  }


  /**
   * selected4_question upsert
   */
  export type selected4_questionUpsertArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * The filter to search for the selected4_question to update in case it exists.
     * 
    **/
    where: selected4_questionWhereUniqueInput
    /**
     * In case the selected4_question found by the `where` argument doesn't exist, create a new selected4_question with this data.
     * 
    **/
    create: XOR<selected4_questionCreateInput, selected4_questionUncheckedCreateInput>
    /**
     * In case the selected4_question was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<selected4_questionUpdateInput, selected4_questionUncheckedUpdateInput>
  }


  /**
   * selected4_question delete
   */
  export type selected4_questionDeleteArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
    /**
     * Filter which selected4_question to delete.
     * 
    **/
    where: selected4_questionWhereUniqueInput
  }


  /**
   * selected4_question deleteMany
   */
  export type selected4_questionDeleteManyArgs = {
    /**
     * Filter which selected4_questions to delete
     * 
    **/
    where?: selected4_questionWhereInput
  }


  /**
   * selected4_question: findUniqueOrThrow
   */
  export type selected4_questionFindUniqueOrThrowArgs = selected4_questionFindUniqueArgsBase
      

  /**
   * selected4_question: findFirstOrThrow
   */
  export type selected4_questionFindFirstOrThrowArgs = selected4_questionFindFirstArgsBase
      

  /**
   * selected4_question without action
   */
  export type selected4_questionArgs = {
    /**
     * Select specific fields to fetch from the selected4_question
     * 
    **/
    select?: selected4_questionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: selected4_questionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Address_tableScalarFieldEnum: {
    id: 'id',
    user_address: 'user_address',
    user_street: 'user_street',
    user_pincode: 'user_pincode'
  };

  export type Address_tableScalarFieldEnum = (typeof Address_tableScalarFieldEnum)[keyof typeof Address_tableScalarFieldEnum]


  export const Cart_tableScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    product_name: 'product_name',
    product_price_cart: 'product_price_cart',
    product_quantity_cart: 'product_quantity_cart',
    product_image: 'product_image'
  };

  export type Cart_tableScalarFieldEnum = (typeof Cart_tableScalarFieldEnum)[keyof typeof Cart_tableScalarFieldEnum]


  export const Credit_tableScalarFieldEnum: {
    id: 'id',
    credit_balance: 'credit_balance'
  };

  export type Credit_tableScalarFieldEnum = (typeof Credit_tableScalarFieldEnum)[keyof typeof Credit_tableScalarFieldEnum]


  export const Customer_agedetailsScalarFieldEnum: {
    ID: 'ID',
    customer_id: 'customer_id',
    customer_age: 'customer_age'
  };

  export type Customer_agedetailsScalarFieldEnum = (typeof Customer_agedetailsScalarFieldEnum)[keyof typeof Customer_agedetailsScalarFieldEnum]


  export const Customer_tblScalarFieldEnum: {
    ID: 'ID',
    customer_first_name: 'customer_first_name',
    customer_last_name: 'customer_last_name',
    Email_id: 'Email_id'
  };

  export type Customer_tblScalarFieldEnum = (typeof Customer_tblScalarFieldEnum)[keyof typeof Customer_tblScalarFieldEnum]


  export const Deliver_statusScalarFieldEnum: {
    deliver_id: 'deliver_id',
    customer_id: 'customer_id',
    product_status: 'product_status'
  };

  export type Deliver_statusScalarFieldEnum = (typeof Deliver_statusScalarFieldEnum)[keyof typeof Deliver_statusScalarFieldEnum]


  export const Feedback_question_1ScalarFieldEnum: {
    ID: 'ID',
    question_1: 'question_1',
    answer_1: 'answer_1',
    answer_2: 'answer_2'
  };

  export type Feedback_question_1ScalarFieldEnum = (typeof Feedback_question_1ScalarFieldEnum)[keyof typeof Feedback_question_1ScalarFieldEnum]


  export const Feedback_question_2ScalarFieldEnum: {
    ID: 'ID',
    question_2: 'question_2',
    answer_1: 'answer_1',
    answer_2: 'answer_2'
  };

  export type Feedback_question_2ScalarFieldEnum = (typeof Feedback_question_2ScalarFieldEnum)[keyof typeof Feedback_question_2ScalarFieldEnum]


  export const Feedback_question_3ScalarFieldEnum: {
    ID: 'ID',
    question_3: 'question_3',
    answer_1: 'answer_1',
    answer_2: 'answer_2'
  };

  export type Feedback_question_3ScalarFieldEnum = (typeof Feedback_question_3ScalarFieldEnum)[keyof typeof Feedback_question_3ScalarFieldEnum]


  export const Feedback_question_4ScalarFieldEnum: {
    ID: 'ID',
    question_4: 'question_4',
    answer_1: 'answer_1',
    answer_2: 'answer_2'
  };

  export type Feedback_question_4ScalarFieldEnum = (typeof Feedback_question_4ScalarFieldEnum)[keyof typeof Feedback_question_4ScalarFieldEnum]


  export const Orders_tblScalarFieldEnum: {
    product_id: 'product_id',
    product_name: 'product_name',
    product_price: 'product_price',
    customer_id: 'customer_id'
  };

  export type Orders_tblScalarFieldEnum = (typeof Orders_tblScalarFieldEnum)[keyof typeof Orders_tblScalarFieldEnum]


  export const Product_tableScalarFieldEnum: {
    product_id: 'product_id',
    product_image: 'product_image',
    product_name: 'product_name',
    product_price: 'product_price',
    strikeout_price: 'strikeout_price'
  };

  export type Product_tableScalarFieldEnum = (typeof Product_tableScalarFieldEnum)[keyof typeof Product_tableScalarFieldEnum]


  export const Questions_and_teachers_listScalarFieldEnum: {
    id: 'id',
    teachers_name: 'teachers_name',
    feedback_questions: 'feedback_questions'
  };

  export type Questions_and_teachers_listScalarFieldEnum = (typeof Questions_and_teachers_listScalarFieldEnum)[keyof typeof Questions_and_teachers_listScalarFieldEnum]


  export const Save_address_tableScalarFieldEnum: {
    id: 'id',
    user_address: 'user_address',
    user_street: 'user_street',
    user_pincode: 'user_pincode'
  };

  export type Save_address_tableScalarFieldEnum = (typeof Save_address_tableScalarFieldEnum)[keyof typeof Save_address_tableScalarFieldEnum]


  export const Save_cart_totalpriceScalarFieldEnum: {
    id: 'id',
    save_cart_totalprice: 'save_cart_totalprice'
  };

  export type Save_cart_totalpriceScalarFieldEnum = (typeof Save_cart_totalpriceScalarFieldEnum)[keyof typeof Save_cart_totalpriceScalarFieldEnum]


  export const Save_later_tableScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    product_name: 'product_name',
    product_price_cart: 'product_price_cart',
    product_quantity_cart: 'product_quantity_cart',
    product_image: 'product_image',
    product_price: 'product_price'
  };

  export type Save_later_tableScalarFieldEnum = (typeof Save_later_tableScalarFieldEnum)[keyof typeof Save_later_tableScalarFieldEnum]


  export const Selected1_questionScalarFieldEnum: {
    ID: 'ID',
    question_1: 'question_1',
    answer: 'answer',
    selected_id: 'selected_id'
  };

  export type Selected1_questionScalarFieldEnum = (typeof Selected1_questionScalarFieldEnum)[keyof typeof Selected1_questionScalarFieldEnum]


  export const Selected2_questionScalarFieldEnum: {
    ID: 'ID',
    question_2: 'question_2',
    answer: 'answer',
    selected_id: 'selected_id'
  };

  export type Selected2_questionScalarFieldEnum = (typeof Selected2_questionScalarFieldEnum)[keyof typeof Selected2_questionScalarFieldEnum]


  export const Selected3_questionScalarFieldEnum: {
    ID: 'ID',
    question_3: 'question_3',
    answer: 'answer',
    selected_id: 'selected_id'
  };

  export type Selected3_questionScalarFieldEnum = (typeof Selected3_questionScalarFieldEnum)[keyof typeof Selected3_questionScalarFieldEnum]


  export const Selected4_questionScalarFieldEnum: {
    ID: 'ID',
    question_4: 'question_4',
    answer: 'answer',
    selected_id: 'selected_id'
  };

  export type Selected4_questionScalarFieldEnum = (typeof Selected4_questionScalarFieldEnum)[keyof typeof Selected4_questionScalarFieldEnum]


  export const Selected_teachersScalarFieldEnum: {
    selected_id: 'selected_id',
    teachers_name: 'teachers_name'
  };

  export type Selected_teachersScalarFieldEnum = (typeof Selected_teachersScalarFieldEnum)[keyof typeof Selected_teachersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatusScalarFieldEnum: {
    ID: 'ID',
    current_status: 'current_status'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const Teachers_listScalarFieldEnum: {
    ID: 'ID',
    teachers_name: 'teachers_name'
  };

  export type Teachers_listScalarFieldEnum = (typeof Teachers_listScalarFieldEnum)[keyof typeof Teachers_listScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_registrationScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    contact_number: 'contact_number',
    email_id: 'email_id',
    address: 'address',
    created_at: 'created_at',
    updated_at: 'updated_at',
    status: 'status'
  };

  export type User_registrationScalarFieldEnum = (typeof User_registrationScalarFieldEnum)[keyof typeof User_registrationScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type user_registrationWhereInput = {
    AND?: Enumerable<user_registrationWhereInput>
    OR?: Enumerable<user_registrationWhereInput>
    NOT?: Enumerable<user_registrationWhereInput>
    id?: IntFilter | number
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    contact_number?: BigIntFilter | bigint | number
    email_id?: StringFilter | string
    address?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    status?: StringFilter | string
  }

  export type user_registrationOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationWhereUniqueInput = {
    id?: number
    contact_number?: bigint | number
    email_id?: string
  }

  export type user_registrationOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
    _count?: user_registrationCountOrderByAggregateInput
    _avg?: user_registrationAvgOrderByAggregateInput
    _max?: user_registrationMaxOrderByAggregateInput
    _min?: user_registrationMinOrderByAggregateInput
    _sum?: user_registrationSumOrderByAggregateInput
  }

  export type user_registrationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_registrationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    contact_number?: BigIntWithAggregatesFilter | bigint | number
    email_id?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
  }

  export type customer_tblWhereInput = {
    AND?: Enumerable<customer_tblWhereInput>
    OR?: Enumerable<customer_tblWhereInput>
    NOT?: Enumerable<customer_tblWhereInput>
    ID?: IntFilter | number
    customer_first_name?: StringFilter | string
    customer_last_name?: StringFilter | string
    Email_id?: StringFilter | string
    customer_agedetails?: Customer_agedetailsListRelationFilter
    deliver_status?: Deliver_statusListRelationFilter
    orders_tbl?: Orders_tblListRelationFilter
  }

  export type customer_tblOrderByWithRelationInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
    customer_agedetails?: customer_agedetailsOrderByRelationAggregateInput
    deliver_status?: deliver_statusOrderByRelationAggregateInput
    orders_tbl?: orders_tblOrderByRelationAggregateInput
  }

  export type customer_tblWhereUniqueInput = {
    ID?: number
  }

  export type customer_tblOrderByWithAggregationInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
    _count?: customer_tblCountOrderByAggregateInput
    _avg?: customer_tblAvgOrderByAggregateInput
    _max?: customer_tblMaxOrderByAggregateInput
    _min?: customer_tblMinOrderByAggregateInput
    _sum?: customer_tblSumOrderByAggregateInput
  }

  export type customer_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customer_tblScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    customer_first_name?: StringWithAggregatesFilter | string
    customer_last_name?: StringWithAggregatesFilter | string
    Email_id?: StringWithAggregatesFilter | string
  }

  export type orders_tblWhereInput = {
    AND?: Enumerable<orders_tblWhereInput>
    OR?: Enumerable<orders_tblWhereInput>
    NOT?: Enumerable<orders_tblWhereInput>
    product_id?: IntFilter | number
    product_name?: StringFilter | string
    product_price?: IntNullableFilter | number | null
    customer_id?: IntFilter | number
    customer_tbl?: XOR<Customer_tblRelationFilter, customer_tblWhereInput>
  }

  export type orders_tblOrderByWithRelationInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
    customer_tbl?: customer_tblOrderByWithRelationInput
  }

  export type orders_tblWhereUniqueInput = {
    product_id?: number
  }

  export type orders_tblOrderByWithAggregationInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
    _count?: orders_tblCountOrderByAggregateInput
    _avg?: orders_tblAvgOrderByAggregateInput
    _max?: orders_tblMaxOrderByAggregateInput
    _min?: orders_tblMinOrderByAggregateInput
    _sum?: orders_tblSumOrderByAggregateInput
  }

  export type orders_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<orders_tblScalarWhereWithAggregatesInput>
    product_id?: IntWithAggregatesFilter | number
    product_name?: StringWithAggregatesFilter | string
    product_price?: IntNullableWithAggregatesFilter | number | null
    customer_id?: IntWithAggregatesFilter | number
  }

  export type deliver_statusWhereInput = {
    AND?: Enumerable<deliver_statusWhereInput>
    OR?: Enumerable<deliver_statusWhereInput>
    NOT?: Enumerable<deliver_statusWhereInput>
    deliver_id?: IntFilter | number
    customer_id?: IntFilter | number
    product_status?: StringFilter | string
    customer_tbl?: XOR<Customer_tblRelationFilter, customer_tblWhereInput>
  }

  export type deliver_statusOrderByWithRelationInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
    product_status?: SortOrder
    customer_tbl?: customer_tblOrderByWithRelationInput
  }

  export type deliver_statusWhereUniqueInput = {
    deliver_id?: number
  }

  export type deliver_statusOrderByWithAggregationInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
    product_status?: SortOrder
    _count?: deliver_statusCountOrderByAggregateInput
    _avg?: deliver_statusAvgOrderByAggregateInput
    _max?: deliver_statusMaxOrderByAggregateInput
    _min?: deliver_statusMinOrderByAggregateInput
    _sum?: deliver_statusSumOrderByAggregateInput
  }

  export type deliver_statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<deliver_statusScalarWhereWithAggregatesInput>
    deliver_id?: IntWithAggregatesFilter | number
    customer_id?: IntWithAggregatesFilter | number
    product_status?: StringWithAggregatesFilter | string
  }

  export type customer_agedetailsWhereInput = {
    AND?: Enumerable<customer_agedetailsWhereInput>
    OR?: Enumerable<customer_agedetailsWhereInput>
    NOT?: Enumerable<customer_agedetailsWhereInput>
    ID?: IntFilter | number
    customer_id?: IntFilter | number
    customer_age?: IntFilter | number
    customer_tbl?: XOR<Customer_tblRelationFilter, customer_tblWhereInput>
  }

  export type customer_agedetailsOrderByWithRelationInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
    customer_tbl?: customer_tblOrderByWithRelationInput
  }

  export type customer_agedetailsWhereUniqueInput = {
    ID?: number
  }

  export type customer_agedetailsOrderByWithAggregationInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
    _count?: customer_agedetailsCountOrderByAggregateInput
    _avg?: customer_agedetailsAvgOrderByAggregateInput
    _max?: customer_agedetailsMaxOrderByAggregateInput
    _min?: customer_agedetailsMinOrderByAggregateInput
    _sum?: customer_agedetailsSumOrderByAggregateInput
  }

  export type customer_agedetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<customer_agedetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<customer_agedetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<customer_agedetailsScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    customer_id?: IntWithAggregatesFilter | number
    customer_age?: IntWithAggregatesFilter | number
  }

  export type statusWhereInput = {
    AND?: Enumerable<statusWhereInput>
    OR?: Enumerable<statusWhereInput>
    NOT?: Enumerable<statusWhereInput>
    ID?: IntFilter | number
    current_status?: StringFilter | string
  }

  export type statusOrderByWithRelationInput = {
    ID?: SortOrder
    current_status?: SortOrder
  }

  export type statusWhereUniqueInput = {
    ID?: number
  }

  export type statusOrderByWithAggregationInput = {
    ID?: SortOrder
    current_status?: SortOrder
    _count?: statusCountOrderByAggregateInput
    _avg?: statusAvgOrderByAggregateInput
    _max?: statusMaxOrderByAggregateInput
    _min?: statusMinOrderByAggregateInput
    _sum?: statusSumOrderByAggregateInput
  }

  export type statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<statusScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    current_status?: StringWithAggregatesFilter | string
  }

  export type cart_tableWhereInput = {
    AND?: Enumerable<cart_tableWhereInput>
    OR?: Enumerable<cart_tableWhereInput>
    NOT?: Enumerable<cart_tableWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    product_name?: StringFilter | string
    product_price_cart?: IntFilter | number
    product_quantity_cart?: IntNullableFilter | number | null
    product_image?: StringFilter | string
    product_table?: XOR<Product_tableRelationFilter, product_tableWhereInput>
  }

  export type cart_tableOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_table?: product_tableOrderByWithRelationInput
  }

  export type cart_tableWhereUniqueInput = {
    id?: number
    product_id?: number
  }

  export type cart_tableOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    _count?: cart_tableCountOrderByAggregateInput
    _avg?: cart_tableAvgOrderByAggregateInput
    _max?: cart_tableMaxOrderByAggregateInput
    _min?: cart_tableMinOrderByAggregateInput
    _sum?: cart_tableSumOrderByAggregateInput
  }

  export type cart_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cart_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<cart_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cart_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    product_name?: StringWithAggregatesFilter | string
    product_price_cart?: IntWithAggregatesFilter | number
    product_quantity_cart?: IntNullableWithAggregatesFilter | number | null
    product_image?: StringWithAggregatesFilter | string
  }

  export type product_tableWhereInput = {
    AND?: Enumerable<product_tableWhereInput>
    OR?: Enumerable<product_tableWhereInput>
    NOT?: Enumerable<product_tableWhereInput>
    product_id?: IntFilter | number
    product_image?: StringFilter | string
    product_name?: StringFilter | string
    product_price?: IntFilter | number
    strikeout_price?: IntNullableFilter | number | null
    cart_table?: XOR<Cart_tableRelationFilter, cart_tableWhereInput> | null
  }

  export type product_tableOrderByWithRelationInput = {
    product_id?: SortOrder
    product_image?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
    cart_table?: cart_tableOrderByWithRelationInput
  }

  export type product_tableWhereUniqueInput = {
    product_id?: number
  }

  export type product_tableOrderByWithAggregationInput = {
    product_id?: SortOrder
    product_image?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
    _count?: product_tableCountOrderByAggregateInput
    _avg?: product_tableAvgOrderByAggregateInput
    _max?: product_tableMaxOrderByAggregateInput
    _min?: product_tableMinOrderByAggregateInput
    _sum?: product_tableSumOrderByAggregateInput
  }

  export type product_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<product_tableScalarWhereWithAggregatesInput>
    product_id?: IntWithAggregatesFilter | number
    product_image?: StringWithAggregatesFilter | string
    product_name?: StringWithAggregatesFilter | string
    product_price?: IntWithAggregatesFilter | number
    strikeout_price?: IntNullableWithAggregatesFilter | number | null
  }

  export type save_later_tableWhereInput = {
    AND?: Enumerable<save_later_tableWhereInput>
    OR?: Enumerable<save_later_tableWhereInput>
    NOT?: Enumerable<save_later_tableWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    product_name?: StringFilter | string
    product_price_cart?: IntFilter | number
    product_quantity_cart?: IntFilter | number
    product_image?: StringFilter | string
    product_price?: IntFilter | number
  }

  export type save_later_tableOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_price?: SortOrder
  }

  export type save_later_tableWhereUniqueInput = {
    id?: number
    product_id?: number
  }

  export type save_later_tableOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_price?: SortOrder
    _count?: save_later_tableCountOrderByAggregateInput
    _avg?: save_later_tableAvgOrderByAggregateInput
    _max?: save_later_tableMaxOrderByAggregateInput
    _min?: save_later_tableMinOrderByAggregateInput
    _sum?: save_later_tableSumOrderByAggregateInput
  }

  export type save_later_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<save_later_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<save_later_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<save_later_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    product_name?: StringWithAggregatesFilter | string
    product_price_cart?: IntWithAggregatesFilter | number
    product_quantity_cart?: IntWithAggregatesFilter | number
    product_image?: StringWithAggregatesFilter | string
    product_price?: IntWithAggregatesFilter | number
  }

  export type address_tableWhereInput = {
    AND?: Enumerable<address_tableWhereInput>
    OR?: Enumerable<address_tableWhereInput>
    NOT?: Enumerable<address_tableWhereInput>
    id?: IntFilter | number
    user_address?: StringFilter | string
    user_street?: StringNullableFilter | string | null
    user_pincode?: BigIntNullableFilter | bigint | number | null
  }

  export type address_tableOrderByWithRelationInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type address_tableWhereUniqueInput = {
    id?: number
  }

  export type address_tableOrderByWithAggregationInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
    _count?: address_tableCountOrderByAggregateInput
    _avg?: address_tableAvgOrderByAggregateInput
    _max?: address_tableMaxOrderByAggregateInput
    _min?: address_tableMinOrderByAggregateInput
    _sum?: address_tableSumOrderByAggregateInput
  }

  export type address_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<address_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<address_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<address_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_address?: StringWithAggregatesFilter | string
    user_street?: StringNullableWithAggregatesFilter | string | null
    user_pincode?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type save_address_tableWhereInput = {
    AND?: Enumerable<save_address_tableWhereInput>
    OR?: Enumerable<save_address_tableWhereInput>
    NOT?: Enumerable<save_address_tableWhereInput>
    id?: IntFilter | number
    user_address?: StringFilter | string
    user_street?: StringNullableFilter | string | null
    user_pincode?: BigIntNullableFilter | bigint | number | null
  }

  export type save_address_tableOrderByWithRelationInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_address_tableWhereUniqueInput = {
    id?: number
  }

  export type save_address_tableOrderByWithAggregationInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
    _count?: save_address_tableCountOrderByAggregateInput
    _avg?: save_address_tableAvgOrderByAggregateInput
    _max?: save_address_tableMaxOrderByAggregateInput
    _min?: save_address_tableMinOrderByAggregateInput
    _sum?: save_address_tableSumOrderByAggregateInput
  }

  export type save_address_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<save_address_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<save_address_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<save_address_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_address?: StringWithAggregatesFilter | string
    user_street?: StringNullableWithAggregatesFilter | string | null
    user_pincode?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type save_cart_totalpriceWhereInput = {
    AND?: Enumerable<save_cart_totalpriceWhereInput>
    OR?: Enumerable<save_cart_totalpriceWhereInput>
    NOT?: Enumerable<save_cart_totalpriceWhereInput>
    id?: IntFilter | number
    save_cart_totalprice?: IntFilter | number
  }

  export type save_cart_totalpriceOrderByWithRelationInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type save_cart_totalpriceWhereUniqueInput = {
    id?: number
  }

  export type save_cart_totalpriceOrderByWithAggregationInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
    _count?: save_cart_totalpriceCountOrderByAggregateInput
    _avg?: save_cart_totalpriceAvgOrderByAggregateInput
    _max?: save_cart_totalpriceMaxOrderByAggregateInput
    _min?: save_cart_totalpriceMinOrderByAggregateInput
    _sum?: save_cart_totalpriceSumOrderByAggregateInput
  }

  export type save_cart_totalpriceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<save_cart_totalpriceScalarWhereWithAggregatesInput>
    OR?: Enumerable<save_cart_totalpriceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<save_cart_totalpriceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    save_cart_totalprice?: IntWithAggregatesFilter | number
  }

  export type credit_tableWhereInput = {
    AND?: Enumerable<credit_tableWhereInput>
    OR?: Enumerable<credit_tableWhereInput>
    NOT?: Enumerable<credit_tableWhereInput>
    id?: IntFilter | number
    credit_balance?: IntFilter | number
  }

  export type credit_tableOrderByWithRelationInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type credit_tableWhereUniqueInput = {
    id?: number
  }

  export type credit_tableOrderByWithAggregationInput = {
    id?: SortOrder
    credit_balance?: SortOrder
    _count?: credit_tableCountOrderByAggregateInput
    _avg?: credit_tableAvgOrderByAggregateInput
    _max?: credit_tableMaxOrderByAggregateInput
    _min?: credit_tableMinOrderByAggregateInput
    _sum?: credit_tableSumOrderByAggregateInput
  }

  export type credit_tableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<credit_tableScalarWhereWithAggregatesInput>
    OR?: Enumerable<credit_tableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<credit_tableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    credit_balance?: IntWithAggregatesFilter | number
  }

  export type teachers_listWhereInput = {
    AND?: Enumerable<teachers_listWhereInput>
    OR?: Enumerable<teachers_listWhereInput>
    NOT?: Enumerable<teachers_listWhereInput>
    ID?: IntFilter | number
    teachers_name?: StringFilter | string
  }

  export type teachers_listOrderByWithRelationInput = {
    ID?: SortOrder
    teachers_name?: SortOrder
  }

  export type teachers_listWhereUniqueInput = {
    ID?: number
  }

  export type teachers_listOrderByWithAggregationInput = {
    ID?: SortOrder
    teachers_name?: SortOrder
    _count?: teachers_listCountOrderByAggregateInput
    _avg?: teachers_listAvgOrderByAggregateInput
    _max?: teachers_listMaxOrderByAggregateInput
    _min?: teachers_listMinOrderByAggregateInput
    _sum?: teachers_listSumOrderByAggregateInput
  }

  export type teachers_listScalarWhereWithAggregatesInput = {
    AND?: Enumerable<teachers_listScalarWhereWithAggregatesInput>
    OR?: Enumerable<teachers_listScalarWhereWithAggregatesInput>
    NOT?: Enumerable<teachers_listScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    teachers_name?: StringWithAggregatesFilter | string
  }

  export type questions_and_teachers_listWhereInput = {
    AND?: Enumerable<questions_and_teachers_listWhereInput>
    OR?: Enumerable<questions_and_teachers_listWhereInput>
    NOT?: Enumerable<questions_and_teachers_listWhereInput>
    id?: IntFilter | number
    teachers_name?: StringFilter | string
    feedback_questions?: StringFilter | string
  }

  export type questions_and_teachers_listOrderByWithRelationInput = {
    id?: SortOrder
    teachers_name?: SortOrder
    feedback_questions?: SortOrder
  }

  export type questions_and_teachers_listWhereUniqueInput = {
    id?: number
  }

  export type questions_and_teachers_listOrderByWithAggregationInput = {
    id?: SortOrder
    teachers_name?: SortOrder
    feedback_questions?: SortOrder
    _count?: questions_and_teachers_listCountOrderByAggregateInput
    _avg?: questions_and_teachers_listAvgOrderByAggregateInput
    _max?: questions_and_teachers_listMaxOrderByAggregateInput
    _min?: questions_and_teachers_listMinOrderByAggregateInput
    _sum?: questions_and_teachers_listSumOrderByAggregateInput
  }

  export type questions_and_teachers_listScalarWhereWithAggregatesInput = {
    AND?: Enumerable<questions_and_teachers_listScalarWhereWithAggregatesInput>
    OR?: Enumerable<questions_and_teachers_listScalarWhereWithAggregatesInput>
    NOT?: Enumerable<questions_and_teachers_listScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    teachers_name?: StringWithAggregatesFilter | string
    feedback_questions?: StringWithAggregatesFilter | string
  }

  export type selected_teachersWhereInput = {
    AND?: Enumerable<selected_teachersWhereInput>
    OR?: Enumerable<selected_teachersWhereInput>
    NOT?: Enumerable<selected_teachersWhereInput>
    selected_id?: IntFilter | number
    teachers_name?: StringFilter | string
    selected1_question?: Selected1_questionListRelationFilter
    selected2_question?: Selected2_questionListRelationFilter
    selected3_question?: Selected3_questionListRelationFilter
    selected4_question?: Selected4_questionListRelationFilter
  }

  export type selected_teachersOrderByWithRelationInput = {
    selected_id?: SortOrder
    teachers_name?: SortOrder
    selected1_question?: selected1_questionOrderByRelationAggregateInput
    selected2_question?: selected2_questionOrderByRelationAggregateInput
    selected3_question?: selected3_questionOrderByRelationAggregateInput
    selected4_question?: selected4_questionOrderByRelationAggregateInput
  }

  export type selected_teachersWhereUniqueInput = {
    selected_id?: number
  }

  export type selected_teachersOrderByWithAggregationInput = {
    selected_id?: SortOrder
    teachers_name?: SortOrder
    _count?: selected_teachersCountOrderByAggregateInput
    _avg?: selected_teachersAvgOrderByAggregateInput
    _max?: selected_teachersMaxOrderByAggregateInput
    _min?: selected_teachersMinOrderByAggregateInput
    _sum?: selected_teachersSumOrderByAggregateInput
  }

  export type selected_teachersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<selected_teachersScalarWhereWithAggregatesInput>
    OR?: Enumerable<selected_teachersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<selected_teachersScalarWhereWithAggregatesInput>
    selected_id?: IntWithAggregatesFilter | number
    teachers_name?: StringWithAggregatesFilter | string
  }

  export type feedback_question_1WhereInput = {
    AND?: Enumerable<feedback_question_1WhereInput>
    OR?: Enumerable<feedback_question_1WhereInput>
    NOT?: Enumerable<feedback_question_1WhereInput>
    ID?: IntFilter | number
    question_1?: StringFilter | string
    answer_1?: StringFilter | string
    answer_2?: StringNullableFilter | string | null
  }

  export type feedback_question_1OrderByWithRelationInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_1WhereUniqueInput = {
    ID?: number
  }

  export type feedback_question_1OrderByWithAggregationInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
    _count?: feedback_question_1CountOrderByAggregateInput
    _avg?: feedback_question_1AvgOrderByAggregateInput
    _max?: feedback_question_1MaxOrderByAggregateInput
    _min?: feedback_question_1MinOrderByAggregateInput
    _sum?: feedback_question_1SumOrderByAggregateInput
  }

  export type feedback_question_1ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<feedback_question_1ScalarWhereWithAggregatesInput>
    OR?: Enumerable<feedback_question_1ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<feedback_question_1ScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_1?: StringWithAggregatesFilter | string
    answer_1?: StringWithAggregatesFilter | string
    answer_2?: StringNullableWithAggregatesFilter | string | null
  }

  export type feedback_question_2WhereInput = {
    AND?: Enumerable<feedback_question_2WhereInput>
    OR?: Enumerable<feedback_question_2WhereInput>
    NOT?: Enumerable<feedback_question_2WhereInput>
    ID?: IntFilter | number
    question_2?: StringFilter | string
    answer_1?: StringFilter | string
    answer_2?: StringNullableFilter | string | null
  }

  export type feedback_question_2OrderByWithRelationInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_2WhereUniqueInput = {
    ID?: number
  }

  export type feedback_question_2OrderByWithAggregationInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
    _count?: feedback_question_2CountOrderByAggregateInput
    _avg?: feedback_question_2AvgOrderByAggregateInput
    _max?: feedback_question_2MaxOrderByAggregateInput
    _min?: feedback_question_2MinOrderByAggregateInput
    _sum?: feedback_question_2SumOrderByAggregateInput
  }

  export type feedback_question_2ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<feedback_question_2ScalarWhereWithAggregatesInput>
    OR?: Enumerable<feedback_question_2ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<feedback_question_2ScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_2?: StringWithAggregatesFilter | string
    answer_1?: StringWithAggregatesFilter | string
    answer_2?: StringNullableWithAggregatesFilter | string | null
  }

  export type feedback_question_3WhereInput = {
    AND?: Enumerable<feedback_question_3WhereInput>
    OR?: Enumerable<feedback_question_3WhereInput>
    NOT?: Enumerable<feedback_question_3WhereInput>
    ID?: IntFilter | number
    question_3?: StringFilter | string
    answer_1?: StringFilter | string
    answer_2?: StringNullableFilter | string | null
  }

  export type feedback_question_3OrderByWithRelationInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_3WhereUniqueInput = {
    ID?: number
  }

  export type feedback_question_3OrderByWithAggregationInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
    _count?: feedback_question_3CountOrderByAggregateInput
    _avg?: feedback_question_3AvgOrderByAggregateInput
    _max?: feedback_question_3MaxOrderByAggregateInput
    _min?: feedback_question_3MinOrderByAggregateInput
    _sum?: feedback_question_3SumOrderByAggregateInput
  }

  export type feedback_question_3ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<feedback_question_3ScalarWhereWithAggregatesInput>
    OR?: Enumerable<feedback_question_3ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<feedback_question_3ScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_3?: StringWithAggregatesFilter | string
    answer_1?: StringWithAggregatesFilter | string
    answer_2?: StringNullableWithAggregatesFilter | string | null
  }

  export type feedback_question_4WhereInput = {
    AND?: Enumerable<feedback_question_4WhereInput>
    OR?: Enumerable<feedback_question_4WhereInput>
    NOT?: Enumerable<feedback_question_4WhereInput>
    ID?: IntFilter | number
    question_4?: StringFilter | string
    answer_1?: StringFilter | string
    answer_2?: StringNullableFilter | string | null
  }

  export type feedback_question_4OrderByWithRelationInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_4WhereUniqueInput = {
    ID?: number
  }

  export type feedback_question_4OrderByWithAggregationInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
    _count?: feedback_question_4CountOrderByAggregateInput
    _avg?: feedback_question_4AvgOrderByAggregateInput
    _max?: feedback_question_4MaxOrderByAggregateInput
    _min?: feedback_question_4MinOrderByAggregateInput
    _sum?: feedback_question_4SumOrderByAggregateInput
  }

  export type feedback_question_4ScalarWhereWithAggregatesInput = {
    AND?: Enumerable<feedback_question_4ScalarWhereWithAggregatesInput>
    OR?: Enumerable<feedback_question_4ScalarWhereWithAggregatesInput>
    NOT?: Enumerable<feedback_question_4ScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_4?: StringWithAggregatesFilter | string
    answer_1?: StringWithAggregatesFilter | string
    answer_2?: StringNullableWithAggregatesFilter | string | null
  }

  export type selected1_questionWhereInput = {
    AND?: Enumerable<selected1_questionWhereInput>
    OR?: Enumerable<selected1_questionWhereInput>
    NOT?: Enumerable<selected1_questionWhereInput>
    ID?: IntFilter | number
    question_1?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
    selected_teachers?: XOR<Selected_teachersRelationFilter, selected_teachersWhereInput>
  }

  export type selected1_questionOrderByWithRelationInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    selected_teachers?: selected_teachersOrderByWithRelationInput
  }

  export type selected1_questionWhereUniqueInput = {
    ID?: number
  }

  export type selected1_questionOrderByWithAggregationInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    _count?: selected1_questionCountOrderByAggregateInput
    _avg?: selected1_questionAvgOrderByAggregateInput
    _max?: selected1_questionMaxOrderByAggregateInput
    _min?: selected1_questionMinOrderByAggregateInput
    _sum?: selected1_questionSumOrderByAggregateInput
  }

  export type selected1_questionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<selected1_questionScalarWhereWithAggregatesInput>
    OR?: Enumerable<selected1_questionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<selected1_questionScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_1?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    selected_id?: IntWithAggregatesFilter | number
  }

  export type selected2_questionWhereInput = {
    AND?: Enumerable<selected2_questionWhereInput>
    OR?: Enumerable<selected2_questionWhereInput>
    NOT?: Enumerable<selected2_questionWhereInput>
    ID?: IntFilter | number
    question_2?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
    selected_teachers?: XOR<Selected_teachersRelationFilter, selected_teachersWhereInput>
  }

  export type selected2_questionOrderByWithRelationInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    selected_teachers?: selected_teachersOrderByWithRelationInput
  }

  export type selected2_questionWhereUniqueInput = {
    ID?: number
  }

  export type selected2_questionOrderByWithAggregationInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    _count?: selected2_questionCountOrderByAggregateInput
    _avg?: selected2_questionAvgOrderByAggregateInput
    _max?: selected2_questionMaxOrderByAggregateInput
    _min?: selected2_questionMinOrderByAggregateInput
    _sum?: selected2_questionSumOrderByAggregateInput
  }

  export type selected2_questionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<selected2_questionScalarWhereWithAggregatesInput>
    OR?: Enumerable<selected2_questionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<selected2_questionScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_2?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    selected_id?: IntWithAggregatesFilter | number
  }

  export type selected3_questionWhereInput = {
    AND?: Enumerable<selected3_questionWhereInput>
    OR?: Enumerable<selected3_questionWhereInput>
    NOT?: Enumerable<selected3_questionWhereInput>
    ID?: IntFilter | number
    question_3?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
    selected_teachers?: XOR<Selected_teachersRelationFilter, selected_teachersWhereInput>
  }

  export type selected3_questionOrderByWithRelationInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    selected_teachers?: selected_teachersOrderByWithRelationInput
  }

  export type selected3_questionWhereUniqueInput = {
    ID?: number
  }

  export type selected3_questionOrderByWithAggregationInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    _count?: selected3_questionCountOrderByAggregateInput
    _avg?: selected3_questionAvgOrderByAggregateInput
    _max?: selected3_questionMaxOrderByAggregateInput
    _min?: selected3_questionMinOrderByAggregateInput
    _sum?: selected3_questionSumOrderByAggregateInput
  }

  export type selected3_questionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<selected3_questionScalarWhereWithAggregatesInput>
    OR?: Enumerable<selected3_questionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<selected3_questionScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_3?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    selected_id?: IntWithAggregatesFilter | number
  }

  export type selected4_questionWhereInput = {
    AND?: Enumerable<selected4_questionWhereInput>
    OR?: Enumerable<selected4_questionWhereInput>
    NOT?: Enumerable<selected4_questionWhereInput>
    ID?: IntFilter | number
    question_4?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
    selected_teachers?: XOR<Selected_teachersRelationFilter, selected_teachersWhereInput>
  }

  export type selected4_questionOrderByWithRelationInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    selected_teachers?: selected_teachersOrderByWithRelationInput
  }

  export type selected4_questionWhereUniqueInput = {
    ID?: number
  }

  export type selected4_questionOrderByWithAggregationInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
    _count?: selected4_questionCountOrderByAggregateInput
    _avg?: selected4_questionAvgOrderByAggregateInput
    _max?: selected4_questionMaxOrderByAggregateInput
    _min?: selected4_questionMinOrderByAggregateInput
    _sum?: selected4_questionSumOrderByAggregateInput
  }

  export type selected4_questionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<selected4_questionScalarWhereWithAggregatesInput>
    OR?: Enumerable<selected4_questionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<selected4_questionScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    question_4?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    selected_id?: IntWithAggregatesFilter | number
  }

  export type user_registrationCreateInput = {
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: string
  }

  export type user_registrationUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: string
  }

  export type user_registrationUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_registrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_registrationCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    contact_number: bigint | number
    email_id: string
    address: string
    created_at: Date | string
    updated_at: Date | string
    status: string
  }

  export type user_registrationUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type user_registrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    contact_number?: BigIntFieldUpdateOperationsInput | bigint | number
    email_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type customer_tblCreateInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsCreateNestedManyWithoutCustomer_tblInput
    deliver_status?: deliver_statusCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsUncheckedCreateNestedManyWithoutCustomer_tblInput
    deliver_status?: deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUpdateInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUpdateManyWithoutCustomer_tblNestedInput
    deliver_status?: deliver_statusUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUncheckedUpdateManyWithoutCustomer_tblNestedInput
    deliver_status?: deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblCreateManyInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
  }

  export type customer_tblUpdateManyMutationInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
  }

  export type customer_tblUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
  }

  export type orders_tblCreateInput = {
    product_name: string
    product_price?: number | null
    customer_tbl: customer_tblCreateNestedOneWithoutOrders_tblInput
  }

  export type orders_tblUncheckedCreateInput = {
    product_id?: number
    product_name: string
    product_price?: number | null
    customer_id: number
  }

  export type orders_tblUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_tbl?: customer_tblUpdateOneRequiredWithoutOrders_tblNestedInput
  }

  export type orders_tblUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type orders_tblCreateManyInput = {
    product_id?: number
    product_name: string
    product_price?: number | null
    customer_id: number
  }

  export type orders_tblUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
    customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusCreateInput = {
    product_status: string
    customer_tbl: customer_tblCreateNestedOneWithoutDeliver_statusInput
  }

  export type deliver_statusUncheckedCreateInput = {
    deliver_id?: number
    customer_id: number
    product_status: string
  }

  export type deliver_statusUpdateInput = {
    product_status?: StringFieldUpdateOperationsInput | string
    customer_tbl?: customer_tblUpdateOneRequiredWithoutDeliver_statusNestedInput
  }

  export type deliver_statusUncheckedUpdateInput = {
    deliver_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type deliver_statusCreateManyInput = {
    deliver_id?: number
    customer_id: number
    product_status: string
  }

  export type deliver_statusUpdateManyMutationInput = {
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type deliver_statusUncheckedUpdateManyInput = {
    deliver_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type customer_agedetailsCreateInput = {
    customer_age: number
    customer_tbl: customer_tblCreateNestedOneWithoutCustomer_agedetailsInput
  }

  export type customer_agedetailsUncheckedCreateInput = {
    ID?: number
    customer_id: number
    customer_age: number
  }

  export type customer_agedetailsUpdateInput = {
    customer_age?: IntFieldUpdateOperationsInput | number
    customer_tbl?: customer_tblUpdateOneRequiredWithoutCustomer_agedetailsNestedInput
  }

  export type customer_agedetailsUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type customer_agedetailsCreateManyInput = {
    ID?: number
    customer_id: number
    customer_age: number
  }

  export type customer_agedetailsUpdateManyMutationInput = {
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type customer_agedetailsUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type statusCreateInput = {
    current_status: string
  }

  export type statusUncheckedCreateInput = {
    ID?: number
    current_status: string
  }

  export type statusUpdateInput = {
    current_status?: StringFieldUpdateOperationsInput | string
  }

  export type statusUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    current_status?: StringFieldUpdateOperationsInput | string
  }

  export type statusCreateManyInput = {
    ID?: number
    current_status: string
  }

  export type statusUpdateManyMutationInput = {
    current_status?: StringFieldUpdateOperationsInput | string
  }

  export type statusUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    current_status?: StringFieldUpdateOperationsInput | string
  }

  export type cart_tableCreateInput = {
    product_name: string
    product_price_cart: number
    product_quantity_cart?: number | null
    product_image: string
    product_table: product_tableCreateNestedOneWithoutCart_tableInput
  }

  export type cart_tableUncheckedCreateInput = {
    id?: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart?: number | null
    product_image: string
  }

  export type cart_tableUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
    product_table?: product_tableUpdateOneRequiredWithoutCart_tableNestedInput
  }

  export type cart_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
  }

  export type cart_tableCreateManyInput = {
    id?: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart?: number | null
    product_image: string
  }

  export type cart_tableUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
  }

  export type cart_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
  }

  export type product_tableCreateInput = {
    product_image: string
    product_name: string
    product_price: number
    strikeout_price?: number | null
    cart_table?: cart_tableCreateNestedOneWithoutProduct_tableInput
  }

  export type product_tableUncheckedCreateInput = {
    product_id?: number
    product_image: string
    product_name: string
    product_price: number
    strikeout_price?: number | null
    cart_table?: cart_tableUncheckedCreateNestedOneWithoutProduct_tableInput
  }

  export type product_tableUpdateInput = {
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
    cart_table?: cart_tableUpdateOneWithoutProduct_tableNestedInput
  }

  export type product_tableUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
    cart_table?: cart_tableUncheckedUpdateOneWithoutProduct_tableNestedInput
  }

  export type product_tableCreateManyInput = {
    product_id?: number
    product_image: string
    product_name: string
    product_price: number
    strikeout_price?: number | null
  }

  export type product_tableUpdateManyMutationInput = {
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_tableUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type save_later_tableCreateInput = {
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart: number
    product_image: string
    product_price: number
  }

  export type save_later_tableUncheckedCreateInput = {
    id?: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart: number
    product_image: string
    product_price: number
  }

  export type save_later_tableUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
  }

  export type save_later_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
  }

  export type save_later_tableCreateManyInput = {
    id?: number
    product_id: number
    product_name: string
    product_price_cart: number
    product_quantity_cart: number
    product_image: string
    product_price: number
  }

  export type save_later_tableUpdateManyMutationInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
  }

  export type save_later_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
  }

  export type address_tableCreateInput = {
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type address_tableUncheckedCreateInput = {
    id?: number
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type address_tableUpdateInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type address_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type address_tableCreateManyInput = {
    id?: number
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type address_tableUpdateManyMutationInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type address_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type save_address_tableCreateInput = {
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type save_address_tableUncheckedCreateInput = {
    id?: number
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type save_address_tableUpdateInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type save_address_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type save_address_tableCreateManyInput = {
    id?: number
    user_address: string
    user_street?: string | null
    user_pincode?: bigint | number | null
  }

  export type save_address_tableUpdateManyMutationInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type save_address_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    user_street?: NullableStringFieldUpdateOperationsInput | string | null
    user_pincode?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type save_cart_totalpriceCreateInput = {
    save_cart_totalprice: number
  }

  export type save_cart_totalpriceUncheckedCreateInput = {
    id?: number
    save_cart_totalprice: number
  }

  export type save_cart_totalpriceUpdateInput = {
    save_cart_totalprice?: IntFieldUpdateOperationsInput | number
  }

  export type save_cart_totalpriceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    save_cart_totalprice?: IntFieldUpdateOperationsInput | number
  }

  export type save_cart_totalpriceCreateManyInput = {
    id?: number
    save_cart_totalprice: number
  }

  export type save_cart_totalpriceUpdateManyMutationInput = {
    save_cart_totalprice?: IntFieldUpdateOperationsInput | number
  }

  export type save_cart_totalpriceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    save_cart_totalprice?: IntFieldUpdateOperationsInput | number
  }

  export type credit_tableCreateInput = {
    credit_balance: number
  }

  export type credit_tableUncheckedCreateInput = {
    id?: number
    credit_balance: number
  }

  export type credit_tableUpdateInput = {
    credit_balance?: IntFieldUpdateOperationsInput | number
  }

  export type credit_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    credit_balance?: IntFieldUpdateOperationsInput | number
  }

  export type credit_tableCreateManyInput = {
    id?: number
    credit_balance: number
  }

  export type credit_tableUpdateManyMutationInput = {
    credit_balance?: IntFieldUpdateOperationsInput | number
  }

  export type credit_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    credit_balance?: IntFieldUpdateOperationsInput | number
  }

  export type teachers_listCreateInput = {
    teachers_name: string
  }

  export type teachers_listUncheckedCreateInput = {
    ID?: number
    teachers_name: string
  }

  export type teachers_listUpdateInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type teachers_listUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type teachers_listCreateManyInput = {
    ID?: number
    teachers_name: string
  }

  export type teachers_listUpdateManyMutationInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type teachers_listUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type questions_and_teachers_listCreateInput = {
    teachers_name: string
    feedback_questions: string
  }

  export type questions_and_teachers_listUncheckedCreateInput = {
    id?: number
    teachers_name: string
    feedback_questions: string
  }

  export type questions_and_teachers_listUpdateInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    feedback_questions?: StringFieldUpdateOperationsInput | string
  }

  export type questions_and_teachers_listUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    feedback_questions?: StringFieldUpdateOperationsInput | string
  }

  export type questions_and_teachers_listCreateManyInput = {
    id?: number
    teachers_name: string
    feedback_questions: string
  }

  export type questions_and_teachers_listUpdateManyMutationInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    feedback_questions?: StringFieldUpdateOperationsInput | string
  }

  export type questions_and_teachers_listUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    feedback_questions?: StringFieldUpdateOperationsInput | string
  }

  export type selected_teachersCreateInput = {
    teachers_name: string
    selected1_question?: selected1_questionCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUncheckedCreateInput = {
    selected_id?: number
    teachers_name: string
    selected1_question?: selected1_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUpdateInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersUncheckedUpdateInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersCreateManyInput = {
    selected_id?: number
    teachers_name: string
  }

  export type selected_teachersUpdateManyMutationInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type selected_teachersUncheckedUpdateManyInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
  }

  export type feedback_question_1CreateInput = {
    question_1: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_1UncheckedCreateInput = {
    ID?: number
    question_1: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_1UpdateInput = {
    question_1?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_1UncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_1CreateManyInput = {
    ID?: number
    question_1: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_1UpdateManyMutationInput = {
    question_1?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_1UncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_2CreateInput = {
    question_2: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_2UncheckedCreateInput = {
    ID?: number
    question_2: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_2UpdateInput = {
    question_2?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_2UncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_2CreateManyInput = {
    ID?: number
    question_2: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_2UpdateManyMutationInput = {
    question_2?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_2UncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_3CreateInput = {
    question_3: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_3UncheckedCreateInput = {
    ID?: number
    question_3: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_3UpdateInput = {
    question_3?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_3UncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_3CreateManyInput = {
    ID?: number
    question_3: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_3UpdateManyMutationInput = {
    question_3?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_3UncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_4CreateInput = {
    question_4: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_4UncheckedCreateInput = {
    ID?: number
    question_4: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_4UpdateInput = {
    question_4?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_4UncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_4CreateManyInput = {
    ID?: number
    question_4: string
    answer_1: string
    answer_2?: string | null
  }

  export type feedback_question_4UpdateManyMutationInput = {
    question_4?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type feedback_question_4UncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer_1?: StringFieldUpdateOperationsInput | string
    answer_2?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type selected1_questionCreateInput = {
    question_1: string
    answer: string
    selected_teachers: selected_teachersCreateNestedOneWithoutSelected1_questionInput
  }

  export type selected1_questionUncheckedCreateInput = {
    ID?: number
    question_1: string
    answer: string
    selected_id: number
  }

  export type selected1_questionUpdateInput = {
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_teachers?: selected_teachersUpdateOneRequiredWithoutSelected1_questionNestedInput
  }

  export type selected1_questionUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected1_questionCreateManyInput = {
    ID?: number
    question_1: string
    answer: string
    selected_id: number
  }

  export type selected1_questionUpdateManyMutationInput = {
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected1_questionUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected2_questionCreateInput = {
    question_2: string
    answer: string
    selected_teachers: selected_teachersCreateNestedOneWithoutSelected2_questionInput
  }

  export type selected2_questionUncheckedCreateInput = {
    ID?: number
    question_2: string
    answer: string
    selected_id: number
  }

  export type selected2_questionUpdateInput = {
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_teachers?: selected_teachersUpdateOneRequiredWithoutSelected2_questionNestedInput
  }

  export type selected2_questionUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected2_questionCreateManyInput = {
    ID?: number
    question_2: string
    answer: string
    selected_id: number
  }

  export type selected2_questionUpdateManyMutationInput = {
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected2_questionUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected3_questionCreateInput = {
    question_3: string
    answer: string
    selected_teachers: selected_teachersCreateNestedOneWithoutSelected3_questionInput
  }

  export type selected3_questionUncheckedCreateInput = {
    ID?: number
    question_3: string
    answer: string
    selected_id: number
  }

  export type selected3_questionUpdateInput = {
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_teachers?: selected_teachersUpdateOneRequiredWithoutSelected3_questionNestedInput
  }

  export type selected3_questionUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected3_questionCreateManyInput = {
    ID?: number
    question_3: string
    answer: string
    selected_id: number
  }

  export type selected3_questionUpdateManyMutationInput = {
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected3_questionUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected4_questionCreateInput = {
    question_4: string
    answer: string
    selected_teachers: selected_teachersCreateNestedOneWithoutSelected4_questionInput
  }

  export type selected4_questionUncheckedCreateInput = {
    ID?: number
    question_4: string
    answer: string
    selected_id: number
  }

  export type selected4_questionUpdateInput = {
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_teachers?: selected_teachersUpdateOneRequiredWithoutSelected4_questionNestedInput
  }

  export type selected4_questionUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type selected4_questionCreateManyInput = {
    ID?: number
    question_4: string
    answer: string
    selected_id: number
  }

  export type selected4_questionUpdateManyMutationInput = {
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected4_questionUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    selected_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type user_registrationCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationAvgOrderByAggregateInput = {
    id?: SortOrder
    contact_number?: SortOrder
  }

  export type user_registrationMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    contact_number?: SortOrder
    email_id?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    status?: SortOrder
  }

  export type user_registrationSumOrderByAggregateInput = {
    id?: SortOrder
    contact_number?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Customer_agedetailsListRelationFilter = {
    every?: customer_agedetailsWhereInput
    some?: customer_agedetailsWhereInput
    none?: customer_agedetailsWhereInput
  }

  export type Deliver_statusListRelationFilter = {
    every?: deliver_statusWhereInput
    some?: deliver_statusWhereInput
    none?: deliver_statusWhereInput
  }

  export type Orders_tblListRelationFilter = {
    every?: orders_tblWhereInput
    some?: orders_tblWhereInput
    none?: orders_tblWhereInput
  }

  export type customer_agedetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deliver_statusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orders_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customer_tblCountOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type customer_tblMaxOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblMinOrderByAggregateInput = {
    ID?: SortOrder
    customer_first_name?: SortOrder
    customer_last_name?: SortOrder
    Email_id?: SortOrder
  }

  export type customer_tblSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Customer_tblRelationFilter = {
    is?: customer_tblWhereInput
    isNot?: customer_tblWhereInput
  }

  export type orders_tblCountOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblAvgOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblMaxOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblMinOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type orders_tblSumOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    customer_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type deliver_statusCountOrderByAggregateInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
    product_status?: SortOrder
  }

  export type deliver_statusAvgOrderByAggregateInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
  }

  export type deliver_statusMaxOrderByAggregateInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
    product_status?: SortOrder
  }

  export type deliver_statusMinOrderByAggregateInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
    product_status?: SortOrder
  }

  export type deliver_statusSumOrderByAggregateInput = {
    deliver_id?: SortOrder
    customer_id?: SortOrder
  }

  export type customer_agedetailsCountOrderByAggregateInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
  }

  export type customer_agedetailsAvgOrderByAggregateInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
  }

  export type customer_agedetailsMaxOrderByAggregateInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
  }

  export type customer_agedetailsMinOrderByAggregateInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
  }

  export type customer_agedetailsSumOrderByAggregateInput = {
    ID?: SortOrder
    customer_id?: SortOrder
    customer_age?: SortOrder
  }

  export type statusCountOrderByAggregateInput = {
    ID?: SortOrder
    current_status?: SortOrder
  }

  export type statusAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type statusMaxOrderByAggregateInput = {
    ID?: SortOrder
    current_status?: SortOrder
  }

  export type statusMinOrderByAggregateInput = {
    ID?: SortOrder
    current_status?: SortOrder
  }

  export type statusSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type Product_tableRelationFilter = {
    is?: product_tableWhereInput
    isNot?: product_tableWhereInput
  }

  export type cart_tableCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
  }

  export type cart_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
  }

  export type cart_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
  }

  export type cart_tableMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
  }

  export type cart_tableSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
  }

  export type Cart_tableRelationFilter = {
    is?: cart_tableWhereInput | null
    isNot?: cart_tableWhereInput | null
  }

  export type product_tableCountOrderByAggregateInput = {
    product_id?: SortOrder
    product_image?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
  }

  export type product_tableAvgOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
  }

  export type product_tableMaxOrderByAggregateInput = {
    product_id?: SortOrder
    product_image?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
  }

  export type product_tableMinOrderByAggregateInput = {
    product_id?: SortOrder
    product_image?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
  }

  export type product_tableSumOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    strikeout_price?: SortOrder
  }

  export type save_later_tableCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_price?: SortOrder
  }

  export type save_later_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_price?: SortOrder
  }

  export type save_later_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_price?: SortOrder
  }

  export type save_later_tableMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_name?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_image?: SortOrder
    product_price?: SortOrder
  }

  export type save_later_tableSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    product_price_cart?: SortOrder
    product_quantity_cart?: SortOrder
    product_price?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type address_tableCountOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type address_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    user_pincode?: SortOrder
  }

  export type address_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type address_tableMinOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type address_tableSumOrderByAggregateInput = {
    id?: SortOrder
    user_pincode?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type save_address_tableCountOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_address_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_address_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_address_tableMinOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    user_street?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_address_tableSumOrderByAggregateInput = {
    id?: SortOrder
    user_pincode?: SortOrder
  }

  export type save_cart_totalpriceCountOrderByAggregateInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type save_cart_totalpriceAvgOrderByAggregateInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type save_cart_totalpriceMaxOrderByAggregateInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type save_cart_totalpriceMinOrderByAggregateInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type save_cart_totalpriceSumOrderByAggregateInput = {
    id?: SortOrder
    save_cart_totalprice?: SortOrder
  }

  export type credit_tableCountOrderByAggregateInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type credit_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type credit_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type credit_tableMinOrderByAggregateInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type credit_tableSumOrderByAggregateInput = {
    id?: SortOrder
    credit_balance?: SortOrder
  }

  export type teachers_listCountOrderByAggregateInput = {
    ID?: SortOrder
    teachers_name?: SortOrder
  }

  export type teachers_listAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type teachers_listMaxOrderByAggregateInput = {
    ID?: SortOrder
    teachers_name?: SortOrder
  }

  export type teachers_listMinOrderByAggregateInput = {
    ID?: SortOrder
    teachers_name?: SortOrder
  }

  export type teachers_listSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type questions_and_teachers_listCountOrderByAggregateInput = {
    id?: SortOrder
    teachers_name?: SortOrder
    feedback_questions?: SortOrder
  }

  export type questions_and_teachers_listAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type questions_and_teachers_listMaxOrderByAggregateInput = {
    id?: SortOrder
    teachers_name?: SortOrder
    feedback_questions?: SortOrder
  }

  export type questions_and_teachers_listMinOrderByAggregateInput = {
    id?: SortOrder
    teachers_name?: SortOrder
    feedback_questions?: SortOrder
  }

  export type questions_and_teachers_listSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Selected1_questionListRelationFilter = {
    every?: selected1_questionWhereInput
    some?: selected1_questionWhereInput
    none?: selected1_questionWhereInput
  }

  export type Selected2_questionListRelationFilter = {
    every?: selected2_questionWhereInput
    some?: selected2_questionWhereInput
    none?: selected2_questionWhereInput
  }

  export type Selected3_questionListRelationFilter = {
    every?: selected3_questionWhereInput
    some?: selected3_questionWhereInput
    none?: selected3_questionWhereInput
  }

  export type Selected4_questionListRelationFilter = {
    every?: selected4_questionWhereInput
    some?: selected4_questionWhereInput
    none?: selected4_questionWhereInput
  }

  export type selected1_questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type selected2_questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type selected3_questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type selected4_questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type selected_teachersCountOrderByAggregateInput = {
    selected_id?: SortOrder
    teachers_name?: SortOrder
  }

  export type selected_teachersAvgOrderByAggregateInput = {
    selected_id?: SortOrder
  }

  export type selected_teachersMaxOrderByAggregateInput = {
    selected_id?: SortOrder
    teachers_name?: SortOrder
  }

  export type selected_teachersMinOrderByAggregateInput = {
    selected_id?: SortOrder
    teachers_name?: SortOrder
  }

  export type selected_teachersSumOrderByAggregateInput = {
    selected_id?: SortOrder
  }

  export type feedback_question_1CountOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_1AvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_1MaxOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_1MinOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_1SumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_2CountOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_2AvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_2MaxOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_2MinOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_2SumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_3CountOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_3AvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_3MaxOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_3MinOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_3SumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_4CountOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_4AvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type feedback_question_4MaxOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_4MinOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer_1?: SortOrder
    answer_2?: SortOrder
  }

  export type feedback_question_4SumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type Selected_teachersRelationFilter = {
    is?: selected_teachersWhereInput
    isNot?: selected_teachersWhereInput
  }

  export type selected1_questionCountOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected1_questionAvgOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected1_questionMaxOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected1_questionMinOrderByAggregateInput = {
    ID?: SortOrder
    question_1?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected1_questionSumOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected2_questionCountOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected2_questionAvgOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected2_questionMaxOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected2_questionMinOrderByAggregateInput = {
    ID?: SortOrder
    question_2?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected2_questionSumOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected3_questionCountOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected3_questionAvgOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected3_questionMaxOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected3_questionMinOrderByAggregateInput = {
    ID?: SortOrder
    question_3?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected3_questionSumOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected4_questionCountOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected4_questionAvgOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type selected4_questionMaxOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected4_questionMinOrderByAggregateInput = {
    ID?: SortOrder
    question_4?: SortOrder
    answer?: SortOrder
    selected_id?: SortOrder
  }

  export type selected4_questionSumOrderByAggregateInput = {
    ID?: SortOrder
    selected_id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type customer_agedetailsCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<customer_agedetailsCreateWithoutCustomer_tblInput>, Enumerable<customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<customer_agedetailsCreateOrConnectWithoutCustomer_tblInput>
    createMany?: customer_agedetailsCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<customer_agedetailsWhereUniqueInput>
  }

  export type deliver_statusCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<deliver_statusWhereUniqueInput>
  }

  export type orders_tblCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<orders_tblWhereUniqueInput>
  }

  export type customer_agedetailsUncheckedCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<customer_agedetailsCreateWithoutCustomer_tblInput>, Enumerable<customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<customer_agedetailsCreateOrConnectWithoutCustomer_tblInput>
    createMany?: customer_agedetailsCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<customer_agedetailsWhereUniqueInput>
  }

  export type deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<deliver_statusWhereUniqueInput>
  }

  export type orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    connect?: Enumerable<orders_tblWhereUniqueInput>
  }

  export type customer_agedetailsUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<customer_agedetailsCreateWithoutCustomer_tblInput>, Enumerable<customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<customer_agedetailsCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<customer_agedetailsUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: customer_agedetailsCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<customer_agedetailsWhereUniqueInput>
    disconnect?: Enumerable<customer_agedetailsWhereUniqueInput>
    delete?: Enumerable<customer_agedetailsWhereUniqueInput>
    connect?: Enumerable<customer_agedetailsWhereUniqueInput>
    update?: Enumerable<customer_agedetailsUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<customer_agedetailsUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<customer_agedetailsScalarWhereInput>
  }

  export type deliver_statusUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<deliver_statusWhereUniqueInput>
    disconnect?: Enumerable<deliver_statusWhereUniqueInput>
    delete?: Enumerable<deliver_statusWhereUniqueInput>
    connect?: Enumerable<deliver_statusWhereUniqueInput>
    update?: Enumerable<deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<deliver_statusScalarWhereInput>
  }

  export type orders_tblUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<orders_tblWhereUniqueInput>
    disconnect?: Enumerable<orders_tblWhereUniqueInput>
    delete?: Enumerable<orders_tblWhereUniqueInput>
    connect?: Enumerable<orders_tblWhereUniqueInput>
    update?: Enumerable<orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<orders_tblUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<orders_tblScalarWhereInput>
  }

  export type customer_agedetailsUncheckedUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<customer_agedetailsCreateWithoutCustomer_tblInput>, Enumerable<customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<customer_agedetailsCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<customer_agedetailsUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: customer_agedetailsCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<customer_agedetailsWhereUniqueInput>
    disconnect?: Enumerable<customer_agedetailsWhereUniqueInput>
    delete?: Enumerable<customer_agedetailsWhereUniqueInput>
    connect?: Enumerable<customer_agedetailsWhereUniqueInput>
    update?: Enumerable<customer_agedetailsUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<customer_agedetailsUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<customer_agedetailsScalarWhereInput>
  }

  export type deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<deliver_statusCreateWithoutCustomer_tblInput>, Enumerable<deliver_statusUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<deliver_statusCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: deliver_statusCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<deliver_statusWhereUniqueInput>
    disconnect?: Enumerable<deliver_statusWhereUniqueInput>
    delete?: Enumerable<deliver_statusWhereUniqueInput>
    connect?: Enumerable<deliver_statusWhereUniqueInput>
    update?: Enumerable<deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<deliver_statusScalarWhereInput>
  }

  export type orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput = {
    create?: XOR<Enumerable<orders_tblCreateWithoutCustomer_tblInput>, Enumerable<orders_tblUncheckedCreateWithoutCustomer_tblInput>>
    connectOrCreate?: Enumerable<orders_tblCreateOrConnectWithoutCustomer_tblInput>
    upsert?: Enumerable<orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput>
    createMany?: orders_tblCreateManyCustomer_tblInputEnvelope
    set?: Enumerable<orders_tblWhereUniqueInput>
    disconnect?: Enumerable<orders_tblWhereUniqueInput>
    delete?: Enumerable<orders_tblWhereUniqueInput>
    connect?: Enumerable<orders_tblWhereUniqueInput>
    update?: Enumerable<orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput>
    updateMany?: Enumerable<orders_tblUpdateManyWithWhereWithoutCustomer_tblInput>
    deleteMany?: Enumerable<orders_tblScalarWhereInput>
  }

  export type customer_tblCreateNestedOneWithoutOrders_tblInput = {
    create?: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutOrders_tblInput
    connect?: customer_tblWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type customer_tblUpdateOneRequiredWithoutOrders_tblNestedInput = {
    create?: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutOrders_tblInput
    upsert?: customer_tblUpsertWithoutOrders_tblInput
    connect?: customer_tblWhereUniqueInput
    update?: XOR<customer_tblUpdateWithoutOrders_tblInput, customer_tblUncheckedUpdateWithoutOrders_tblInput>
  }

  export type customer_tblCreateNestedOneWithoutDeliver_statusInput = {
    create?: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutDeliver_statusInput
    connect?: customer_tblWhereUniqueInput
  }

  export type customer_tblUpdateOneRequiredWithoutDeliver_statusNestedInput = {
    create?: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutDeliver_statusInput
    upsert?: customer_tblUpsertWithoutDeliver_statusInput
    connect?: customer_tblWhereUniqueInput
    update?: XOR<customer_tblUpdateWithoutDeliver_statusInput, customer_tblUncheckedUpdateWithoutDeliver_statusInput>
  }

  export type customer_tblCreateNestedOneWithoutCustomer_agedetailsInput = {
    create?: XOR<customer_tblCreateWithoutCustomer_agedetailsInput, customer_tblUncheckedCreateWithoutCustomer_agedetailsInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutCustomer_agedetailsInput
    connect?: customer_tblWhereUniqueInput
  }

  export type customer_tblUpdateOneRequiredWithoutCustomer_agedetailsNestedInput = {
    create?: XOR<customer_tblCreateWithoutCustomer_agedetailsInput, customer_tblUncheckedCreateWithoutCustomer_agedetailsInput>
    connectOrCreate?: customer_tblCreateOrConnectWithoutCustomer_agedetailsInput
    upsert?: customer_tblUpsertWithoutCustomer_agedetailsInput
    connect?: customer_tblWhereUniqueInput
    update?: XOR<customer_tblUpdateWithoutCustomer_agedetailsInput, customer_tblUncheckedUpdateWithoutCustomer_agedetailsInput>
  }

  export type product_tableCreateNestedOneWithoutCart_tableInput = {
    create?: XOR<product_tableCreateWithoutCart_tableInput, product_tableUncheckedCreateWithoutCart_tableInput>
    connectOrCreate?: product_tableCreateOrConnectWithoutCart_tableInput
    connect?: product_tableWhereUniqueInput
  }

  export type product_tableUpdateOneRequiredWithoutCart_tableNestedInput = {
    create?: XOR<product_tableCreateWithoutCart_tableInput, product_tableUncheckedCreateWithoutCart_tableInput>
    connectOrCreate?: product_tableCreateOrConnectWithoutCart_tableInput
    upsert?: product_tableUpsertWithoutCart_tableInput
    connect?: product_tableWhereUniqueInput
    update?: XOR<product_tableUpdateWithoutCart_tableInput, product_tableUncheckedUpdateWithoutCart_tableInput>
  }

  export type cart_tableCreateNestedOneWithoutProduct_tableInput = {
    create?: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
    connectOrCreate?: cart_tableCreateOrConnectWithoutProduct_tableInput
    connect?: cart_tableWhereUniqueInput
  }

  export type cart_tableUncheckedCreateNestedOneWithoutProduct_tableInput = {
    create?: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
    connectOrCreate?: cart_tableCreateOrConnectWithoutProduct_tableInput
    connect?: cart_tableWhereUniqueInput
  }

  export type cart_tableUpdateOneWithoutProduct_tableNestedInput = {
    create?: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
    connectOrCreate?: cart_tableCreateOrConnectWithoutProduct_tableInput
    upsert?: cart_tableUpsertWithoutProduct_tableInput
    disconnect?: boolean
    delete?: boolean
    connect?: cart_tableWhereUniqueInput
    update?: XOR<cart_tableUpdateWithoutProduct_tableInput, cart_tableUncheckedUpdateWithoutProduct_tableInput>
  }

  export type cart_tableUncheckedUpdateOneWithoutProduct_tableNestedInput = {
    create?: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
    connectOrCreate?: cart_tableCreateOrConnectWithoutProduct_tableInput
    upsert?: cart_tableUpsertWithoutProduct_tableInput
    disconnect?: boolean
    delete?: boolean
    connect?: cart_tableWhereUniqueInput
    update?: XOR<cart_tableUpdateWithoutProduct_tableInput, cart_tableUncheckedUpdateWithoutProduct_tableInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type selected1_questionCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected1_questionCreateWithoutSelected_teachersInput>, Enumerable<selected1_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected1_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected1_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected1_questionWhereUniqueInput>
  }

  export type selected2_questionCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected2_questionCreateWithoutSelected_teachersInput>, Enumerable<selected2_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected2_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected2_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected2_questionWhereUniqueInput>
  }

  export type selected3_questionCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected3_questionCreateWithoutSelected_teachersInput>, Enumerable<selected3_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected3_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected3_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected3_questionWhereUniqueInput>
  }

  export type selected4_questionCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected4_questionCreateWithoutSelected_teachersInput>, Enumerable<selected4_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected4_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected4_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected4_questionWhereUniqueInput>
  }

  export type selected1_questionUncheckedCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected1_questionCreateWithoutSelected_teachersInput>, Enumerable<selected1_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected1_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected1_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected1_questionWhereUniqueInput>
  }

  export type selected2_questionUncheckedCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected2_questionCreateWithoutSelected_teachersInput>, Enumerable<selected2_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected2_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected2_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected2_questionWhereUniqueInput>
  }

  export type selected3_questionUncheckedCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected3_questionCreateWithoutSelected_teachersInput>, Enumerable<selected3_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected3_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected3_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected3_questionWhereUniqueInput>
  }

  export type selected4_questionUncheckedCreateNestedManyWithoutSelected_teachersInput = {
    create?: XOR<Enumerable<selected4_questionCreateWithoutSelected_teachersInput>, Enumerable<selected4_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected4_questionCreateOrConnectWithoutSelected_teachersInput>
    createMany?: selected4_questionCreateManySelected_teachersInputEnvelope
    connect?: Enumerable<selected4_questionWhereUniqueInput>
  }

  export type selected1_questionUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected1_questionCreateWithoutSelected_teachersInput>, Enumerable<selected1_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected1_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected1_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected1_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected1_questionWhereUniqueInput>
    disconnect?: Enumerable<selected1_questionWhereUniqueInput>
    delete?: Enumerable<selected1_questionWhereUniqueInput>
    connect?: Enumerable<selected1_questionWhereUniqueInput>
    update?: Enumerable<selected1_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected1_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected1_questionScalarWhereInput>
  }

  export type selected2_questionUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected2_questionCreateWithoutSelected_teachersInput>, Enumerable<selected2_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected2_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected2_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected2_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected2_questionWhereUniqueInput>
    disconnect?: Enumerable<selected2_questionWhereUniqueInput>
    delete?: Enumerable<selected2_questionWhereUniqueInput>
    connect?: Enumerable<selected2_questionWhereUniqueInput>
    update?: Enumerable<selected2_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected2_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected2_questionScalarWhereInput>
  }

  export type selected3_questionUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected3_questionCreateWithoutSelected_teachersInput>, Enumerable<selected3_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected3_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected3_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected3_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected3_questionWhereUniqueInput>
    disconnect?: Enumerable<selected3_questionWhereUniqueInput>
    delete?: Enumerable<selected3_questionWhereUniqueInput>
    connect?: Enumerable<selected3_questionWhereUniqueInput>
    update?: Enumerable<selected3_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected3_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected3_questionScalarWhereInput>
  }

  export type selected4_questionUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected4_questionCreateWithoutSelected_teachersInput>, Enumerable<selected4_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected4_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected4_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected4_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected4_questionWhereUniqueInput>
    disconnect?: Enumerable<selected4_questionWhereUniqueInput>
    delete?: Enumerable<selected4_questionWhereUniqueInput>
    connect?: Enumerable<selected4_questionWhereUniqueInput>
    update?: Enumerable<selected4_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected4_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected4_questionScalarWhereInput>
  }

  export type selected1_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected1_questionCreateWithoutSelected_teachersInput>, Enumerable<selected1_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected1_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected1_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected1_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected1_questionWhereUniqueInput>
    disconnect?: Enumerable<selected1_questionWhereUniqueInput>
    delete?: Enumerable<selected1_questionWhereUniqueInput>
    connect?: Enumerable<selected1_questionWhereUniqueInput>
    update?: Enumerable<selected1_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected1_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected1_questionScalarWhereInput>
  }

  export type selected2_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected2_questionCreateWithoutSelected_teachersInput>, Enumerable<selected2_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected2_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected2_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected2_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected2_questionWhereUniqueInput>
    disconnect?: Enumerable<selected2_questionWhereUniqueInput>
    delete?: Enumerable<selected2_questionWhereUniqueInput>
    connect?: Enumerable<selected2_questionWhereUniqueInput>
    update?: Enumerable<selected2_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected2_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected2_questionScalarWhereInput>
  }

  export type selected3_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected3_questionCreateWithoutSelected_teachersInput>, Enumerable<selected3_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected3_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected3_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected3_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected3_questionWhereUniqueInput>
    disconnect?: Enumerable<selected3_questionWhereUniqueInput>
    delete?: Enumerable<selected3_questionWhereUniqueInput>
    connect?: Enumerable<selected3_questionWhereUniqueInput>
    update?: Enumerable<selected3_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected3_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected3_questionScalarWhereInput>
  }

  export type selected4_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput = {
    create?: XOR<Enumerable<selected4_questionCreateWithoutSelected_teachersInput>, Enumerable<selected4_questionUncheckedCreateWithoutSelected_teachersInput>>
    connectOrCreate?: Enumerable<selected4_questionCreateOrConnectWithoutSelected_teachersInput>
    upsert?: Enumerable<selected4_questionUpsertWithWhereUniqueWithoutSelected_teachersInput>
    createMany?: selected4_questionCreateManySelected_teachersInputEnvelope
    set?: Enumerable<selected4_questionWhereUniqueInput>
    disconnect?: Enumerable<selected4_questionWhereUniqueInput>
    delete?: Enumerable<selected4_questionWhereUniqueInput>
    connect?: Enumerable<selected4_questionWhereUniqueInput>
    update?: Enumerable<selected4_questionUpdateWithWhereUniqueWithoutSelected_teachersInput>
    updateMany?: Enumerable<selected4_questionUpdateManyWithWhereWithoutSelected_teachersInput>
    deleteMany?: Enumerable<selected4_questionScalarWhereInput>
  }

  export type selected_teachersCreateNestedOneWithoutSelected1_questionInput = {
    create?: XOR<selected_teachersCreateWithoutSelected1_questionInput, selected_teachersUncheckedCreateWithoutSelected1_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected1_questionInput
    connect?: selected_teachersWhereUniqueInput
  }

  export type selected_teachersUpdateOneRequiredWithoutSelected1_questionNestedInput = {
    create?: XOR<selected_teachersCreateWithoutSelected1_questionInput, selected_teachersUncheckedCreateWithoutSelected1_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected1_questionInput
    upsert?: selected_teachersUpsertWithoutSelected1_questionInput
    connect?: selected_teachersWhereUniqueInput
    update?: XOR<selected_teachersUpdateWithoutSelected1_questionInput, selected_teachersUncheckedUpdateWithoutSelected1_questionInput>
  }

  export type selected_teachersCreateNestedOneWithoutSelected2_questionInput = {
    create?: XOR<selected_teachersCreateWithoutSelected2_questionInput, selected_teachersUncheckedCreateWithoutSelected2_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected2_questionInput
    connect?: selected_teachersWhereUniqueInput
  }

  export type selected_teachersUpdateOneRequiredWithoutSelected2_questionNestedInput = {
    create?: XOR<selected_teachersCreateWithoutSelected2_questionInput, selected_teachersUncheckedCreateWithoutSelected2_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected2_questionInput
    upsert?: selected_teachersUpsertWithoutSelected2_questionInput
    connect?: selected_teachersWhereUniqueInput
    update?: XOR<selected_teachersUpdateWithoutSelected2_questionInput, selected_teachersUncheckedUpdateWithoutSelected2_questionInput>
  }

  export type selected_teachersCreateNestedOneWithoutSelected3_questionInput = {
    create?: XOR<selected_teachersCreateWithoutSelected3_questionInput, selected_teachersUncheckedCreateWithoutSelected3_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected3_questionInput
    connect?: selected_teachersWhereUniqueInput
  }

  export type selected_teachersUpdateOneRequiredWithoutSelected3_questionNestedInput = {
    create?: XOR<selected_teachersCreateWithoutSelected3_questionInput, selected_teachersUncheckedCreateWithoutSelected3_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected3_questionInput
    upsert?: selected_teachersUpsertWithoutSelected3_questionInput
    connect?: selected_teachersWhereUniqueInput
    update?: XOR<selected_teachersUpdateWithoutSelected3_questionInput, selected_teachersUncheckedUpdateWithoutSelected3_questionInput>
  }

  export type selected_teachersCreateNestedOneWithoutSelected4_questionInput = {
    create?: XOR<selected_teachersCreateWithoutSelected4_questionInput, selected_teachersUncheckedCreateWithoutSelected4_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected4_questionInput
    connect?: selected_teachersWhereUniqueInput
  }

  export type selected_teachersUpdateOneRequiredWithoutSelected4_questionNestedInput = {
    create?: XOR<selected_teachersCreateWithoutSelected4_questionInput, selected_teachersUncheckedCreateWithoutSelected4_questionInput>
    connectOrCreate?: selected_teachersCreateOrConnectWithoutSelected4_questionInput
    upsert?: selected_teachersUpsertWithoutSelected4_questionInput
    connect?: selected_teachersWhereUniqueInput
    update?: XOR<selected_teachersUpdateWithoutSelected4_questionInput, selected_teachersUncheckedUpdateWithoutSelected4_questionInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type customer_agedetailsCreateWithoutCustomer_tblInput = {
    customer_age: number
  }

  export type customer_agedetailsUncheckedCreateWithoutCustomer_tblInput = {
    ID?: number
    customer_age: number
  }

  export type customer_agedetailsCreateOrConnectWithoutCustomer_tblInput = {
    where: customer_agedetailsWhereUniqueInput
    create: XOR<customer_agedetailsCreateWithoutCustomer_tblInput, customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>
  }

  export type customer_agedetailsCreateManyCustomer_tblInputEnvelope = {
    data: Enumerable<customer_agedetailsCreateManyCustomer_tblInput>
    skipDuplicates?: boolean
  }

  export type deliver_statusCreateWithoutCustomer_tblInput = {
    product_status: string
  }

  export type deliver_statusUncheckedCreateWithoutCustomer_tblInput = {
    deliver_id?: number
    product_status: string
  }

  export type deliver_statusCreateOrConnectWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    create: XOR<deliver_statusCreateWithoutCustomer_tblInput, deliver_statusUncheckedCreateWithoutCustomer_tblInput>
  }

  export type deliver_statusCreateManyCustomer_tblInputEnvelope = {
    data: Enumerable<deliver_statusCreateManyCustomer_tblInput>
    skipDuplicates?: boolean
  }

  export type orders_tblCreateWithoutCustomer_tblInput = {
    product_name: string
    product_price?: number | null
  }

  export type orders_tblUncheckedCreateWithoutCustomer_tblInput = {
    product_id?: number
    product_name: string
    product_price?: number | null
  }

  export type orders_tblCreateOrConnectWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    create: XOR<orders_tblCreateWithoutCustomer_tblInput, orders_tblUncheckedCreateWithoutCustomer_tblInput>
  }

  export type orders_tblCreateManyCustomer_tblInputEnvelope = {
    data: Enumerable<orders_tblCreateManyCustomer_tblInput>
    skipDuplicates?: boolean
  }

  export type customer_agedetailsUpsertWithWhereUniqueWithoutCustomer_tblInput = {
    where: customer_agedetailsWhereUniqueInput
    update: XOR<customer_agedetailsUpdateWithoutCustomer_tblInput, customer_agedetailsUncheckedUpdateWithoutCustomer_tblInput>
    create: XOR<customer_agedetailsCreateWithoutCustomer_tblInput, customer_agedetailsUncheckedCreateWithoutCustomer_tblInput>
  }

  export type customer_agedetailsUpdateWithWhereUniqueWithoutCustomer_tblInput = {
    where: customer_agedetailsWhereUniqueInput
    data: XOR<customer_agedetailsUpdateWithoutCustomer_tblInput, customer_agedetailsUncheckedUpdateWithoutCustomer_tblInput>
  }

  export type customer_agedetailsUpdateManyWithWhereWithoutCustomer_tblInput = {
    where: customer_agedetailsScalarWhereInput
    data: XOR<customer_agedetailsUpdateManyMutationInput, customer_agedetailsUncheckedUpdateManyWithoutCustomer_agedetailsInput>
  }

  export type customer_agedetailsScalarWhereInput = {
    AND?: Enumerable<customer_agedetailsScalarWhereInput>
    OR?: Enumerable<customer_agedetailsScalarWhereInput>
    NOT?: Enumerable<customer_agedetailsScalarWhereInput>
    ID?: IntFilter | number
    customer_id?: IntFilter | number
    customer_age?: IntFilter | number
  }

  export type deliver_statusUpsertWithWhereUniqueWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    update: XOR<deliver_statusUpdateWithoutCustomer_tblInput, deliver_statusUncheckedUpdateWithoutCustomer_tblInput>
    create: XOR<deliver_statusCreateWithoutCustomer_tblInput, deliver_statusUncheckedCreateWithoutCustomer_tblInput>
  }

  export type deliver_statusUpdateWithWhereUniqueWithoutCustomer_tblInput = {
    where: deliver_statusWhereUniqueInput
    data: XOR<deliver_statusUpdateWithoutCustomer_tblInput, deliver_statusUncheckedUpdateWithoutCustomer_tblInput>
  }

  export type deliver_statusUpdateManyWithWhereWithoutCustomer_tblInput = {
    where: deliver_statusScalarWhereInput
    data: XOR<deliver_statusUpdateManyMutationInput, deliver_statusUncheckedUpdateManyWithoutDeliver_statusInput>
  }

  export type deliver_statusScalarWhereInput = {
    AND?: Enumerable<deliver_statusScalarWhereInput>
    OR?: Enumerable<deliver_statusScalarWhereInput>
    NOT?: Enumerable<deliver_statusScalarWhereInput>
    deliver_id?: IntFilter | number
    customer_id?: IntFilter | number
    product_status?: StringFilter | string
  }

  export type orders_tblUpsertWithWhereUniqueWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    update: XOR<orders_tblUpdateWithoutCustomer_tblInput, orders_tblUncheckedUpdateWithoutCustomer_tblInput>
    create: XOR<orders_tblCreateWithoutCustomer_tblInput, orders_tblUncheckedCreateWithoutCustomer_tblInput>
  }

  export type orders_tblUpdateWithWhereUniqueWithoutCustomer_tblInput = {
    where: orders_tblWhereUniqueInput
    data: XOR<orders_tblUpdateWithoutCustomer_tblInput, orders_tblUncheckedUpdateWithoutCustomer_tblInput>
  }

  export type orders_tblUpdateManyWithWhereWithoutCustomer_tblInput = {
    where: orders_tblScalarWhereInput
    data: XOR<orders_tblUpdateManyMutationInput, orders_tblUncheckedUpdateManyWithoutOrders_tblInput>
  }

  export type orders_tblScalarWhereInput = {
    AND?: Enumerable<orders_tblScalarWhereInput>
    OR?: Enumerable<orders_tblScalarWhereInput>
    NOT?: Enumerable<orders_tblScalarWhereInput>
    product_id?: IntFilter | number
    product_name?: StringFilter | string
    product_price?: IntNullableFilter | number | null
    customer_id?: IntFilter | number
  }

  export type customer_tblCreateWithoutOrders_tblInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsCreateNestedManyWithoutCustomer_tblInput
    deliver_status?: deliver_statusCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateWithoutOrders_tblInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsUncheckedCreateNestedManyWithoutCustomer_tblInput
    deliver_status?: deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblCreateOrConnectWithoutOrders_tblInput = {
    where: customer_tblWhereUniqueInput
    create: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
  }

  export type customer_tblUpsertWithoutOrders_tblInput = {
    update: XOR<customer_tblUpdateWithoutOrders_tblInput, customer_tblUncheckedUpdateWithoutOrders_tblInput>
    create: XOR<customer_tblCreateWithoutOrders_tblInput, customer_tblUncheckedCreateWithoutOrders_tblInput>
  }

  export type customer_tblUpdateWithoutOrders_tblInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUpdateManyWithoutCustomer_tblNestedInput
    deliver_status?: deliver_statusUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateWithoutOrders_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUncheckedUpdateManyWithoutCustomer_tblNestedInput
    deliver_status?: deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblCreateWithoutDeliver_statusInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateWithoutDeliver_statusInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    customer_agedetails?: customer_agedetailsUncheckedCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblCreateOrConnectWithoutDeliver_statusInput = {
    where: customer_tblWhereUniqueInput
    create: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
  }

  export type customer_tblUpsertWithoutDeliver_statusInput = {
    update: XOR<customer_tblUpdateWithoutDeliver_statusInput, customer_tblUncheckedUpdateWithoutDeliver_statusInput>
    create: XOR<customer_tblCreateWithoutDeliver_statusInput, customer_tblUncheckedCreateWithoutDeliver_statusInput>
  }

  export type customer_tblUpdateWithoutDeliver_statusInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateWithoutDeliver_statusInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    customer_agedetails?: customer_agedetailsUncheckedUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblCreateWithoutCustomer_agedetailsInput = {
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblUncheckedCreateWithoutCustomer_agedetailsInput = {
    ID?: number
    customer_first_name: string
    customer_last_name: string
    Email_id: string
    deliver_status?: deliver_statusUncheckedCreateNestedManyWithoutCustomer_tblInput
    orders_tbl?: orders_tblUncheckedCreateNestedManyWithoutCustomer_tblInput
  }

  export type customer_tblCreateOrConnectWithoutCustomer_agedetailsInput = {
    where: customer_tblWhereUniqueInput
    create: XOR<customer_tblCreateWithoutCustomer_agedetailsInput, customer_tblUncheckedCreateWithoutCustomer_agedetailsInput>
  }

  export type customer_tblUpsertWithoutCustomer_agedetailsInput = {
    update: XOR<customer_tblUpdateWithoutCustomer_agedetailsInput, customer_tblUncheckedUpdateWithoutCustomer_agedetailsInput>
    create: XOR<customer_tblCreateWithoutCustomer_agedetailsInput, customer_tblUncheckedCreateWithoutCustomer_agedetailsInput>
  }

  export type customer_tblUpdateWithoutCustomer_agedetailsInput = {
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUpdateManyWithoutCustomer_tblNestedInput
  }

  export type customer_tblUncheckedUpdateWithoutCustomer_agedetailsInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_first_name?: StringFieldUpdateOperationsInput | string
    customer_last_name?: StringFieldUpdateOperationsInput | string
    Email_id?: StringFieldUpdateOperationsInput | string
    deliver_status?: deliver_statusUncheckedUpdateManyWithoutCustomer_tblNestedInput
    orders_tbl?: orders_tblUncheckedUpdateManyWithoutCustomer_tblNestedInput
  }

  export type product_tableCreateWithoutCart_tableInput = {
    product_image: string
    product_name: string
    product_price: number
    strikeout_price?: number | null
  }

  export type product_tableUncheckedCreateWithoutCart_tableInput = {
    product_id?: number
    product_image: string
    product_name: string
    product_price: number
    strikeout_price?: number | null
  }

  export type product_tableCreateOrConnectWithoutCart_tableInput = {
    where: product_tableWhereUniqueInput
    create: XOR<product_tableCreateWithoutCart_tableInput, product_tableUncheckedCreateWithoutCart_tableInput>
  }

  export type product_tableUpsertWithoutCart_tableInput = {
    update: XOR<product_tableUpdateWithoutCart_tableInput, product_tableUncheckedUpdateWithoutCart_tableInput>
    create: XOR<product_tableCreateWithoutCart_tableInput, product_tableUncheckedCreateWithoutCart_tableInput>
  }

  export type product_tableUpdateWithoutCart_tableInput = {
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type product_tableUncheckedUpdateWithoutCart_tableInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_image?: StringFieldUpdateOperationsInput | string
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    strikeout_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cart_tableCreateWithoutProduct_tableInput = {
    product_name: string
    product_price_cart: number
    product_quantity_cart?: number | null
    product_image: string
  }

  export type cart_tableUncheckedCreateWithoutProduct_tableInput = {
    id?: number
    product_name: string
    product_price_cart: number
    product_quantity_cart?: number | null
    product_image: string
  }

  export type cart_tableCreateOrConnectWithoutProduct_tableInput = {
    where: cart_tableWhereUniqueInput
    create: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
  }

  export type cart_tableUpsertWithoutProduct_tableInput = {
    update: XOR<cart_tableUpdateWithoutProduct_tableInput, cart_tableUncheckedUpdateWithoutProduct_tableInput>
    create: XOR<cart_tableCreateWithoutProduct_tableInput, cart_tableUncheckedCreateWithoutProduct_tableInput>
  }

  export type cart_tableUpdateWithoutProduct_tableInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
  }

  export type cart_tableUncheckedUpdateWithoutProduct_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price_cart?: IntFieldUpdateOperationsInput | number
    product_quantity_cart?: NullableIntFieldUpdateOperationsInput | number | null
    product_image?: StringFieldUpdateOperationsInput | string
  }

  export type selected1_questionCreateWithoutSelected_teachersInput = {
    question_1: string
    answer: string
  }

  export type selected1_questionUncheckedCreateWithoutSelected_teachersInput = {
    ID?: number
    question_1: string
    answer: string
  }

  export type selected1_questionCreateOrConnectWithoutSelected_teachersInput = {
    where: selected1_questionWhereUniqueInput
    create: XOR<selected1_questionCreateWithoutSelected_teachersInput, selected1_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected1_questionCreateManySelected_teachersInputEnvelope = {
    data: Enumerable<selected1_questionCreateManySelected_teachersInput>
    skipDuplicates?: boolean
  }

  export type selected2_questionCreateWithoutSelected_teachersInput = {
    question_2: string
    answer: string
  }

  export type selected2_questionUncheckedCreateWithoutSelected_teachersInput = {
    ID?: number
    question_2: string
    answer: string
  }

  export type selected2_questionCreateOrConnectWithoutSelected_teachersInput = {
    where: selected2_questionWhereUniqueInput
    create: XOR<selected2_questionCreateWithoutSelected_teachersInput, selected2_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected2_questionCreateManySelected_teachersInputEnvelope = {
    data: Enumerable<selected2_questionCreateManySelected_teachersInput>
    skipDuplicates?: boolean
  }

  export type selected3_questionCreateWithoutSelected_teachersInput = {
    question_3: string
    answer: string
  }

  export type selected3_questionUncheckedCreateWithoutSelected_teachersInput = {
    ID?: number
    question_3: string
    answer: string
  }

  export type selected3_questionCreateOrConnectWithoutSelected_teachersInput = {
    where: selected3_questionWhereUniqueInput
    create: XOR<selected3_questionCreateWithoutSelected_teachersInput, selected3_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected3_questionCreateManySelected_teachersInputEnvelope = {
    data: Enumerable<selected3_questionCreateManySelected_teachersInput>
    skipDuplicates?: boolean
  }

  export type selected4_questionCreateWithoutSelected_teachersInput = {
    question_4: string
    answer: string
  }

  export type selected4_questionUncheckedCreateWithoutSelected_teachersInput = {
    ID?: number
    question_4: string
    answer: string
  }

  export type selected4_questionCreateOrConnectWithoutSelected_teachersInput = {
    where: selected4_questionWhereUniqueInput
    create: XOR<selected4_questionCreateWithoutSelected_teachersInput, selected4_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected4_questionCreateManySelected_teachersInputEnvelope = {
    data: Enumerable<selected4_questionCreateManySelected_teachersInput>
    skipDuplicates?: boolean
  }

  export type selected1_questionUpsertWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected1_questionWhereUniqueInput
    update: XOR<selected1_questionUpdateWithoutSelected_teachersInput, selected1_questionUncheckedUpdateWithoutSelected_teachersInput>
    create: XOR<selected1_questionCreateWithoutSelected_teachersInput, selected1_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected1_questionUpdateWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected1_questionWhereUniqueInput
    data: XOR<selected1_questionUpdateWithoutSelected_teachersInput, selected1_questionUncheckedUpdateWithoutSelected_teachersInput>
  }

  export type selected1_questionUpdateManyWithWhereWithoutSelected_teachersInput = {
    where: selected1_questionScalarWhereInput
    data: XOR<selected1_questionUpdateManyMutationInput, selected1_questionUncheckedUpdateManyWithoutSelected1_questionInput>
  }

  export type selected1_questionScalarWhereInput = {
    AND?: Enumerable<selected1_questionScalarWhereInput>
    OR?: Enumerable<selected1_questionScalarWhereInput>
    NOT?: Enumerable<selected1_questionScalarWhereInput>
    ID?: IntFilter | number
    question_1?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
  }

  export type selected2_questionUpsertWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected2_questionWhereUniqueInput
    update: XOR<selected2_questionUpdateWithoutSelected_teachersInput, selected2_questionUncheckedUpdateWithoutSelected_teachersInput>
    create: XOR<selected2_questionCreateWithoutSelected_teachersInput, selected2_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected2_questionUpdateWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected2_questionWhereUniqueInput
    data: XOR<selected2_questionUpdateWithoutSelected_teachersInput, selected2_questionUncheckedUpdateWithoutSelected_teachersInput>
  }

  export type selected2_questionUpdateManyWithWhereWithoutSelected_teachersInput = {
    where: selected2_questionScalarWhereInput
    data: XOR<selected2_questionUpdateManyMutationInput, selected2_questionUncheckedUpdateManyWithoutSelected2_questionInput>
  }

  export type selected2_questionScalarWhereInput = {
    AND?: Enumerable<selected2_questionScalarWhereInput>
    OR?: Enumerable<selected2_questionScalarWhereInput>
    NOT?: Enumerable<selected2_questionScalarWhereInput>
    ID?: IntFilter | number
    question_2?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
  }

  export type selected3_questionUpsertWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected3_questionWhereUniqueInput
    update: XOR<selected3_questionUpdateWithoutSelected_teachersInput, selected3_questionUncheckedUpdateWithoutSelected_teachersInput>
    create: XOR<selected3_questionCreateWithoutSelected_teachersInput, selected3_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected3_questionUpdateWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected3_questionWhereUniqueInput
    data: XOR<selected3_questionUpdateWithoutSelected_teachersInput, selected3_questionUncheckedUpdateWithoutSelected_teachersInput>
  }

  export type selected3_questionUpdateManyWithWhereWithoutSelected_teachersInput = {
    where: selected3_questionScalarWhereInput
    data: XOR<selected3_questionUpdateManyMutationInput, selected3_questionUncheckedUpdateManyWithoutSelected3_questionInput>
  }

  export type selected3_questionScalarWhereInput = {
    AND?: Enumerable<selected3_questionScalarWhereInput>
    OR?: Enumerable<selected3_questionScalarWhereInput>
    NOT?: Enumerable<selected3_questionScalarWhereInput>
    ID?: IntFilter | number
    question_3?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
  }

  export type selected4_questionUpsertWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected4_questionWhereUniqueInput
    update: XOR<selected4_questionUpdateWithoutSelected_teachersInput, selected4_questionUncheckedUpdateWithoutSelected_teachersInput>
    create: XOR<selected4_questionCreateWithoutSelected_teachersInput, selected4_questionUncheckedCreateWithoutSelected_teachersInput>
  }

  export type selected4_questionUpdateWithWhereUniqueWithoutSelected_teachersInput = {
    where: selected4_questionWhereUniqueInput
    data: XOR<selected4_questionUpdateWithoutSelected_teachersInput, selected4_questionUncheckedUpdateWithoutSelected_teachersInput>
  }

  export type selected4_questionUpdateManyWithWhereWithoutSelected_teachersInput = {
    where: selected4_questionScalarWhereInput
    data: XOR<selected4_questionUpdateManyMutationInput, selected4_questionUncheckedUpdateManyWithoutSelected4_questionInput>
  }

  export type selected4_questionScalarWhereInput = {
    AND?: Enumerable<selected4_questionScalarWhereInput>
    OR?: Enumerable<selected4_questionScalarWhereInput>
    NOT?: Enumerable<selected4_questionScalarWhereInput>
    ID?: IntFilter | number
    question_4?: StringFilter | string
    answer?: StringFilter | string
    selected_id?: IntFilter | number
  }

  export type selected_teachersCreateWithoutSelected1_questionInput = {
    teachers_name: string
    selected2_question?: selected2_questionCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUncheckedCreateWithoutSelected1_questionInput = {
    selected_id?: number
    teachers_name: string
    selected2_question?: selected2_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersCreateOrConnectWithoutSelected1_questionInput = {
    where: selected_teachersWhereUniqueInput
    create: XOR<selected_teachersCreateWithoutSelected1_questionInput, selected_teachersUncheckedCreateWithoutSelected1_questionInput>
  }

  export type selected_teachersUpsertWithoutSelected1_questionInput = {
    update: XOR<selected_teachersUpdateWithoutSelected1_questionInput, selected_teachersUncheckedUpdateWithoutSelected1_questionInput>
    create: XOR<selected_teachersCreateWithoutSelected1_questionInput, selected_teachersUncheckedCreateWithoutSelected1_questionInput>
  }

  export type selected_teachersUpdateWithoutSelected1_questionInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected2_question?: selected2_questionUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersUncheckedUpdateWithoutSelected1_questionInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected2_question?: selected2_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersCreateWithoutSelected2_questionInput = {
    teachers_name: string
    selected1_question?: selected1_questionCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUncheckedCreateWithoutSelected2_questionInput = {
    selected_id?: number
    teachers_name: string
    selected1_question?: selected1_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersCreateOrConnectWithoutSelected2_questionInput = {
    where: selected_teachersWhereUniqueInput
    create: XOR<selected_teachersCreateWithoutSelected2_questionInput, selected_teachersUncheckedCreateWithoutSelected2_questionInput>
  }

  export type selected_teachersUpsertWithoutSelected2_questionInput = {
    update: XOR<selected_teachersUpdateWithoutSelected2_questionInput, selected_teachersUncheckedUpdateWithoutSelected2_questionInput>
    create: XOR<selected_teachersCreateWithoutSelected2_questionInput, selected_teachersUncheckedCreateWithoutSelected2_questionInput>
  }

  export type selected_teachersUpdateWithoutSelected2_questionInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersUncheckedUpdateWithoutSelected2_questionInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersCreateWithoutSelected3_questionInput = {
    teachers_name: string
    selected1_question?: selected1_questionCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUncheckedCreateWithoutSelected3_questionInput = {
    selected_id?: number
    teachers_name: string
    selected1_question?: selected1_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected4_question?: selected4_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersCreateOrConnectWithoutSelected3_questionInput = {
    where: selected_teachersWhereUniqueInput
    create: XOR<selected_teachersCreateWithoutSelected3_questionInput, selected_teachersUncheckedCreateWithoutSelected3_questionInput>
  }

  export type selected_teachersUpsertWithoutSelected3_questionInput = {
    update: XOR<selected_teachersUpdateWithoutSelected3_questionInput, selected_teachersUncheckedUpdateWithoutSelected3_questionInput>
    create: XOR<selected_teachersCreateWithoutSelected3_questionInput, selected_teachersUncheckedCreateWithoutSelected3_questionInput>
  }

  export type selected_teachersUpdateWithoutSelected3_questionInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersUncheckedUpdateWithoutSelected3_questionInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected4_question?: selected4_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersCreateWithoutSelected4_questionInput = {
    teachers_name: string
    selected1_question?: selected1_questionCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersUncheckedCreateWithoutSelected4_questionInput = {
    selected_id?: number
    teachers_name: string
    selected1_question?: selected1_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected2_question?: selected2_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
    selected3_question?: selected3_questionUncheckedCreateNestedManyWithoutSelected_teachersInput
  }

  export type selected_teachersCreateOrConnectWithoutSelected4_questionInput = {
    where: selected_teachersWhereUniqueInput
    create: XOR<selected_teachersCreateWithoutSelected4_questionInput, selected_teachersUncheckedCreateWithoutSelected4_questionInput>
  }

  export type selected_teachersUpsertWithoutSelected4_questionInput = {
    update: XOR<selected_teachersUpdateWithoutSelected4_questionInput, selected_teachersUncheckedUpdateWithoutSelected4_questionInput>
    create: XOR<selected_teachersCreateWithoutSelected4_questionInput, selected_teachersUncheckedCreateWithoutSelected4_questionInput>
  }

  export type selected_teachersUpdateWithoutSelected4_questionInput = {
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUpdateManyWithoutSelected_teachersNestedInput
  }

  export type selected_teachersUncheckedUpdateWithoutSelected4_questionInput = {
    selected_id?: IntFieldUpdateOperationsInput | number
    teachers_name?: StringFieldUpdateOperationsInput | string
    selected1_question?: selected1_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected2_question?: selected2_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
    selected3_question?: selected3_questionUncheckedUpdateManyWithoutSelected_teachersNestedInput
  }

  export type customer_agedetailsCreateManyCustomer_tblInput = {
    ID?: number
    customer_age: number
  }

  export type deliver_statusCreateManyCustomer_tblInput = {
    deliver_id?: number
    product_status: string
  }

  export type orders_tblCreateManyCustomer_tblInput = {
    product_id?: number
    product_name: string
    product_price?: number | null
  }

  export type customer_agedetailsUpdateWithoutCustomer_tblInput = {
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type customer_agedetailsUncheckedUpdateWithoutCustomer_tblInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type customer_agedetailsUncheckedUpdateManyWithoutCustomer_agedetailsInput = {
    ID?: IntFieldUpdateOperationsInput | number
    customer_age?: IntFieldUpdateOperationsInput | number
  }

  export type deliver_statusUpdateWithoutCustomer_tblInput = {
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type deliver_statusUncheckedUpdateWithoutCustomer_tblInput = {
    deliver_id?: IntFieldUpdateOperationsInput | number
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type deliver_statusUncheckedUpdateManyWithoutDeliver_statusInput = {
    deliver_id?: IntFieldUpdateOperationsInput | number
    product_status?: StringFieldUpdateOperationsInput | string
  }

  export type orders_tblUpdateWithoutCustomer_tblInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateWithoutCustomer_tblInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orders_tblUncheckedUpdateManyWithoutOrders_tblInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type selected1_questionCreateManySelected_teachersInput = {
    ID?: number
    question_1: string
    answer: string
  }

  export type selected2_questionCreateManySelected_teachersInput = {
    ID?: number
    question_2: string
    answer: string
  }

  export type selected3_questionCreateManySelected_teachersInput = {
    ID?: number
    question_3: string
    answer: string
  }

  export type selected4_questionCreateManySelected_teachersInput = {
    ID?: number
    question_4: string
    answer: string
  }

  export type selected1_questionUpdateWithoutSelected_teachersInput = {
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected1_questionUncheckedUpdateWithoutSelected_teachersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected1_questionUncheckedUpdateManyWithoutSelected1_questionInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_1?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected2_questionUpdateWithoutSelected_teachersInput = {
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected2_questionUncheckedUpdateWithoutSelected_teachersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected2_questionUncheckedUpdateManyWithoutSelected2_questionInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_2?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected3_questionUpdateWithoutSelected_teachersInput = {
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected3_questionUncheckedUpdateWithoutSelected_teachersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected3_questionUncheckedUpdateManyWithoutSelected3_questionInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_3?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected4_questionUpdateWithoutSelected_teachersInput = {
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected4_questionUncheckedUpdateWithoutSelected_teachersInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type selected4_questionUncheckedUpdateManyWithoutSelected4_questionInput = {
    ID?: IntFieldUpdateOperationsInput | number
    question_4?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}